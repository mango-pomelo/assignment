{"ast":null,"code":"import { Grid, InfiniteScroll as GridInfiniteScroll } from '@syncfusion/ej2-grids';\nimport { RowRenderer, resetRowIndex } from '@syncfusion/ej2-grids';\nimport { getValue, isNullOrUndefined, remove } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { DataManager, Predicate, Query } from '@syncfusion/ej2-data';\nimport { findChildrenRecords } from '../utils';\n/**\n * TreeGrid Infinite Scroll module will handle Infinite Scrolling.\n *\n * @hidden\n */\n\nvar InfiniteScroll =\n/** @class */\nfunction () {\n  /**\n   * Constructor for VirtualScroll module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function InfiniteScroll(parent) {\n    this.parent = parent;\n    Grid.Inject(GridInfiniteScroll);\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} - Returns Logger module name\n   */\n\n\n  InfiniteScroll.prototype.getModuleName = function () {\n    return 'infiniteScroll';\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  InfiniteScroll.prototype.addEventListener = function () {\n    this.parent.on(events.pagingActions, this.infinitePageAction, this);\n    this.parent.on('infinite-remote-expand', this.infiniteRemoteExpand, this);\n    this.parent.grid.on('delete-complete', this.infiniteDeleteHandler, this);\n    this.parent.grid.on('infinite-edit-handler', this.infiniteEditHandler, this);\n    this.parent.grid.on('infinite-crud-cancel', this.createRows, this);\n    this.parent.grid.on('content-ready', this.contentready, this);\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  InfiniteScroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('infinite-remote-expand', this.infiniteRemoteExpand);\n    this.parent.grid.off('delete-complete', this.infiniteDeleteHandler);\n    this.parent.grid.off('infinite-edit-handler', this.infiniteEditHandler);\n    this.parent.off(events.pagingActions, this.infinitePageAction);\n    this.parent.grid.off('infinite-crud-cancel', this.createRows);\n    this.parent.grid.off('content-ready', this.contentready);\n  };\n  /**\n   * Handles the Expand Collapse action for Remote data with infinite scrolling.\n   *\n   * @param {{ index: number, childData: ITreeData[] }} args - expanded row index and its child data\n   * @param { number } args.index - expanded row index\n   * @param { ITreeData[] } args.childData - child data of expanded row\n   * @returns {void}\n   */\n\n\n  InfiniteScroll.prototype.infiniteRemoteExpand = function (args) {\n    var rowObjects = this.parent.grid.getRowsObject();\n    var locator = 'serviceLocator';\n    var generateRows = 'generateRows';\n    var serviceLocator = this.parent.grid.infiniteScrollModule[locator];\n    var rowRenderer = new RowRenderer(serviceLocator, null, this.parent.grid);\n    var rows = this.parent.getRows();\n    var position = args.index === rows.length - 1 ? 'after' : 'before';\n    var cols = this.parent.grid.getColumns();\n    var childRowObjects = this.parent.grid.infiniteScrollModule[generateRows](args.childData, args);\n    var childRowElements = [];\n\n    for (var i = 0; i < childRowObjects.length; i++) {\n      childRowElements.push(rowRenderer.render(childRowObjects[i], cols));\n    }\n\n    rowObjects.splice.apply(rowObjects, [args.index + 1, 0].concat(childRowObjects));\n\n    for (var i = 0; i < childRowElements.length; i++) {\n      if (position === 'after') {\n        rows[args.index + i][position](childRowElements[i]);\n      } else {\n        rows[args.index + i + 1][position](childRowElements[i]);\n      }\n\n      rows.splice(args.index + 1 + i, 0, childRowElements[i]);\n    }\n\n    resetRowIndex(this.parent.grid, this.parent.grid.getRowsObject(), this.parent.grid.getRows(), 0);\n  };\n  /**\n   * Resetted the row index for expand collapse action for cache support.\n   *\n   * @returns {void}\n   */\n\n\n  InfiniteScroll.prototype.contentready = function () {\n    if (this.parent.infiniteScrollSettings.enableCache && !isNullOrUndefined(this.parent.editModule)) {\n      var updateIndex = 'updateIndex';\n      this.parent.editModule[updateIndex](this.parent.grid.dataSource, this.parent.getRows(), this.parent.getCurrentViewRecords());\n\n      if (this.parent.getFrozenColumns()) {\n        this.parent.editModule[updateIndex](this.parent.grid.dataSource, this.parent.getMovableDataRows(), this.parent.getCurrentViewRecords());\n      }\n    }\n  };\n  /**\n   * Handles the page query for Data operations and CRUD actions.\n   *\n   * @param {{ result: ITreeData[], count: number, actionArgs: object }} pageingDetails - data, its count and action details\n   * @param {ITreeData[]} pageingDetails.result - data on scroll action\n   * @param {number} pageingDetails.count - data count on scroll action\n   * @param {Object} pageingDetails.actionArgs - scroll action details\n   * @returns {void}\n   */\n\n\n  InfiniteScroll.prototype.infinitePageAction = function (pageingDetails) {\n    var dm = new DataManager(pageingDetails.result);\n    var expanded = new Predicate('expanded', 'notequal', null).or('expanded', 'notequal', undefined);\n    var visualData = dm.executeLocal(new Query().where(expanded));\n    var actionArgs = getValue('actionArgs', pageingDetails.actionArgs);\n    var actions = getValue('actions', this.parent.grid.infiniteScrollModule);\n    var initial = actions.some(function (value) {\n      return value === actionArgs.requestType;\n    });\n    var initialRender = initial ? true : this.parent.initialRender ? true : false;\n    this.visualData = visualData;\n    pageingDetails.count = visualData.length;\n\n    if (getValue('isPrinting', pageingDetails.actionArgs)) {\n      pageingDetails.result = visualData;\n    } else {\n      var query = new Query();\n      var isCache = this.parent.infiniteScrollSettings.enableCache;\n\n      if (isCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n        this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n      }\n\n      var size = initialRender ? this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks : this.parent.pageSettings.pageSize;\n      var current = this.parent.grid.pageSettings.currentPage;\n\n      if (!isNullOrUndefined(actionArgs)) {\n        var lastIndex = getValue('lastIndex', this.parent.grid.infiniteScrollModule);\n        var firstIndex = getValue('firstIndex', this.parent.grid.infiniteScrollModule);\n\n        if (!isCache && actionArgs.requestType === 'delete') {\n          var skip = lastIndex - actionArgs.data.length + 1;\n          var take = actionArgs.data.length;\n          query = query.skip(skip).take(take);\n        } else if (isCache && actionArgs.requestType === 'delete' || actionArgs.requestType === 'save' && actionArgs.action === 'add') {\n          query = query.skip(firstIndex);\n          query = query.take(this.parent.infiniteScrollSettings.initialBlocks * this.parent.pageSettings.pageSize);\n        } else {\n          query = query.page(current, size);\n        }\n      } else {\n        query = query.page(current, size);\n      }\n\n      dm.dataSource.json = visualData;\n\n      if (!isCache && !isNullOrUndefined(actionArgs) && actionArgs.requestType === 'save' && actionArgs.action === 'add') {\n        pageingDetails.result = [actionArgs.data];\n      } else {\n        pageingDetails.result = dm.executeLocal(query);\n      }\n    }\n\n    this.parent.notify('updateAction', pageingDetails);\n  };\n  /**\n   * Handles the currentviewdata for delete operation.\n   *\n   * @param {{ e: InfiniteScrollArgs, result: Object[] }} args - Scroller and data details\n   * @param {InfiniteScrollArgs} args.e -  scroller details while CRUD\n   * @param {Object[]} args.result - data details while CRUD\n   * @returns {void}\n   */\n\n\n  InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n    var infiniteData = 'infiniteCurrentViewData';\n    var infiniteCurrentViewData = this.parent.grid.infiniteScrollModule[infiniteData];\n    var keys = Object.keys(infiniteCurrentViewData);\n\n    if (args.e.requestType === 'delete' && args.result.length > 1) {\n      for (var i = 1; i < args.result.length; i++) {\n        infiniteCurrentViewData[keys[keys.length - 1]].push(args.result[i]);\n      }\n    }\n\n    if (args.e.requestType === 'save' && getValue('action', args.e) === 'add' && this.parent.editSettings.newRowPosition === 'Child') {\n      args.result[0].level += 1;\n    }\n  };\n  /**\n   * Handles the row objects for delete operation.\n   *\n   * @param {ActionEventArgs} args - crud action details\n   * @returns {void}\n   */\n\n\n  InfiniteScroll.prototype.infiniteDeleteHandler = function (args) {\n    if (args.requestType === 'delete') {\n      var rows = this.parent.grid.getRowsObject();\n      var rowElms = this.parent.getRows();\n      var data = args.data instanceof Array ? args.data : [args.data];\n      var keyField = this.parent.grid.getPrimaryKeyFieldNames()[0];\n      this.removeRows(rowElms, rows, data, keyField, true);\n\n      if (this.parent.getFrozenColumns() > 0) {\n        var mRows = this.parent.grid.getMovableRowsObject();\n        var mRowElms = this.parent.grid.getMovableRows();\n        this.removeRows(mRowElms, mRows, data, keyField);\n      }\n    }\n  };\n  /**\n   * Handles the row objects for delete operation.\n   *\n   * @param {Element[]} rowElms - row elements\n   * @param {Row<Column>[]} rows - Row object collection\n   * @param {Object[]} data - data collection\n   * @param {string} keyField - primary key name\n   * @param { boolean} isFrozen - Specifies whether frozen column enabled\n   * @returns {void}\n   */\n\n\n  InfiniteScroll.prototype.removeRows = function (rowElms, rows, data, keyField, isFrozen) {\n    var _this = this;\n\n    var resetInfiniteCurrentViewData = 'resetInfiniteCurrentViewData';\n\n    var _loop_1 = function (i) {\n      rows.filter(function (e, index) {\n        if (e.data[keyField] === data[i][keyField]) {\n          if (isFrozen) {\n            var page = Math.ceil((index + 1) / _this.parent.grid.pageSettings.pageSize);\n\n            _this.parent.grid.infiniteScrollModule[resetInfiniteCurrentViewData](page, index);\n          }\n\n          rows.splice(index, 1);\n          remove(rowElms[index]);\n          rowElms.splice(index, 1);\n        }\n      });\n    };\n\n    for (var i = 0; i < data.length; i++) {\n      _loop_1(i);\n    }\n  };\n  /**\n   * Handles the row objects for Add operation.\n   */\n\n\n  InfiniteScroll.prototype.createRows = function (eventArgs) {\n    var locator = 'serviceLocator';\n    var actionArgs = eventArgs.args.e;\n    var row = eventArgs.row;\n    var serviceLocator = this.parent.grid.infiniteScrollModule[locator];\n    var rowRenderer = new RowRenderer(serviceLocator, null, this.parent.grid);\n    var tbody;\n    var currentData = this.parent.getCurrentViewRecords();\n    var currentRows = eventArgs.isMovable ? this.parent.grid.getMovableRows() : this.parent.grid.getDataRows();\n\n    if (eventArgs.isFrozenRight) {\n      tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector('tbody');\n    } else {\n      tbody = !this.parent.grid.isFrozenGrid() ? this.parent.getContent().querySelector('tbody') : eventArgs.isMovable ? this.parent.grid.getMovableVirtualContent().querySelector('tbody') : this.parent.grid.getFrozenVirtualContent().querySelector('tbody');\n    }\n\n    if (this.parent.frozenRows) {\n      tbody = eventArgs.isFrozenRows && this.parent.grid.infiniteScrollModule.requestType !== 'add' || !eventArgs.isFrozenRows && this.parent.grid.infiniteScrollModule.requestType === 'add' ? !this.parent.grid.isFrozenGrid() ? this.parent.getHeaderContent().querySelector('tbody') : eventArgs.isMovable ? this.parent.grid.getMovableVirtualHeader().querySelector('tbody') : eventArgs.isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector('tbody') : this.parent.grid.getFrozenVirtualHeader().querySelector('tbody') : tbody;\n    }\n\n    var position;\n    var addRowIndex = 'addRowIndex';\n    var newRowIndex = this.parent.editModule[addRowIndex];\n\n    for (var i = 0; i < row.length; i++) {\n      var newRow = rowRenderer.render(row[i], this.parent.grid.getColumns());\n\n      if (actionArgs.requestType === 'save' && actionArgs.action === 'add') {\n        if (getValue('selectedIndex', this.parent.editModule) !== -1 && this.parent.editSettings.newRowPosition !== 'Top') {\n          if (this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child') {\n            position = 'after';\n            newRowIndex += findChildrenRecords(currentData[newRowIndex + 1]).length;\n\n            if (this.parent.editSettings.newRowPosition === 'Child') {\n              newRowIndex -= 1; //// for child position already child record is added in childRecords so subtracting 1\n            }\n\n            currentRows[newRowIndex][position](newRow);\n          } else if (this.parent.editSettings.newRowPosition === 'Above') {\n            position = 'before';\n            currentRows[this.parent.editModule[addRowIndex]][position](newRow);\n          }\n        } else if (this.parent.editSettings.newRowPosition === 'Bottom') {\n          tbody.appendChild(newRow);\n        } else {\n          tbody.insertBefore(newRow, tbody.firstElementChild);\n        }\n      } else if (actionArgs.requestType === 'delete') {\n        tbody.appendChild(newRow);\n      }\n    }\n\n    eventArgs.cancel = true;\n  };\n  /**\n   * To destroy the infiniteScroll module\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return InfiniteScroll;\n}();\n\nexport { InfiniteScroll };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/infinite-scroll.js"],"names":["Grid","InfiniteScroll","GridInfiniteScroll","RowRenderer","resetRowIndex","getValue","isNullOrUndefined","remove","events","DataManager","Predicate","Query","findChildrenRecords","parent","Inject","addEventListener","prototype","getModuleName","on","pagingActions","infinitePageAction","infiniteRemoteExpand","grid","infiniteDeleteHandler","infiniteEditHandler","createRows","contentready","removeEventListener","isDestroyed","off","args","rowObjects","getRowsObject","locator","generateRows","serviceLocator","infiniteScrollModule","rowRenderer","rows","getRows","position","index","length","cols","getColumns","childRowObjects","childData","childRowElements","i","push","render","splice","apply","concat","infiniteScrollSettings","enableCache","editModule","updateIndex","dataSource","getCurrentViewRecords","getFrozenColumns","getMovableDataRows","pageingDetails","dm","result","expanded","or","undefined","visualData","executeLocal","where","actionArgs","actions","initial","some","value","requestType","initialRender","count","query","isCache","initialBlocks","maxBlocks","size","pageSettings","pageSize","current","currentPage","lastIndex","firstIndex","skip","data","take","action","page","json","notify","infiniteData","infiniteCurrentViewData","keys","Object","e","editSettings","newRowPosition","level","rowElms","Array","keyField","getPrimaryKeyFieldNames","removeRows","mRows","getMovableRowsObject","mRowElms","getMovableRows","isFrozen","_this","resetInfiniteCurrentViewData","_loop_1","filter","Math","ceil","eventArgs","row","tbody","currentData","currentRows","isMovable","getDataRows","isFrozenRight","element","querySelector","isFrozenGrid","getContent","getMovableVirtualContent","getFrozenVirtualContent","frozenRows","isFrozenRows","getHeaderContent","getMovableVirtualHeader","getFrozenVirtualHeader","addRowIndex","newRowIndex","newRow","appendChild","insertBefore","firstElementChild","cancel","destroy"],"mappings":"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","sourcesContent":["import { Grid, InfiniteScroll as GridInfiniteScroll } from '@syncfusion/ej2-grids';\nimport { RowRenderer, resetRowIndex } from '@syncfusion/ej2-grids';\nimport { getValue, isNullOrUndefined, remove } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { DataManager, Predicate, Query } from '@syncfusion/ej2-data';\nimport { findChildrenRecords } from '../utils';\n/**\n * TreeGrid Infinite Scroll module will handle Infinite Scrolling.\n *\n * @hidden\n */\nvar InfiniteScroll = /** @class */ (function () {\n    /**\n     * Constructor for VirtualScroll module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function InfiniteScroll(parent) {\n        this.parent = parent;\n        Grid.Inject(GridInfiniteScroll);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} - Returns Logger module name\n     */\n    InfiniteScroll.prototype.getModuleName = function () {\n        return 'infiniteScroll';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.addEventListener = function () {\n        this.parent.on(events.pagingActions, this.infinitePageAction, this);\n        this.parent.on('infinite-remote-expand', this.infiniteRemoteExpand, this);\n        this.parent.grid.on('delete-complete', this.infiniteDeleteHandler, this);\n        this.parent.grid.on('infinite-edit-handler', this.infiniteEditHandler, this);\n        this.parent.grid.on('infinite-crud-cancel', this.createRows, this);\n        this.parent.grid.on('content-ready', this.contentready, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('infinite-remote-expand', this.infiniteRemoteExpand);\n        this.parent.grid.off('delete-complete', this.infiniteDeleteHandler);\n        this.parent.grid.off('infinite-edit-handler', this.infiniteEditHandler);\n        this.parent.off(events.pagingActions, this.infinitePageAction);\n        this.parent.grid.off('infinite-crud-cancel', this.createRows);\n        this.parent.grid.off('content-ready', this.contentready);\n    };\n    /**\n     * Handles the Expand Collapse action for Remote data with infinite scrolling.\n     *\n     * @param {{ index: number, childData: ITreeData[] }} args - expanded row index and its child data\n     * @param { number } args.index - expanded row index\n     * @param { ITreeData[] } args.childData - child data of expanded row\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.infiniteRemoteExpand = function (args) {\n        var rowObjects = this.parent.grid.getRowsObject();\n        var locator = 'serviceLocator';\n        var generateRows = 'generateRows';\n        var serviceLocator = this.parent.grid.infiniteScrollModule[locator];\n        var rowRenderer = new RowRenderer(serviceLocator, null, this.parent.grid);\n        var rows = this.parent.getRows();\n        var position = args.index === rows.length - 1 ? 'after' : 'before';\n        var cols = this.parent.grid.getColumns();\n        var childRowObjects = this.parent.grid.infiniteScrollModule[generateRows](args.childData, args);\n        var childRowElements = [];\n        for (var i = 0; i < childRowObjects.length; i++) {\n            childRowElements.push(rowRenderer.render(childRowObjects[i], cols));\n        }\n        rowObjects.splice.apply(rowObjects, [args.index + 1, 0].concat(childRowObjects));\n        for (var i = 0; i < childRowElements.length; i++) {\n            if (position === 'after') {\n                rows[args.index + i][position](childRowElements[i]);\n            }\n            else {\n                rows[args.index + i + 1][position](childRowElements[i]);\n            }\n            rows.splice(args.index + 1 + i, 0, childRowElements[i]);\n        }\n        resetRowIndex(this.parent.grid, this.parent.grid.getRowsObject(), this.parent.grid.getRows(), 0);\n    };\n    /**\n     * Resetted the row index for expand collapse action for cache support.\n     *\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.contentready = function () {\n        if (this.parent.infiniteScrollSettings.enableCache && !isNullOrUndefined(this.parent.editModule)) {\n            var updateIndex = 'updateIndex';\n            this.parent.editModule[updateIndex](this.parent.grid.dataSource, this.parent.getRows(), this.parent.getCurrentViewRecords());\n            if (this.parent.getFrozenColumns()) {\n                this.parent.editModule[updateIndex](this.parent.grid.dataSource, this.parent.getMovableDataRows(), this.parent.getCurrentViewRecords());\n            }\n        }\n    };\n    /**\n     * Handles the page query for Data operations and CRUD actions.\n     *\n     * @param {{ result: ITreeData[], count: number, actionArgs: object }} pageingDetails - data, its count and action details\n     * @param {ITreeData[]} pageingDetails.result - data on scroll action\n     * @param {number} pageingDetails.count - data count on scroll action\n     * @param {Object} pageingDetails.actionArgs - scroll action details\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.infinitePageAction = function (pageingDetails) {\n        var dm = new DataManager(pageingDetails.result);\n        var expanded = new Predicate('expanded', 'notequal', null).or('expanded', 'notequal', undefined);\n        var visualData = dm.executeLocal(new Query().where(expanded));\n        var actionArgs = getValue('actionArgs', pageingDetails.actionArgs);\n        var actions = getValue('actions', this.parent.grid.infiniteScrollModule);\n        var initial = actions.some(function (value) { return value === actionArgs.requestType; });\n        var initialRender = initial ? true : this.parent.initialRender ? true : false;\n        this.visualData = visualData;\n        pageingDetails.count = visualData.length;\n        if (getValue('isPrinting', pageingDetails.actionArgs)) {\n            pageingDetails.result = visualData;\n        }\n        else {\n            var query = new Query();\n            var isCache = this.parent.infiniteScrollSettings.enableCache;\n            if (isCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n                this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n            }\n            var size = initialRender ?\n                this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks :\n                this.parent.pageSettings.pageSize;\n            var current = this.parent.grid.pageSettings.currentPage;\n            if (!isNullOrUndefined(actionArgs)) {\n                var lastIndex = getValue('lastIndex', this.parent.grid.infiniteScrollModule);\n                var firstIndex = getValue('firstIndex', this.parent.grid.infiniteScrollModule);\n                if (!isCache && actionArgs.requestType === 'delete') {\n                    var skip = lastIndex - actionArgs.data.length + 1;\n                    var take = actionArgs.data.length;\n                    query = query.skip(skip).take(take);\n                }\n                else if (isCache && actionArgs.requestType === 'delete' ||\n                    (actionArgs.requestType === 'save' && actionArgs.action === 'add')) {\n                    query = query.skip(firstIndex);\n                    query = query.take(this.parent.infiniteScrollSettings.initialBlocks * this.parent.pageSettings.pageSize);\n                }\n                else {\n                    query = query.page(current, size);\n                }\n            }\n            else {\n                query = query.page(current, size);\n            }\n            dm.dataSource.json = visualData;\n            if (!isCache && !isNullOrUndefined(actionArgs) && actionArgs.requestType === 'save' && actionArgs.action === 'add') {\n                pageingDetails.result = [actionArgs.data];\n            }\n            else {\n                pageingDetails.result = dm.executeLocal(query);\n            }\n        }\n        this.parent.notify('updateAction', pageingDetails);\n    };\n    /**\n     * Handles the currentviewdata for delete operation.\n     *\n     * @param {{ e: InfiniteScrollArgs, result: Object[] }} args - Scroller and data details\n     * @param {InfiniteScrollArgs} args.e -  scroller details while CRUD\n     * @param {Object[]} args.result - data details while CRUD\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n        var infiniteData = 'infiniteCurrentViewData';\n        var infiniteCurrentViewData = this.parent.grid.infiniteScrollModule[infiniteData];\n        var keys = Object.keys(infiniteCurrentViewData);\n        if (args.e.requestType === 'delete' && args.result.length > 1) {\n            for (var i = 1; i < args.result.length; i++) {\n                infiniteCurrentViewData[keys[keys.length - 1]].push(args.result[i]);\n            }\n        }\n        if (args.e.requestType === 'save' && getValue('action', args.e) === 'add'\n            && this.parent.editSettings.newRowPosition === 'Child') {\n            args.result[0].level += 1;\n        }\n    };\n    /**\n     * Handles the row objects for delete operation.\n     *\n     * @param {ActionEventArgs} args - crud action details\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.infiniteDeleteHandler = function (args) {\n        if (args.requestType === 'delete') {\n            var rows = this.parent.grid.getRowsObject();\n            var rowElms = this.parent.getRows();\n            var data = args.data instanceof Array ? args.data : [args.data];\n            var keyField = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            this.removeRows(rowElms, rows, data, keyField, true);\n            if (this.parent.getFrozenColumns() > 0) {\n                var mRows = this.parent.grid.getMovableRowsObject();\n                var mRowElms = this.parent.grid.getMovableRows();\n                this.removeRows(mRowElms, mRows, data, keyField);\n            }\n        }\n    };\n    /**\n     * Handles the row objects for delete operation.\n     *\n     * @param {Element[]} rowElms - row elements\n     * @param {Row<Column>[]} rows - Row object collection\n     * @param {Object[]} data - data collection\n     * @param {string} keyField - primary key name\n     * @param { boolean} isFrozen - Specifies whether frozen column enabled\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.removeRows = function (rowElms, rows, data, keyField, isFrozen) {\n        var _this = this;\n        var resetInfiniteCurrentViewData = 'resetInfiniteCurrentViewData';\n        var _loop_1 = function (i) {\n            rows.filter(function (e, index) {\n                if (e.data[keyField] === data[i][keyField]) {\n                    if (isFrozen) {\n                        var page = Math.ceil((index + 1) / _this.parent.grid.pageSettings.pageSize);\n                        _this.parent.grid.infiniteScrollModule[resetInfiniteCurrentViewData](page, index);\n                    }\n                    rows.splice(index, 1);\n                    remove(rowElms[index]);\n                    rowElms.splice(index, 1);\n                }\n            });\n        };\n        for (var i = 0; i < data.length; i++) {\n            _loop_1(i);\n        }\n    };\n    /**\n     * Handles the row objects for Add operation.\n     */\n    InfiniteScroll.prototype.createRows = function (eventArgs) {\n        var locator = 'serviceLocator';\n        var actionArgs = eventArgs.args.e;\n        var row = eventArgs.row;\n        var serviceLocator = this.parent.grid.infiniteScrollModule[locator];\n        var rowRenderer = new RowRenderer(serviceLocator, null, this.parent.grid);\n        var tbody;\n        var currentData = this.parent.getCurrentViewRecords();\n        var currentRows = eventArgs.isMovable ? this.parent.grid.getMovableRows()\n            : this.parent.grid.getDataRows();\n        if (eventArgs.isFrozenRight) {\n            tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector('tbody');\n        }\n        else {\n            tbody = !this.parent.grid.isFrozenGrid() ? this.parent.getContent().querySelector('tbody') : eventArgs.isMovable\n                ? this.parent.grid.getMovableVirtualContent().querySelector('tbody')\n                : this.parent.grid.getFrozenVirtualContent().querySelector('tbody');\n        }\n        if (this.parent.frozenRows) {\n            tbody = eventArgs.isFrozenRows && this.parent.grid.infiniteScrollModule.requestType !== 'add'\n                || !eventArgs.isFrozenRows && this.parent.grid.infiniteScrollModule.requestType === 'add'\n                ? !this.parent.grid.isFrozenGrid() ? this.parent.getHeaderContent().querySelector('tbody')\n                    : eventArgs.isMovable ? this.parent.grid.getMovableVirtualHeader().querySelector('tbody')\n                        : eventArgs.isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector('tbody')\n                            : this.parent.grid.getFrozenVirtualHeader().querySelector('tbody') : tbody;\n        }\n        var position;\n        var addRowIndex = 'addRowIndex';\n        var newRowIndex = this.parent.editModule[addRowIndex];\n        for (var i = 0; i < row.length; i++) {\n            var newRow = rowRenderer.render(row[i], this.parent.grid.getColumns());\n            if (actionArgs.requestType === 'save' && actionArgs.action === 'add') {\n                if (getValue('selectedIndex', this.parent.editModule) !== -1 && this.parent.editSettings.newRowPosition !== 'Top') {\n                    if (this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child') {\n                        position = 'after';\n                        newRowIndex += findChildrenRecords(currentData[newRowIndex + 1]).length;\n                        if (this.parent.editSettings.newRowPosition === 'Child') {\n                            newRowIndex -= 1; //// for child position already child record is added in childRecords so subtracting 1\n                        }\n                        currentRows[newRowIndex][position](newRow);\n                    }\n                    else if (this.parent.editSettings.newRowPosition === 'Above') {\n                        position = 'before';\n                        currentRows[this.parent.editModule[addRowIndex]][position](newRow);\n                    }\n                }\n                else if (this.parent.editSettings.newRowPosition === 'Bottom') {\n                    tbody.appendChild(newRow);\n                }\n                else {\n                    tbody.insertBefore(newRow, tbody.firstElementChild);\n                }\n            }\n            else if (actionArgs.requestType === 'delete') {\n                tbody.appendChild(newRow);\n            }\n        }\n        eventArgs.cancel = true;\n    };\n    /**\n     * To destroy the infiniteScroll module\n     *\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return InfiniteScroll;\n}());\nexport { InfiniteScroll };\n"]},"metadata":{},"sourceType":"module"}