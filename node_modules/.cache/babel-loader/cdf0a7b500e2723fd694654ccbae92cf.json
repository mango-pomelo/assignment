{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Sort as GridSort, Grid, getActualProperties } from '@syncfusion/ej2-grids';\nimport { getParentData } from '../utils';\n/**\n * Internal dataoperations for TreeGrid\n *\n * @hidden\n */\n\nvar Sort =\n/** @class */\nfunction () {\n  function Sort(grid) {\n    Grid.Inject(GridSort);\n    this.parent = grid;\n    this.taskIds = [];\n    this.flatSortedData = [];\n    this.storedIndex = -1;\n    this.isSelfReference = !isNullOrUndefined(this.parent.parentIdMapping);\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns Sort module name\n   */\n\n\n  Sort.prototype.getModuleName = function () {\n    return 'sort';\n  };\n  /**\n   * @hidden\n   */\n\n\n  Sort.prototype.addEventListener = function () {\n    this.parent.on('updateModel', this.updateModel, this);\n    this.parent.on('createSort', this.createdSortedRecords, this);\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  Sort.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('updateModel', this.updateModel);\n    this.parent.off('createSort', this.createdSortedRecords);\n  };\n\n  Sort.prototype.createdSortedRecords = function (sortParams) {\n    var data = sortParams.modifiedData;\n    var srtQry = sortParams.srtQry;\n    this.iterateSort(data, srtQry);\n    this.storedIndex = -1;\n    sortParams.modifiedData = this.flatSortedData;\n    this.flatSortedData = [];\n  };\n\n  Sort.prototype.iterateSort = function (data, srtQry) {\n    for (var d = 0; d < data.length; d++) {\n      if (this.parent.grid.filterSettings.columns.length > 0 || this.parent.grid.searchSettings.key !== '') {\n        if (!isNullOrUndefined(getParentData(this.parent, data[d].uniqueID, true))) {\n          this.storedIndex++;\n          this.flatSortedData[this.storedIndex] = data[d];\n        }\n      } else {\n        this.storedIndex++;\n        this.flatSortedData[this.storedIndex] = data[d];\n      }\n\n      if (data[d].hasChildRecords) {\n        var childSort = new DataManager(data[d].childRecords).executeLocal(srtQry);\n        this.iterateSort(childSort, srtQry);\n      }\n    }\n  };\n  /**\n   * Sorts a column with the given options.\n   *\n   * @param {string} columnName - Defines the column name to be sorted.\n   * @param {SortDirection} direction - Defines the direction of sorting field.\n   * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n   * @returns {void}\n   */\n\n\n  Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n    this.parent.grid.sortColumn(columnName, direction, isMultiSort);\n  };\n\n  Sort.prototype.removeSortColumn = function (field) {\n    this.parent.grid.removeSortColumn(field);\n  };\n  /**\n   * The function used to update sortSettings of TreeGrid.\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Sort.prototype.updateModel = function () {\n    this.parent.setProperties({\n      sortSettings: getActualProperties(this.parent.grid.sortSettings)\n    }, true);\n  };\n  /**\n   * Clears all the sorted columns of the TreeGrid.\n   *\n   * @returns {void}\n   */\n\n\n  Sort.prototype.clearSorting = function () {\n    this.parent.grid.clearSorting();\n    this.updateModel();\n  };\n  /**\n   * Destroys the Sorting of TreeGrid.\n   *\n   * @function destroy\n   * @returns {void}\n   */\n\n\n  Sort.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return Sort;\n}();\n\nexport { Sort };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/sort.js"],"names":["isNullOrUndefined","DataManager","Sort","GridSort","Grid","getActualProperties","getParentData","grid","Inject","parent","taskIds","flatSortedData","storedIndex","isSelfReference","parentIdMapping","addEventListener","prototype","getModuleName","on","updateModel","createdSortedRecords","removeEventListener","isDestroyed","off","sortParams","data","modifiedData","srtQry","iterateSort","d","length","filterSettings","columns","searchSettings","key","uniqueID","hasChildRecords","childSort","childRecords","executeLocal","sortColumn","columnName","direction","isMultiSort","removeSortColumn","field","setProperties","sortSettings","clearSorting","destroy"],"mappings":"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","sourcesContent":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Sort as GridSort, Grid, getActualProperties } from '@syncfusion/ej2-grids';\nimport { getParentData } from '../utils';\n/**\n * Internal dataoperations for TreeGrid\n *\n * @hidden\n */\nvar Sort = /** @class */ (function () {\n    function Sort(grid) {\n        Grid.Inject(GridSort);\n        this.parent = grid;\n        this.taskIds = [];\n        this.flatSortedData = [];\n        this.storedIndex = -1;\n        this.isSelfReference = !isNullOrUndefined(this.parent.parentIdMapping);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Sort module name\n     */\n    Sort.prototype.getModuleName = function () {\n        return 'sort';\n    };\n    /**\n     * @hidden\n     */\n    Sort.prototype.addEventListener = function () {\n        this.parent.on('updateModel', this.updateModel, this);\n        this.parent.on('createSort', this.createdSortedRecords, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Sort.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updateModel', this.updateModel);\n        this.parent.off('createSort', this.createdSortedRecords);\n    };\n    Sort.prototype.createdSortedRecords = function (sortParams) {\n        var data = sortParams.modifiedData;\n        var srtQry = sortParams.srtQry;\n        this.iterateSort(data, srtQry);\n        this.storedIndex = -1;\n        sortParams.modifiedData = this.flatSortedData;\n        this.flatSortedData = [];\n    };\n    Sort.prototype.iterateSort = function (data, srtQry) {\n        for (var d = 0; d < data.length; d++) {\n            if (this.parent.grid.filterSettings.columns.length > 0 || this.parent.grid.searchSettings.key !== '') {\n                if (!isNullOrUndefined(getParentData(this.parent, data[d].uniqueID, true))) {\n                    this.storedIndex++;\n                    this.flatSortedData[this.storedIndex] = data[d];\n                }\n            }\n            else {\n                this.storedIndex++;\n                this.flatSortedData[this.storedIndex] = data[d];\n            }\n            if (data[d].hasChildRecords) {\n                var childSort = (new DataManager(data[d].childRecords).executeLocal(srtQry));\n                this.iterateSort(childSort, srtQry);\n            }\n        }\n    };\n    /**\n     * Sorts a column with the given options.\n     *\n     * @param {string} columnName - Defines the column name to be sorted.\n     * @param {SortDirection} direction - Defines the direction of sorting field.\n     * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n     * @returns {void}\n     */\n    Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n        this.parent.grid.sortColumn(columnName, direction, isMultiSort);\n    };\n    Sort.prototype.removeSortColumn = function (field) {\n        this.parent.grid.removeSortColumn(field);\n    };\n    /**\n     * The function used to update sortSettings of TreeGrid.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Sort.prototype.updateModel = function () {\n        this.parent.setProperties({ sortSettings: getActualProperties(this.parent.grid.sortSettings) }, true);\n    };\n    /**\n     * Clears all the sorted columns of the TreeGrid.\n     *\n     * @returns {void}\n     */\n    Sort.prototype.clearSorting = function () {\n        this.parent.grid.clearSorting();\n        this.updateModel();\n    };\n    /**\n     * Destroys the Sorting of TreeGrid.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    Sort.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Sort;\n}());\nexport { Sort };\n"]},"metadata":{},"sourceType":"module"}