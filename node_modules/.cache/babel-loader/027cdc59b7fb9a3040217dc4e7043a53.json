{"ast":null,"code":"import { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getObject, calculateAggregate, Aggregate as GridAggregate, Grid, appendChildren } from '@syncfusion/ej2-grids';\nimport { findParentRecords } from '../utils';\nimport { isNullOrUndefined, setValue, createElement, extend } from '@syncfusion/ej2-base';\n/**\n * TreeGrid Aggregate module\n *\n * @hidden\n */\n\nvar Aggregate =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Aggregate module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function Aggregate(parent) {\n    Grid.Inject(GridAggregate);\n    this.parent = parent;\n    this.flatChildRecords = [];\n    this.summaryQuery = [];\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns Summary module name\n   */\n\n\n  Aggregate.prototype.getModuleName = function () {\n    return 'summary';\n  };\n\n  Aggregate.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n  };\n  /**\n   * Function to calculate summary values\n   *\n   * @param {QueryOptions[]} summaryQuery - DataManager query for aggregate operations\n   * @param {Object[]} filteredData - Filtered data collection\n   * @param {boolean} isSort - Specified whether sorting operation performed\n   * @hidden\n   * @returns {Object[]} -  return flat records with summary values\n   */\n\n\n  Aggregate.prototype.calculateSummaryValue = function (summaryQuery, filteredData, isSort) {\n    this.summaryQuery = summaryQuery;\n    var parentRecord;\n    var parentDataLength = Object.keys(filteredData).length;\n    var parentData = [];\n\n    for (var p = 0, len = parentDataLength; p < len; p++) {\n      var summaryRow = getObject('isSummaryRow', filteredData[p]);\n\n      if (!summaryRow) {\n        parentData.push(filteredData[p]);\n      }\n    }\n\n    var parentRecords = findParentRecords(parentData);\n    var flatRecords = parentData.slice();\n    var summaryLength = Object.keys(this.parent.aggregates).length;\n    var dataLength = Object.keys(parentRecords).length;\n    var childRecordsLength;\n    var columns = this.parent.getColumns();\n\n    if (this.parent.aggregates.filter(function (x) {\n      return x.showChildSummary;\n    }).length) {\n      for (var i = 0, len = dataLength; i < len; i++) {\n        parentRecord = parentRecords[i];\n        childRecordsLength = this.getChildRecordsLength(parentRecord, flatRecords);\n\n        if (childRecordsLength) {\n          var _loop_1 = function (summaryRowIndex, len_1) {\n            var item = void 0;\n            item = {};\n\n            for (var i_1 = 0; i_1 < columns.length; i_1++) {\n              var field = isNullOrUndefined(getObject('field', columns[i_1])) ? columns[i_1] : getObject('field', columns[i_1]);\n              item[field] = null;\n            }\n\n            item = this_1.createSummaryItem(item, this_1.parent.aggregates[summaryRowIndex - 1]);\n\n            if (this_1.parent.aggregates[summaryRowIndex - 1].showChildSummary) {\n              var idx_1;\n              flatRecords.map(function (e, i) {\n                if (e.uniqueID === parentRecord.uniqueID) {\n                  idx_1 = i;\n                  return;\n                }\n              });\n              var currentIndex = idx_1 + childRecordsLength + summaryRowIndex;\n              var summaryParent = extend({}, parentRecord);\n              delete summaryParent.childRecords;\n              delete summaryParent[this_1.parent.childMapping];\n              setValue('parentItem', summaryParent, item);\n              var level = getObject('level', summaryParent);\n              setValue('level', level + 1, item);\n              setValue('isSummaryRow', true, item);\n              setValue('parentUniqueID', summaryParent.uniqueID, item);\n\n              if (isSort) {\n                var childRecords = getObject('childRecords', parentRecord);\n\n                if (childRecords.length) {\n                  childRecords.push(item);\n                }\n              }\n\n              flatRecords.splice(currentIndex, 0, item);\n            } else {\n              return \"continue\";\n            }\n          };\n\n          var this_1 = this;\n\n          for (var summaryRowIndex = 1, len_1 = summaryLength; summaryRowIndex <= len_1; summaryRowIndex++) {\n            _loop_1(summaryRowIndex, len_1);\n          }\n\n          this.flatChildRecords = [];\n        }\n      }\n    } else {\n      var items = {};\n\n      for (var columnIndex = 0, length_1 = columns.length; columnIndex < length_1; columnIndex++) {\n        var fields = isNullOrUndefined(getObject('field', columns[columnIndex])) ? columns[columnIndex] : getObject('field', columns[columnIndex]);\n        items[fields] = null;\n      }\n\n      for (var summaryRowIndex = 1, length_2 = summaryLength; summaryRowIndex <= length_2; summaryRowIndex++) {\n        this.createSummaryItem(items, this.parent.aggregates[summaryRowIndex - 1]);\n      }\n    }\n\n    return flatRecords;\n  };\n\n  Aggregate.prototype.getChildRecordsLength = function (parentData, flatData) {\n    var recordLength = Object.keys(flatData).length;\n    var record;\n\n    for (var i = 0, len = recordLength; i < len; i++) {\n      record = flatData[i];\n      var parent_1 = isNullOrUndefined(record.parentItem) ? null : flatData.filter(function (e) {\n        return e.uniqueID === record.parentItem.uniqueID;\n      })[0];\n\n      if (parentData === parent_1) {\n        this.flatChildRecords.push(record);\n        var hasChild = getObject('hasChildRecords', record);\n\n        if (hasChild) {\n          this.getChildRecordsLength(record, flatData);\n        } else {\n          continue;\n        }\n      }\n    }\n\n    return this.flatChildRecords.length;\n  };\n\n  Aggregate.prototype.createSummaryItem = function (itemData, summary) {\n    var summaryColumnLength = Object.keys(summary.columns).length;\n\n    for (var i = 0, len = summaryColumnLength; i < len; i++) {\n      var displayColumn = isNullOrUndefined(summary.columns[i].columnName) ? summary.columns[i].field : summary.columns[i].columnName;\n      var keys = Object.keys(itemData);\n\n      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n\n        if (key === displayColumn) {\n          if (this.flatChildRecords.length) {\n            itemData[key] = this.getSummaryValues(summary.columns[i], this.flatChildRecords);\n          } else if (this.parent.isLocalData) {\n            var data = this.parent.dataSource instanceof DataManager ? this.parent.dataSource.dataSource.json : this.parent.flatData;\n            itemData[key] = this.getSummaryValues(summary.columns[i], data);\n          }\n        } else {\n          continue;\n        }\n      }\n    }\n\n    return itemData;\n  };\n\n  Aggregate.prototype.getSummaryValues = function (summaryColumn, summaryData) {\n    var qry = new Query();\n    var single = {};\n    var helper = {};\n    var type = !isNullOrUndefined(summaryColumn.field) ? this.parent.getColumnByField(summaryColumn.field).type : undefined;\n    summaryColumn.setPropertiesSilent({\n      format: this.getFormatFromType(summaryColumn.format, type)\n    });\n    summaryColumn.setFormatter(this.parent.grid.locale);\n\n    var formatFn = summaryColumn.getFormatter() || function () {\n      return function (a) {\n        return a;\n      };\n    }();\n\n    summaryColumn.setTemplate(helper);\n    var tempObj = summaryColumn.getTemplate(2);\n    qry.queries = this.summaryQuery;\n    qry.requiresCount();\n    var sumData = new DataManager(summaryData).executeLocal(qry);\n    var types = summaryColumn.type;\n    var summaryKey;\n    types = [summaryColumn.type];\n\n    for (var i = 0; i < types.length; i++) {\n      summaryKey = types[i];\n      var key = summaryColumn.field + ' - ' + types[i].toLowerCase();\n      var val = types[i] !== 'Custom' ? getObject('aggregates', sumData) : calculateAggregate(types[i], sumData, summaryColumn, this.parent);\n      var disp = summaryColumn.columnName;\n      var value_1 = types[i] !== 'Custom' ? val[key] : val;\n      single[disp] = single[disp] || {};\n      single[disp][key] = value_1;\n      single[disp][types[i]] = !isNullOrUndefined(val) ? formatFn(value_1) : ' ';\n    }\n\n    helper.format = summaryColumn.getFormatter();\n    var cellElement = createElement('td', {\n      className: 'e-summary'\n    });\n\n    if (this.parent.isReact) {\n      var renderReactTemplates = 'renderReactTemplates';\n      tempObj.fn(single[summaryColumn.columnName], this.parent, tempObj.property, '', null, null, cellElement);\n      this.parent[renderReactTemplates]();\n    } else {\n      appendChildren(cellElement, tempObj.fn(single[summaryColumn.columnName], this.parent, tempObj.property));\n    }\n\n    var value = single[summaryColumn.columnName][summaryKey];\n    var summaryValue;\n\n    if (cellElement.innerHTML.indexOf(value) === -1) {\n      summaryValue = cellElement.innerHTML + value;\n      return summaryValue;\n    } else {\n      return cellElement.innerHTML;\n    }\n  };\n\n  Aggregate.prototype.getFormatFromType = function (summaryformat, type) {\n    if (isNullOrUndefined(type) || typeof summaryformat !== 'string') {\n      return summaryformat;\n    }\n\n    var obj;\n\n    switch (type) {\n      case 'number':\n        obj = {\n          format: summaryformat\n        };\n        break;\n\n      case 'datetime':\n        obj = {\n          type: 'dateTime',\n          skeleton: summaryformat\n        };\n        break;\n\n      case 'date':\n        obj = {\n          type: type,\n          skeleton: summaryformat\n        };\n        break;\n    }\n\n    return obj;\n  };\n  /**\n   * To destroy the Aggregate module\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Aggregate.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return Aggregate;\n}();\n\nexport { Aggregate };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/summary.js"],"names":["Query","DataManager","getObject","calculateAggregate","Aggregate","GridAggregate","Grid","appendChildren","findParentRecords","isNullOrUndefined","setValue","createElement","extend","parent","Inject","flatChildRecords","summaryQuery","prototype","getModuleName","removeEventListener","isDestroyed","calculateSummaryValue","filteredData","isSort","parentRecord","parentDataLength","Object","keys","length","parentData","p","len","summaryRow","push","parentRecords","flatRecords","slice","summaryLength","aggregates","dataLength","childRecordsLength","columns","getColumns","filter","x","showChildSummary","i","getChildRecordsLength","_loop_1","summaryRowIndex","len_1","item","i_1","field","this_1","createSummaryItem","idx_1","map","e","uniqueID","currentIndex","summaryParent","childRecords","childMapping","level","splice","items","columnIndex","length_1","fields","length_2","flatData","recordLength","record","parent_1","parentItem","hasChild","itemData","summary","summaryColumnLength","displayColumn","columnName","_i","keys_1","key","getSummaryValues","isLocalData","data","dataSource","json","summaryColumn","summaryData","qry","single","helper","type","getColumnByField","undefined","setPropertiesSilent","format","getFormatFromType","setFormatter","grid","locale","formatFn","getFormatter","a","setTemplate","tempObj","getTemplate","queries","requiresCount","sumData","executeLocal","types","summaryKey","toLowerCase","val","disp","value_1","cellElement","className","isReact","renderReactTemplates","fn","property","value","summaryValue","innerHTML","indexOf","summaryformat","obj","skeleton","destroy"],"mappings":"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","sourcesContent":["import { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getObject, calculateAggregate, Aggregate as GridAggregate, Grid, appendChildren } from '@syncfusion/ej2-grids';\nimport { findParentRecords } from '../utils';\nimport { isNullOrUndefined, setValue, createElement, extend } from '@syncfusion/ej2-base';\n/**\n * TreeGrid Aggregate module\n *\n * @hidden\n */\nvar Aggregate = /** @class */ (function () {\n    /**\n     * Constructor for Aggregate module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Aggregate(parent) {\n        Grid.Inject(GridAggregate);\n        this.parent = parent;\n        this.flatChildRecords = [];\n        this.summaryQuery = [];\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Summary module name\n     */\n    Aggregate.prototype.getModuleName = function () {\n        return 'summary';\n    };\n    Aggregate.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n    };\n    /**\n     * Function to calculate summary values\n     *\n     * @param {QueryOptions[]} summaryQuery - DataManager query for aggregate operations\n     * @param {Object[]} filteredData - Filtered data collection\n     * @param {boolean} isSort - Specified whether sorting operation performed\n     * @hidden\n     * @returns {Object[]} -  return flat records with summary values\n     */\n    Aggregate.prototype.calculateSummaryValue = function (summaryQuery, filteredData, isSort) {\n        this.summaryQuery = summaryQuery;\n        var parentRecord;\n        var parentDataLength = Object.keys(filteredData).length;\n        var parentData = [];\n        for (var p = 0, len = parentDataLength; p < len; p++) {\n            var summaryRow = getObject('isSummaryRow', filteredData[p]);\n            if (!summaryRow) {\n                parentData.push(filteredData[p]);\n            }\n        }\n        var parentRecords = findParentRecords(parentData);\n        var flatRecords = parentData.slice();\n        var summaryLength = Object.keys(this.parent.aggregates).length;\n        var dataLength = Object.keys(parentRecords).length;\n        var childRecordsLength;\n        var columns = this.parent.getColumns();\n        if (this.parent.aggregates.filter(function (x) { return x.showChildSummary; }).length) {\n            for (var i = 0, len = dataLength; i < len; i++) {\n                parentRecord = parentRecords[i];\n                childRecordsLength = this.getChildRecordsLength(parentRecord, flatRecords);\n                if (childRecordsLength) {\n                    var _loop_1 = function (summaryRowIndex, len_1) {\n                        var item = void 0;\n                        item = {};\n                        for (var i_1 = 0; i_1 < columns.length; i_1++) {\n                            var field = (isNullOrUndefined(getObject('field', columns[i_1]))) ?\n                                columns[i_1] : getObject('field', (columns[i_1]));\n                            item[field] = null;\n                        }\n                        item = this_1.createSummaryItem(item, this_1.parent.aggregates[summaryRowIndex - 1]);\n                        if (this_1.parent.aggregates[summaryRowIndex - 1].showChildSummary) {\n                            var idx_1;\n                            flatRecords.map(function (e, i) {\n                                if (e.uniqueID === parentRecord.uniqueID) {\n                                    idx_1 = i;\n                                    return;\n                                }\n                            });\n                            var currentIndex = idx_1 + childRecordsLength + summaryRowIndex;\n                            var summaryParent = extend({}, parentRecord);\n                            delete summaryParent.childRecords;\n                            delete summaryParent[this_1.parent.childMapping];\n                            setValue('parentItem', summaryParent, item);\n                            var level = getObject('level', summaryParent);\n                            setValue('level', level + 1, item);\n                            setValue('isSummaryRow', true, item);\n                            setValue('parentUniqueID', summaryParent.uniqueID, item);\n                            if (isSort) {\n                                var childRecords = getObject('childRecords', parentRecord);\n                                if (childRecords.length) {\n                                    childRecords.push(item);\n                                }\n                            }\n                            flatRecords.splice(currentIndex, 0, item);\n                        }\n                        else {\n                            return \"continue\";\n                        }\n                    };\n                    var this_1 = this;\n                    for (var summaryRowIndex = 1, len_1 = summaryLength; summaryRowIndex <= len_1; summaryRowIndex++) {\n                        _loop_1(summaryRowIndex, len_1);\n                    }\n                    this.flatChildRecords = [];\n                }\n            }\n        }\n        else {\n            var items = {};\n            for (var columnIndex = 0, length_1 = columns.length; columnIndex < length_1; columnIndex++) {\n                var fields = isNullOrUndefined(getObject('field', columns[columnIndex])) ?\n                    columns[columnIndex] : getObject('field', columns[columnIndex]);\n                items[fields] = null;\n            }\n            for (var summaryRowIndex = 1, length_2 = summaryLength; summaryRowIndex <= length_2; summaryRowIndex++) {\n                this.createSummaryItem(items, this.parent.aggregates[summaryRowIndex - 1]);\n            }\n        }\n        return flatRecords;\n    };\n    Aggregate.prototype.getChildRecordsLength = function (parentData, flatData) {\n        var recordLength = Object.keys(flatData).length;\n        var record;\n        for (var i = 0, len = recordLength; i < len; i++) {\n            record = flatData[i];\n            var parent_1 = isNullOrUndefined(record.parentItem) ? null :\n                flatData.filter(function (e) { return e.uniqueID === record.parentItem.uniqueID; })[0];\n            if (parentData === parent_1) {\n                this.flatChildRecords.push(record);\n                var hasChild = getObject('hasChildRecords', record);\n                if (hasChild) {\n                    this.getChildRecordsLength(record, flatData);\n                }\n                else {\n                    continue;\n                }\n            }\n        }\n        return this.flatChildRecords.length;\n    };\n    Aggregate.prototype.createSummaryItem = function (itemData, summary) {\n        var summaryColumnLength = Object.keys(summary.columns).length;\n        for (var i = 0, len = summaryColumnLength; i < len; i++) {\n            var displayColumn = isNullOrUndefined(summary.columns[i].columnName) ? summary.columns[i].field :\n                summary.columns[i].columnName;\n            var keys = Object.keys(itemData);\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                if (key === displayColumn) {\n                    if (this.flatChildRecords.length) {\n                        itemData[key] = this.getSummaryValues(summary.columns[i], this.flatChildRecords);\n                    }\n                    else if (this.parent.isLocalData) {\n                        var data = this.parent.dataSource instanceof DataManager ? this.parent.dataSource.dataSource.json\n                            : this.parent.flatData;\n                        itemData[key] = this.getSummaryValues(summary.columns[i], data);\n                    }\n                }\n                else {\n                    continue;\n                }\n            }\n        }\n        return itemData;\n    };\n    Aggregate.prototype.getSummaryValues = function (summaryColumn, summaryData) {\n        var qry = new Query();\n        var single = {};\n        var helper = {};\n        var type = !isNullOrUndefined(summaryColumn.field) ?\n            this.parent.getColumnByField(summaryColumn.field).type : undefined;\n        summaryColumn.setPropertiesSilent({ format: this.getFormatFromType(summaryColumn.format, type) });\n        summaryColumn.setFormatter(this.parent.grid.locale);\n        var formatFn = summaryColumn.getFormatter() || (function () { return function (a) { return a; }; })();\n        summaryColumn.setTemplate(helper);\n        var tempObj = summaryColumn.getTemplate(2);\n        qry.queries = this.summaryQuery;\n        qry.requiresCount();\n        var sumData = new DataManager(summaryData).executeLocal(qry);\n        var types = summaryColumn.type;\n        var summaryKey;\n        types = [summaryColumn.type];\n        for (var i = 0; i < types.length; i++) {\n            summaryKey = types[i];\n            var key = summaryColumn.field + ' - ' + types[i].toLowerCase();\n            var val = types[i] !== 'Custom' ? getObject('aggregates', sumData) :\n                calculateAggregate(types[i], sumData, summaryColumn, this.parent);\n            var disp = summaryColumn.columnName;\n            var value_1 = types[i] !== 'Custom' ? val[key] : val;\n            single[disp] = single[disp] || {};\n            single[disp][key] = value_1;\n            single[disp][types[i]] = !isNullOrUndefined(val) ? formatFn(value_1) : ' ';\n        }\n        helper.format = summaryColumn.getFormatter();\n        var cellElement = createElement('td', {\n            className: 'e-summary'\n        });\n        if (this.parent.isReact) {\n            var renderReactTemplates = 'renderReactTemplates';\n            tempObj.fn(single[summaryColumn.columnName], this.parent, tempObj.property, '', null, null, cellElement);\n            this.parent[renderReactTemplates]();\n        }\n        else {\n            appendChildren(cellElement, tempObj.fn(single[summaryColumn.columnName], this.parent, tempObj.property));\n        }\n        var value = single[summaryColumn.columnName][summaryKey];\n        var summaryValue;\n        if (cellElement.innerHTML.indexOf(value) === -1) {\n            summaryValue = cellElement.innerHTML + value;\n            return summaryValue;\n        }\n        else {\n            return cellElement.innerHTML;\n        }\n    };\n    Aggregate.prototype.getFormatFromType = function (summaryformat, type) {\n        if (isNullOrUndefined(type) || typeof summaryformat !== 'string') {\n            return summaryformat;\n        }\n        var obj;\n        switch (type) {\n            case 'number':\n                obj = { format: summaryformat };\n                break;\n            case 'datetime':\n                obj = { type: 'dateTime', skeleton: summaryformat };\n                break;\n            case 'date':\n                obj = { type: type, skeleton: summaryformat };\n                break;\n        }\n        return obj;\n    };\n    /**\n     * To destroy the Aggregate module\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Aggregate.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Aggregate;\n}());\nexport { Aggregate };\n"]},"metadata":{},"sourceType":"module"}