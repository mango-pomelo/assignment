{"ast":null,"code":"import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns, measureColumnDepth } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\n\nvar ExcelExport =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid Excel Export module.\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @param {ServiceLocator} locator - specifies the ServiceLocator\n   * @hidden\n   */\n  function ExcelExport(parent, locator) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.isCsvExport = false;\n    this.isElementIdChanged = false;\n    this.gridPool = {};\n    this.sheet = {};\n    this.parent = parent;\n    this.helper = new ExportHelper(parent);\n    this.locator = locator;\n    this.l10n = this.locator.getService('localization');\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} returns the module name\n   */\n\n\n  ExcelExport.prototype.getModuleName = function () {\n    return 'ExcelExport';\n  };\n\n  ExcelExport.prototype.init = function (gObj) {\n    if (gObj.element !== null && gObj.element.id === '') {\n      gObj.element.id = new Date().toISOString();\n      this.isElementIdChanged = true;\n    }\n\n    this.parent = gObj;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.isExporting = undefined;\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.footer = undefined;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n    gObj.id = getUid('main-grid');\n    this.gridPool[gObj.id] = false;\n  };\n  /**\n   * Export Grid to Excel file.\n   *\n   * @param {IGrid} grid - Defines the grid.\n   * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n   * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n   * @param  {Workbook} workbook - Defined the Workbook if multiple Grid is exported.\n   * @param  {boolean} isCsv - true if export to CSV.\n   * @param {boolean} isBlob - true if isBlob is enabled.\n   * @returns {Promise<any>} - Returns the map for export.\n   */\n  // eslint-disable-next-line\n\n\n  ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n    var gObj = grid;\n    var cancel = 'cancel';\n    var isBlb = 'isBlob';\n    var csv = 'isCsv';\n    var workbk = 'workbook';\n    var isMultiEx = 'isMultipleExport';\n    this.gridPool = {};\n\n    if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n      grid.expandedRows = getPrintGridModel(grid).expandedRows;\n    }\n\n    var args = {\n      requestType: 'beforeExcelExport',\n      gridObject: gObj,\n      cancel: false,\n      isMultipleExport: isMultipleExport,\n      workbook: workbook,\n      isCsv: isCsv,\n      isBlob: isBlob\n    };\n    gObj.trigger(events.beforeExcelExport, args);\n\n    if (args[cancel]) {\n      return new Promise(function (resolve) {\n        return resolve();\n      });\n    }\n\n    this.parent.log('exporting_begin', this.getModuleName());\n    this.data = new Data(gObj);\n    this.isExporting = true;\n    this.isBlob = args[isBlb];\n\n    if (args[csv]) {\n      this.isCsvExport = args[csv];\n    } else {\n      this.isCsvExport = false;\n    }\n\n    if (isExportColumns(exportProperties)) {\n      updateColumnTypeForExportColumns(exportProperties, gObj);\n    }\n\n    return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n  };\n\n  ExcelExport.prototype.exportingSuccess = function (resolve) {\n    this.isExporting = false;\n    this.parent.trigger(events.excelExportComplete, this.isBlob ? {\n      promise: this.blobPromise\n    } : {});\n    this.parent.log('exporting_complete', this.getModuleName());\n    resolve(this.book);\n    this.sheet.images = [];\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n    var _this = this;\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && exportProperties.dataSource instanceof DataManager) {\n      var query_1 = exportProperties.query ? exportProperties.query : new Query();\n\n      if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n        query_1.isCountRequired = true;\n      }\n\n      return new Promise(function (resolve) {\n        var dataManager = exportProperties.dataSource.executeQuery(query_1);\n        dataManager.then(function (r) {\n          _this.init(gObj);\n\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        });\n      });\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      return new Promise(function (resolve) {\n        _this.init(gObj);\n\n        _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n\n        _this.exportingSuccess(resolve);\n      });\n    } else {\n      var allPromise_1 = [];\n      allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n      allPromise_1.push(this.helper.getColumnData(gObj));\n      return new Promise(function (resolve, reject) {\n        Promise.all(allPromise_1).then(function (e) {\n          _this.init(gObj);\n\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        }).catch(function (e) {\n          reject(_this.book);\n\n          _this.parent.trigger(events.actionFailure, e);\n        });\n      });\n    }\n  };\n\n  ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isMultipleExport, workbook, r) {\n    var _this = this;\n\n    this.groupedColLength = gObj.groupSettings.columns.length;\n    var blankRows = 5;\n    var separator;\n    var rows = [];\n    var colDepth = measureColumnDepth(gObj.columns);\n    var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n\n    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n      this.expType = !isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet';\n\n      if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n        blankRows = exportProperties.multipleExport.blankRows;\n      }\n    }\n\n    if (isNullOrUndefined(workbook)) {\n      this.workSheet = [];\n      this.rows = [];\n      this.columns = [];\n      this.styles = [];\n    } else if (this.expType === 'NewSheet') {\n      this.workSheet = workbook.worksheets;\n      this.rows = [];\n      this.columns = [];\n      this.styles = workbook.styles;\n    } else {\n      this.workSheet = [];\n      this.rows = workbook.worksheets[0].rows;\n      this.columns = workbook.worksheets[0].columns;\n      this.styles = workbook.styles;\n      this.rowLength = this.rows[this.rows.length - 1].index + blankRows;\n      this.rowLength++;\n    }\n\n    if (isExportPropertiesPresent) {\n      if (!isNullOrUndefined(isMultipleExport)) {\n        if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          if (this.expType === 'AppendToSheet') {\n            if (!isMultipleExport) {\n              this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n            }\n          } else {\n            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n          }\n        }\n      } else {\n        if (!isNullOrUndefined(exportProperties.header)) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n        }\n      }\n    }\n\n    this.includeHiddenColumn = isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    return new Promise(function (resolve, reject) {\n      gObj.childGridLevel = 0;\n      rows = _this.processGridExport(gObj, exportProperties, r);\n      _this.globalResolve = resolve;\n      _this.gridPool[gObj.id] = true;\n\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n    }).then(function () {\n      var organisedRows = [];\n\n      _this.organiseRows(rows, rows[0].index, organisedRows);\n\n      _this.rows = _this.rows.concat(organisedRows); //footer template add\n\n      if (!isNullOrUndefined(_this.footer)) {\n        if (_this.expType === 'AppendToSheet' && !isMultipleExport || _this.expType === 'NewSheet') {\n          _this.processExcelFooter(_this.footer);\n        }\n      }\n\n      if (_this.columns.length > 0) {\n        _this.sheet.columns = _this.columns;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      _this.sheet.rows = _this.rows;\n      _this.sheet.enableRtl = _this.parent.enableRtl;\n\n      if (_this.parent.allowFiltering && gObj.getVisibleColumns().length && isExportPropertiesPresent && exportProperties.enableFilter) {\n        var autoFilters = {\n          row: colDepth,\n          column: _this.groupedColLength ? _this.groupedColLength + 1 : _this.sheet.columns[0].index,\n          lastRow: _this.sheet.rows.length,\n          lastColumn: _this.sheet.columns.length\n        };\n        _this.sheet.autoFilters = autoFilters;\n      }\n\n      _this.workSheet.push(_this.sheet);\n\n      _this.book.worksheets = _this.workSheet;\n      _this.book.styles = _this.styles;\n      gObj.notify('finalPageSetup', _this.book);\n\n      if (!isMultipleExport) {\n        if (_this.isCsvExport) {\n          if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator) && exportProperties.separator !== ',') {\n            separator = exportProperties.separator;\n          }\n\n          var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode, separator);\n\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.csv');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('text/csv');\n          }\n        } else {\n          var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.xlsx');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n          }\n        }\n\n        if (_this.isElementIdChanged) {\n          gObj.element.id = '';\n        }\n\n        delete gObj.expandedRows;\n      }\n\n      return workbook;\n    });\n  };\n\n  ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n    if (!rows.length) {\n      return initialIndex;\n    }\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      var childRows = row.childRows;\n\n      if (childRows) {\n        row.index = initialIndex++;\n        delete row.childRows;\n        organisedRows.push(row);\n        initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n      } else {\n        row.index = initialIndex++;\n        organisedRows.push(row);\n      }\n    }\n\n    return initialIndex;\n  };\n\n  ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n    var excelRows = [];\n    var isFrozen = this.parent.isFrozenGrid() && !this.parent.getFrozenColumns();\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n      this.theme = exportProperties.theme;\n    }\n\n    if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n      gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n    }\n\n    var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());\n    var gColumns = isExportColumns(exportProperties) ? prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) : helper.getGridExportColumns(isFrozen ? gObj.getColumns() : gObj.columns);\n    var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n    var groupIndent = gObj.groupSettings.columns.length;\n    excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows); // eslint-disable-next-line max-len\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n      // eslint-disable-next-line max-len\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n    } else {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n    }\n\n    gObj.notify(events.exportDataBound, {\n      excelRows: excelRows,\n      type: 'excel'\n    });\n    return excelRows;\n  };\n\n  ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n    var record;\n\n    if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n      record = currentViewRecords;\n    } else {\n      record = returnType.result;\n    }\n\n    if (!isNullOrUndefined(record.level)) {\n      this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n    } else {\n      this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n    }\n\n    if (!isNullOrUndefined(returnType.aggregates)) {\n      if (!isNullOrUndefined(currentViewRecords)) {\n        this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n      } else {\n        var result = returnType.result.GroupGuid ? returnType.result.records : returnType.result;\n        this.processAggregates(gObj, result, excelRow);\n      }\n    }\n\n    return excelRow;\n  };\n\n  ExcelExport.prototype.processGroupedRows = function ( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n      var item = dataSource_1[_i];\n      var cells = [];\n      var index = 1; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      var cell = {};\n      cell.index = index + level;\n      var col = gObj.getColumnByField(item.field); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      var args = {\n        value: item.key,\n        column: col,\n        style: undefined,\n        isForeignKey: col.isForeignColumn()\n      };\n      var value = gObj.getColumnByField(item.field).headerText + ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n\n      if (item.count > 1) {\n        value += item.count + ' items';\n      } else {\n        value += item.count + ' item';\n      }\n\n      var cArgs = {\n        captionText: value,\n        type: this.isCsvExport ? 'CSV' : 'Excel'\n      };\n      this.parent.trigger(events.exportGroupCaption, cArgs);\n      cell.value = cArgs.captionText;\n      cell.style = this.getCaptionThemeStyle(this.theme);\n      var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n      var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n      this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, excelRows, this.rowLength);\n      cells.push(cell);\n\n      if (excelRows[excelRows.length - 1].cells.length > 0) {\n        var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n        var hIndex = 0;\n\n        for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n          var tCell = _b[_a];\n\n          if (tCell.index < lIndex) {\n            lIndex = tCell.index;\n          }\n\n          if (tCell.index > hIndex) {\n            hIndex = tCell.index;\n          }\n\n          if (cells[cells.length - 1].index !== tCell.index) {\n            cells.push(tCell);\n          }\n        }\n\n        if (lIndex - cell.index > 1) {\n          cell.colSpan = lIndex - cell.index;\n        }\n\n        while (hIndex < headerRow.columns.length + level + dataSource.childLevels) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          var sCell = {};\n          sCell.index = hIndex + 1;\n          sCell.style = this.getCaptionThemeStyle(this.theme);\n          cells.push(sCell);\n          hIndex++;\n        }\n      } else {\n        var span = 0; //Calculation for column span when group caption dont have aggregates\n\n        for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n          var col_1 = _d[_c];\n\n          if (col_1.visible) {\n            span++;\n          }\n        }\n\n        cell.colSpan = dataSource.childLevels + span;\n      }\n\n      excelRows[excelRows.length - 1].cells = cells;\n      this.rowLength++;\n\n      if (this.groupedColLength < 8 && level > 1) {\n        var grouping = {\n          outlineLevel: level - 1,\n          isCollapsed: true\n        };\n        excelRows[excelRows.length - 1].grouping = grouping;\n      }\n\n      if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n        this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n        this.processAggregates(gObj, item, excelRows, undefined, level + dataSource.childLevels, true);\n      } else {\n        startIndex = this.processRecordRows(gObj, item.items, headerRow, level, startIndex, excelExportProperties, excelRows, helper);\n        this.processAggregates(gObj, item, excelRows, undefined, level, true);\n      }\n    }\n  };\n\n  ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    var index = 1;\n    var cells = [];\n    var columns = headerRow.columns;\n    var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n      cells = [];\n      startIndex++;\n      index = 1;\n      var templateRowHeight = void 0;\n\n      for (var c = 0, len = row.cells.length; c < len; c++) {\n        var gCell = row.cells[c];\n\n        if (gCell.cellType !== CellType.Data) {\n          continue;\n        }\n\n        var column = gCell.column;\n        var field = column.field;\n        var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n        var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n        var fkData = void 0;\n\n        if (column.isForeignColumn && column.isForeignColumn()) {\n          fkData = helper.getFData(value, column);\n          value = getValue(column.foreignKeyValue, fkData);\n        }\n\n        if (!isNullOrUndefined(value)) {\n          var cell = {};\n          var idx = index + level + gObj.childGridLevel; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          var excelCellArgs = {\n            data: row.data,\n            column: column,\n            foreignKeyData: fkData,\n            value: value,\n            style: undefined,\n            colSpan: 1,\n            cell: cell\n          };\n          gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n\n          if (!isNullOrUndefined(excelCellArgs.image) && !isNullOrUndefined(excelCellArgs.image.base64)) {\n            if (isNullOrUndefined(this.sheet.images)) {\n              this.sheet.images = [];\n            } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n            var excelImage = {\n              image: excelCellArgs.image.base64,\n              row: this.rowLength,\n              column: idx,\n              lastRow: this.rowLength,\n              lastColumn: idx\n            };\n            this.sheet.images.push(excelImage);\n            templateRowHeight = excelCellArgs.image.height || 50;\n            this.columns[idx - 1].width = excelCellArgs.image.width || this.columns[idx - 1].width;\n          }\n\n          if (!isNullOrUndefined(excelCellArgs.hyperLink)) {\n            excelCellArgs.cell.hyperlink = {\n              target: excelCellArgs.hyperLink.target\n            };\n            excelCellArgs.value = excelCellArgs.hyperLink.displayText || excelCellArgs.value;\n          }\n\n          cell = excelCellArgs.cell;\n          cell.index = idx;\n          cell.value = excelCellArgs.value;\n\n          if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n            var style = {};\n            style.hAlign = 'left';\n            excelCellArgs = {\n              style: style\n            };\n            cell.colSpan = gObj.getVisibleColumns().length;\n            cell.value = this.l10n.getConstant('EmptyRecord');\n          }\n\n          if (excelCellArgs.colSpan > 1) {\n            cell.colSpan = excelCellArgs.colSpan;\n          }\n\n          if (!isNullOrUndefined(excelCellArgs.style)) {\n            var styleIndex = this.getColumnStyle(gObj, index + level);\n            cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n          } else {\n            cell.style = {\n              name: gObj.element.id + 'column' + (index + level)\n            };\n          }\n\n          cells.push(cell);\n        }\n\n        index++;\n      }\n\n      var excelRow = {\n        index: this.rowLength++,\n        cells: cells\n      };\n\n      if (!isNullOrUndefined(templateRowHeight)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        excelRow.height = templateRowHeight;\n      }\n\n      if (this.groupedColLength < 8 && level > 0) {\n        excelRow.grouping = {\n          outlineLevel: level,\n          isCollapsed: true\n        };\n        excelRows.push(excelRow);\n      } else {\n        excelRows.push(excelRow);\n      }\n\n      if (!isNullOrUndefined(gObj.childGrid)) {\n        gObj.isPrinting = true;\n        var exportType = !isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType ? excelExportProperties.exportType : 'AllPages';\n        var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n        var childGridObj = returnVal.childGrid;\n        var element = returnVal.element;\n        childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n        childGridObj.childGridLevel = gObj.childGridLevel + 1;\n        var args = {\n          childGrid: childGridObj,\n          row: row,\n          exportProperties: excelExportProperties\n        };\n        this.parent.trigger(events.exportDetailDataBound, args);\n        childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n        childGridObj.appendTo(element);\n      }\n\n      gObj.notify(events.exportRowDataBound, {\n        rowObj: row,\n        type: 'excel',\n        excelRows: excelRows\n      });\n    }\n\n    return startIndex;\n  };\n\n  ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n    var _this = this;\n\n    return function (result) {\n      childGridObj.beforeDataBound = null;\n      result.cancel = true;\n\n      if (result.result.length === 0) {\n        result.result = [''];\n      }\n\n      excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n      var intent = _this.parent.groupSettings.columns.length;\n      var rows = excelRow.childRows;\n\n      for (var i = 0; i < rows.length; i++) {\n        rows[i].grouping = {\n          outlineLevel: intent + childGridObj.childGridLevel,\n          isCollapsed: !gRow.isExpand,\n          isHidden: !gRow.isExpand\n        };\n      }\n\n      childGridObj.destroy();\n      detach(childGridObj.element);\n      _this.gridPool[childGridObj.id] = true;\n\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n\n      return excelRow;\n    };\n  };\n\n  ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n    var summaryModel = new SummaryModelGenerator(gObj);\n    var columns = summaryModel.getColumns();\n    columns = columns.filter(function (col) {\n      return isNullOrUndefined(col.commands) && col.type !== 'checkbox';\n    });\n\n    if (gObj.aggregates.length && this.parent !== gObj) {\n      gObj.aggregateModule.prepareSummaryInfo();\n    }\n\n    var data = undefined;\n\n    if (!isNullOrUndefined(currentViewRecords)) {\n      data = currentViewRecords;\n    } else {\n      data = rec;\n    }\n\n    if (indent === undefined) {\n      indent = 0;\n    }\n\n    if (gObj.groupSettings.columns.length > 0 && byGroup) {\n      var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n      var groupSummaryRows = groupSummaryModel.generateRows(data, {\n        level: data.level\n      });\n\n      if (groupSummaryRows.length > 0) {\n        excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n      }\n    } else {\n      indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n      var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n\n      if (sRows.length > 0 && !byGroup) {\n        excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n      }\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n    for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n      var row = rows_2[_i];\n      var cells = [];\n      var isEmpty = true;\n      var index = 0;\n\n      for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n        var cell = _b[_a]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        var eCell = {};\n\n        if (cell.cellType === CellType.DetailFooterIntent) {\n          continue;\n        }\n\n        if (cell.visible || this.includeHiddenColumn) {\n          index++;\n\n          if (cell.isDataCell) {\n            isEmpty = false;\n            var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n            var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n            var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n            eCell.index = index + indent + gObj.childGridLevel;\n\n            if (footerTemplate) {\n              eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n            } else if (groupFooterTemplate) {\n              eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n            } else if (groupCaptionTemplate) {\n              eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n            } else {\n              for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                var key = _d[_c];\n\n                if (key === cell.column.type) {\n                  if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                    eCell.value = row.data[cell.column.field].Custom;\n                  }\n                }\n              }\n            }\n\n            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n\n            this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n            var gridCellStyle = cell.attributes.style;\n\n            if (gridCellStyle.textAlign) {\n              eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n            }\n\n            var args = {\n              row: row,\n              type: footerTemplate ? 'Footer' : groupFooterTemplate ? 'GroupFooter' : 'GroupCaption',\n              style: eCell\n            };\n            this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n            cells.push(eCell);\n          } else {\n            if (customIndex === undefined) {\n              eCell.index = index + indent + gObj.childGridLevel;\n              eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n\n              cells.push(eCell);\n            }\n          }\n        }\n      }\n\n      if (!isNullOrUndefined(customIndex)) {\n        excelRows.push({\n          index: customIndex,\n          cells: cells\n        });\n      } else {\n        var row_1 = {};\n\n        if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n          var dummyOutlineLevel = 'outlineLevel';\n          var dummyGrouping = 'grouping';\n          var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n          var grouping = {\n            outlineLevel: level,\n            isCollapsed: true\n          };\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells,\n            grouping: grouping\n          };\n        } else {\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells\n          };\n        }\n\n        if (!isEmpty) {\n          excelRows.push(row_1);\n        }\n      }\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n    var column = this.parent.getColumnByField(field);\n\n    if (typeof col.format === 'object') {\n      var format = col.format;\n      style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n\n      if (!isNullOrUndefined(format.type)) {\n        style.type = format.type.toLowerCase();\n      }\n    } else {\n      style.numberFormat = col.format;\n    }\n\n    if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n      style.type = column.type.toLowerCase();\n    }\n  };\n\n  ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n    var templateFn = {};\n    templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n    var txt;\n    var data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];\n\n    if (this.parent.isReact || this.parent.isVue) {\n      txt = templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent);\n\n      if (this.parent.isReact) {\n        this.parent.renderTemplates();\n      }\n    } else {\n      txt = templateFn[getEnumValue(CellType, cell.cellType)](data);\n    }\n\n    return txt[0].textContent;\n  };\n\n  ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n    var result = {};\n    var attrname = Object.keys(JSON1);\n\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON1[attrname[index]];\n      }\n    }\n\n    attrname = Object.keys(JSON2);\n\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON2[attrname[index]];\n      }\n    }\n\n    return result;\n  };\n\n  ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n    var index = 0;\n\n    for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n      var style = _a[_i];\n\n      if (style.name === gObj.element.id + 'column' + columnIndex) {\n        return index;\n      }\n\n      index++;\n    }\n\n    return undefined;\n  };\n\n  ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n    var rowIndex = 1;\n    var gridRows = headerRow.rows; // Column collection with respect to the records in the grid\n\n    var gridColumns = headerRow.columns;\n    var spannedCells = [];\n\n    if (indent > 0) {\n      var index = 0;\n\n      while (index !== indent) {\n        this.columns.push({\n          index: index + 1,\n          width: 30\n        });\n        index++;\n      }\n    }\n\n    for (var row = 0; row < gridRows.length; row++) {\n      var currentCellIndex = 1 + indent;\n      var cells = [];\n\n      for (var column = 0; column < gridRows[row].cells.length; column++) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var style = {};\n        var cell = {};\n        var gridCell = gridRows[row].cells[column];\n\n        if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n          continue;\n        }\n\n        var result = {\n          contains: true,\n          index: 1\n        };\n\n        while (result.contains) {\n          result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n          currentCellIndex = result.index;\n\n          if (!result.contains) {\n            cell.index = result.index + gObj.childGridLevel;\n            break;\n          }\n        }\n\n        if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n          cell.rowSpan = gridCell.rowSpan;\n\n          for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n            var spannedCell = {\n              rowIndex: 0,\n              columnIndex: 0\n            };\n            spannedCell.rowIndex = i;\n            spannedCell.columnIndex = currentCellIndex;\n            spannedCells.push(spannedCell);\n          }\n        }\n\n        if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n          cell.colSpan = gridCell.colSpan;\n          currentCellIndex = currentCellIndex + cell.colSpan - 1;\n        }\n\n        cell.value = gridCell.column.headerText;\n        style = this.getHeaderThemeStyle(this.theme);\n\n        if (!isNullOrUndefined(gridCell.column.textAlign)) {\n          style.hAlign = gridCell.column.textAlign.toLowerCase();\n        }\n\n        if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n          style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n        }\n\n        var excelHeaderCellArgs = {\n          cell: cell,\n          gridCell: gridCell,\n          style: style\n        };\n        gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n        cell.style = excelHeaderCellArgs.style;\n        cells.push(cell);\n        currentCellIndex++;\n      }\n\n      excelRows.push({\n        index: this.rowLength++,\n        cells: cells\n      });\n    }\n\n    for (var col = 0; col < gridColumns.length; col++) {\n      this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 12;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n    style.bold = true;\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n      style = this.updateThemeStyle(theme.header, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n    return extend(style, themestyle);\n  };\n\n  ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.backColor = '#F6F6F6';\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n      style = this.updateThemeStyle(theme.caption, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n      style = this.updateThemeStyle(theme.record, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.processExcelHeader = function (header) {\n    if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n      var noRows = void 0;\n\n      if (header.headerRows === undefined) {\n        this.rowLength = header.rows.length;\n      } else {\n        this.rowLength = header.headerRows;\n      }\n\n      if (this.rowLength < header.rows.length) {\n        noRows = this.rowLength;\n      } else {\n        noRows = header.rows.length;\n      }\n\n      this.rowLength++;\n\n      for (var row = 0; row < noRows; row++) {\n        var json = header.rows[row]; //Row index\n\n        if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n          json.index = row + 1;\n        }\n\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n\n  ExcelExport.prototype.updatedCellIndex = function (json) {\n    var cellsLength = json.cells.length;\n\n    for (var cellId = 0; cellId < cellsLength; cellId++) {\n      var jsonCell = json.cells[cellId]; //cell index\n\n      if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n        jsonCell.index = cellId + 1;\n      }\n    }\n\n    this.rows.push(json);\n  };\n\n  ExcelExport.prototype.processExcelFooter = function (footer) {\n    if (!isNullOrUndefined(footer.rows)) {\n      var noRows = void 0;\n\n      if (footer.footerRows === undefined) {\n        this.rowLength += footer.rows.length;\n      } else {\n        if (footer.footerRows > footer.rows.length) {\n          this.rowLength += footer.footerRows - footer.rows.length;\n          noRows = footer.rows.length;\n        } else {\n          noRows = footer.footerRows;\n        }\n      }\n\n      for (var row = 0; row < noRows; row++) {\n        var json = footer.rows[row]; //Row index\n\n        if (json.index === null || json.index === undefined) {\n          json.index = this.rowLength++;\n        } else {\n          json.index += this.rowLength;\n        }\n\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n\n  ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n    for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n      var spannedCell = spannedCells_1[_i];\n\n      if (spannedCell.rowIndex === rowIndex && spannedCell.columnIndex === columnIndex) {\n        columnIndex = columnIndex + 1;\n        return {\n          contains: true,\n          index: columnIndex\n        };\n      }\n    }\n\n    return {\n      contains: false,\n      index: columnIndex\n    };\n  };\n\n  ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n    if (!isNullOrUndefined(col.format)) {\n      if (typeof col.format === 'object') {\n        var format = col.format;\n        style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n\n        if (!isNullOrUndefined(format.type)) {\n          style.type = format.type.toLowerCase();\n        }\n      } else {\n        style.numberFormat = col.format;\n        style.type = col.type;\n      }\n    }\n\n    if (!isNullOrUndefined(col.textAlign)) {\n      style.hAlign = col.textAlign.toLowerCase();\n    }\n\n    if (Object.keys(style).length > 0) {\n      style.name = gObj.element.id + 'column' + index;\n      this.styles.push(style);\n    }\n\n    if (!isNullOrUndefined(col.width) && col.width !== 'auto') {\n      this.columns.push({\n        index: index + gObj.childGridLevel,\n        width: typeof col.width === 'number' ? col.width : this.helper.getConvertedWidth(col.width)\n      });\n    }\n  };\n\n  ExcelExport.prototype.destroy = function () {//destroy for exporting\n  };\n\n  return ExcelExport;\n}();\n\nexport { ExcelExport };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-export.js"],"names":["events","Workbook","isNullOrUndefined","getEnumValue","compile","getValue","detach","extend","Data","ExportHelper","ExportValueFormatter","SummaryModelGenerator","GroupSummaryModelGenerator","CaptionSummaryModelGenerator","CellType","Query","DataManager","getPrintGridModel","getUid","isExportColumns","updateColumnTypeForExportColumns","prepareColumns","measureColumnDepth","ExcelExport","parent","locator","book","workSheet","rows","columns","styles","rowLength","expType","includeHiddenColumn","isCsvExport","isElementIdChanged","gridPool","sheet","helper","l10n","getService","prototype","getModuleName","init","gObj","element","id","Date","toISOString","isDestroyed","isExporting","undefined","footer","exportValueFormatter","locale","Map","grid","exportProperties","isMultipleExport","workbook","isCsv","isBlob","cancel","isBlb","csv","workbk","isMultiEx","childGrid","hierarchyExportMode","expandedRows","args","requestType","gridObject","trigger","beforeExcelExport","Promise","resolve","log","data","processRecords","exportingSuccess","excelExportComplete","promise","blobPromise","images","_this","dataSource","query_1","query","isCountRequired","aggregates","dataManager","executeQuery","then","r","processInnerRecords","exportType","getCurrentViewRecords","allPromise_1","push","getData","getQuery","getColumnData","reject","all","e","catch","actionFailure","groupedColLength","groupSettings","length","blankRows","separator","colDepth","isExportPropertiesPresent","multipleExport","type","worksheets","index","header","processExcelHeader","JSON","parse","stringify","childGridLevel","processGridExport","globalResolve","checkAndExport","organisedRows","organiseRows","concat","processExcelFooter","enableRtl","allowFiltering","getVisibleColumns","enableFilter","autoFilters","row","column","lastRow","lastColumn","notify","currencyCode","fileName","save","saveAsBlob","initialIndex","i","childRows","excelRows","isFrozen","isFrozenGrid","getFrozenColumns","theme","hierarchyPrintMode","getForeignKeyData","gColumns","enableColumnVirtualization","getGridExportColumns","getColumns","headerRow","getHeaders","groupIndent","processHeaderContent","processRecordContent","currentViewData","exportDataBound","returnType","currentViewRecords","excelRow","record","result","level","processGroupedRows","processRecordRows","processAggregates","GroupGuid","records","startIndex","excelExportProperties","_i","dataSource_1","item","cells","cell","col","getColumnByField","field","value","key","style","isForeignKey","isForeignColumn","headerText","enableGroupByFormat","formatCellValue","count","cArgs","captionText","exportGroupCaption","getCaptionThemeStyle","captionModelGen","groupCaptionSummaryRows","generateRows","fillAggregates","childLevels","lIndex","hIndex","_a","_b","tCell","colSpan","sCell","span","_c","_d","col_1","visible","grouping","outlineLevel","isCollapsed","items","getGridRowModel","rows_1","templateRowHeight","c","len","gCell","cellType","cellValue","valueAccessor","fkData","getFData","foreignKeyValue","idx","excelCellArgs","foreignKeyData","excelQueryCellInfo","image","base64","excelImage","height","width","hyperLink","hyperlink","target","displayText","hAlign","getConstant","styleIndex","getColumnStyle","mergeOptions","name","isPrinting","returnVal","createChildGrid","childGridObj","failureHandler","exportDetailDataBound","beforeDataBound","childGridCell","appendTo","exportRowDataBound","rowObj","excelExportProps","gRow","intent","isExpand","isHidden","destroy","rec","indent","byGroup","summaryModel","filter","commands","aggregateModule","prepareSummaryInfo","groupSummaryModel","groupSummaryRows","sRows","customIndex","rows_2","isEmpty","eCell","DetailFooterIntent","isDataCell","footerTemplate","groupFooterTemplate","groupCaptionTemplate","getAggreateValue","Summary","GroupSummary","CaptionSummary","Object","keys","Sum","Average","Max","Min","Count","TrueCount","FalseCount","Custom","aggregateStyle","gridCellStyle","attributes","textAlign","toLowerCase","excelAggregateQueryCellInfo","row_1","dummyOutlineLevel","dummyGrouping","format","numberFormat","skeleton","template","templateFn","txt","columnName","isReact","isVue","renderTemplates","textContent","JSON1","JSON2","attrname","columnIndex","rowIndex","gridRows","gridColumns","spannedCells","currentCellIndex","gridCell","HeaderIndent","DetailHeader","contains","getIndex","rowSpan","spannedCell","getHeaderThemeStyle","headerTextAlign","excelHeaderCellArgs","excelHeaderQueryCellInfo","parseStyles","getRecordThemeStyle","fontSize","borders","color","bold","updateThemeStyle","themestyle","backColor","caption","noRows","headerRows","json","updatedCellIndex","cellsLength","cellId","jsonCell","footerRows","spannedCells_1","getConvertedWidth"],"mappings":"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","sourcesContent":["import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns, measureColumnDepth } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for the Grid Excel Export module.\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {ServiceLocator} locator - specifies the ServiceLocator\n     * @hidden\n     */\n    function ExcelExport(parent, locator) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.isCsvExport = false;\n        this.isElementIdChanged = false;\n        this.gridPool = {};\n        this.sheet = {};\n        this.parent = parent;\n        this.helper = new ExportHelper(parent);\n        this.locator = locator;\n        this.l10n = this.locator.getService('localization');\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'ExcelExport';\n    };\n    ExcelExport.prototype.init = function (gObj) {\n        if (gObj.element !== null && gObj.element.id === '') {\n            gObj.element.id = new Date().toISOString();\n            this.isElementIdChanged = true;\n        }\n        this.parent = gObj;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.isExporting = undefined;\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.footer = undefined;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n        gObj.id = getUid('main-grid');\n        this.gridPool[gObj.id] = false;\n    };\n    /**\n     * Export Grid to Excel file.\n     *\n     * @param {IGrid} grid - Defines the grid.\n     * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n     * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n     * @param  {Workbook} workbook - Defined the Workbook if multiple Grid is exported.\n     * @param  {boolean} isCsv - true if export to CSV.\n     * @param {boolean} isBlob - true if isBlob is enabled.\n     * @returns {Promise<any>} - Returns the map for export.\n     */\n    // eslint-disable-next-line\n    ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n        var gObj = grid;\n        var cancel = 'cancel';\n        var isBlb = 'isBlob';\n        var csv = 'isCsv';\n        var workbk = 'workbook';\n        var isMultiEx = 'isMultipleExport';\n        this.gridPool = {};\n        if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n            grid.expandedRows = getPrintGridModel(grid).expandedRows;\n        }\n        var args = {\n            requestType: 'beforeExcelExport', gridObject: gObj, cancel: false,\n            isMultipleExport: isMultipleExport, workbook: workbook, isCsv: isCsv, isBlob: isBlob\n        };\n        gObj.trigger(events.beforeExcelExport, args);\n        if (args[cancel]) {\n            return new Promise(function (resolve) {\n                return resolve();\n            });\n        }\n        this.parent.log('exporting_begin', this.getModuleName());\n        this.data = new Data(gObj);\n        this.isExporting = true;\n        this.isBlob = args[isBlb];\n        if (args[csv]) {\n            this.isCsvExport = args[csv];\n        }\n        else {\n            this.isCsvExport = false;\n        }\n        if (isExportColumns(exportProperties)) {\n            updateColumnTypeForExportColumns(exportProperties, gObj);\n        }\n        return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n    };\n    ExcelExport.prototype.exportingSuccess = function (resolve) {\n        this.isExporting = false;\n        this.parent.trigger(events.excelExportComplete, this.isBlob ? { promise: this.blobPromise } : {});\n        this.parent.log('exporting_complete', this.getModuleName());\n        resolve(this.book);\n        this.sheet.images = [];\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n        var _this = this;\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) &&\n            exportProperties.dataSource instanceof DataManager) {\n            var query_1 = exportProperties.query ? exportProperties.query : new Query();\n            if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n                query_1.isCountRequired = true;\n            }\n            return new Promise(function (resolve) {\n                var dataManager = exportProperties.dataSource.executeQuery(query_1);\n                dataManager.then(function (r) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                });\n            });\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            return new Promise(function (resolve) {\n                _this.init(gObj);\n                _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n                _this.exportingSuccess(resolve);\n            });\n        }\n        else {\n            var allPromise_1 = [];\n            allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n            allPromise_1.push(this.helper.getColumnData(gObj));\n            return new Promise(function (resolve, reject) {\n                Promise.all(allPromise_1).then(function (e) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                }).catch(function (e) {\n                    reject(_this.book);\n                    _this.parent.trigger(events.actionFailure, e);\n                });\n            });\n        }\n    };\n    ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isMultipleExport, workbook, r) {\n        var _this = this;\n        this.groupedColLength = gObj.groupSettings.columns.length;\n        var blankRows = 5;\n        var separator;\n        var rows = [];\n        var colDepth = measureColumnDepth(gObj.columns);\n        var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n        if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n            this.expType = (!isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet');\n            if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n                blankRows = exportProperties.multipleExport.blankRows;\n            }\n        }\n        if (isNullOrUndefined(workbook)) {\n            this.workSheet = [];\n            this.rows = [];\n            this.columns = [];\n            this.styles = [];\n        }\n        else if (this.expType === 'NewSheet') {\n            this.workSheet = workbook.worksheets;\n            this.rows = [];\n            this.columns = [];\n            this.styles = workbook.styles;\n        }\n        else {\n            this.workSheet = [];\n            this.rows = workbook.worksheets[0].rows;\n            this.columns = workbook.worksheets[0].columns;\n            this.styles = workbook.styles;\n            this.rowLength = (this.rows[this.rows.length - 1].index + blankRows);\n            this.rowLength++;\n        }\n        if (isExportPropertiesPresent) {\n            if (!isNullOrUndefined(isMultipleExport)) {\n                if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    if (this.expType === 'AppendToSheet') {\n                        if (!isMultipleExport) {\n                            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                        }\n                    }\n                    else {\n                        this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                    }\n                }\n            }\n            else {\n                if (!isNullOrUndefined(exportProperties.header)) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                }\n            }\n        }\n        this.includeHiddenColumn = (isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        return new Promise(function (resolve, reject) {\n            gObj.childGridLevel = 0;\n            rows = _this.processGridExport(gObj, exportProperties, r);\n            _this.globalResolve = resolve;\n            _this.gridPool[gObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n        }).then(function () {\n            var organisedRows = [];\n            _this.organiseRows(rows, rows[0].index, organisedRows);\n            _this.rows = _this.rows.concat(organisedRows);\n            //footer template add\n            if (!isNullOrUndefined(_this.footer)) {\n                if ((_this.expType === 'AppendToSheet' && !isMultipleExport) || (_this.expType === 'NewSheet')) {\n                    _this.processExcelFooter(_this.footer);\n                }\n            }\n            if (_this.columns.length > 0) {\n                _this.sheet.columns = _this.columns;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            _this.sheet.rows = _this.rows;\n            _this.sheet.enableRtl = _this.parent.enableRtl;\n            if (_this.parent.allowFiltering && gObj.getVisibleColumns().length && isExportPropertiesPresent &&\n                exportProperties.enableFilter) {\n                var autoFilters = {\n                    row: colDepth, column: _this.groupedColLength ? _this.groupedColLength + 1 :\n                        _this.sheet.columns[0].index, lastRow: _this.sheet.rows.length, lastColumn: _this.sheet.columns.length\n                };\n                _this.sheet.autoFilters = autoFilters;\n            }\n            _this.workSheet.push(_this.sheet);\n            _this.book.worksheets = _this.workSheet;\n            _this.book.styles = _this.styles;\n            gObj.notify('finalPageSetup', _this.book);\n            if (!isMultipleExport) {\n                if (_this.isCsvExport) {\n                    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator)\n                        && exportProperties.separator !== ',') {\n                        separator = exportProperties.separator;\n                    }\n                    var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode, separator);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.csv');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('text/csv');\n                    }\n                }\n                else {\n                    var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.xlsx');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n                    }\n                }\n                if (_this.isElementIdChanged) {\n                    gObj.element.id = '';\n                }\n                delete gObj.expandedRows;\n            }\n            return workbook;\n        });\n    };\n    ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n        if (!rows.length) {\n            return initialIndex;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[i];\n            var childRows = row.childRows;\n            if (childRows) {\n                row.index = initialIndex++;\n                delete row.childRows;\n                organisedRows.push(row);\n                initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n            }\n            else {\n                row.index = initialIndex++;\n                organisedRows.push(row);\n            }\n        }\n        return initialIndex;\n    };\n    ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n        var excelRows = [];\n        var isFrozen = this.parent.isFrozenGrid() && !this.parent.getFrozenColumns();\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n            this.theme = exportProperties.theme;\n        }\n        if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n            gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n        }\n        var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());\n        var gColumns = isExportColumns(exportProperties) ?\n            prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) :\n            helper.getGridExportColumns(isFrozen ? gObj.getColumns() : gObj.columns);\n        var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n        var groupIndent = gObj.groupSettings.columns.length;\n        excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n        // eslint-disable-next-line max-len\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n            // eslint-disable-next-line max-len\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n        }\n        else {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n        }\n        gObj.notify(events.exportDataBound, { excelRows: excelRows, type: 'excel' });\n        return excelRows;\n    };\n    ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n        var record;\n        if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n            record = currentViewRecords;\n        }\n        else {\n            record = returnType.result;\n        }\n        if (!isNullOrUndefined(record.level)) {\n            this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n        }\n        else {\n            this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n        }\n        if (!isNullOrUndefined(returnType.aggregates)) {\n            if (!isNullOrUndefined(currentViewRecords)) {\n                this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n            }\n            else {\n                var result = returnType.result.GroupGuid ?\n                    returnType.result.records : returnType.result;\n                this.processAggregates(gObj, result, excelRow);\n            }\n        }\n        return excelRow;\n    };\n    ExcelExport.prototype.processGroupedRows = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n            var item = dataSource_1[_i];\n            var cells = [];\n            var index = 1;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var cell = {};\n            cell.index = index + level;\n            var col = gObj.getColumnByField(item.field);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var args = {\n                value: item.key,\n                column: col,\n                style: undefined,\n                isForeignKey: col.isForeignColumn()\n            };\n            var value = gObj.getColumnByField(item.field).headerText +\n                ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n            if (item.count > 1) {\n                value += item.count + ' items';\n            }\n            else {\n                value += item.count + ' item';\n            }\n            var cArgs = { captionText: value, type: this.isCsvExport ? 'CSV' : 'Excel' };\n            this.parent.trigger(events.exportGroupCaption, cArgs);\n            cell.value = cArgs.captionText;\n            cell.style = this.getCaptionThemeStyle(this.theme);\n            var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n            var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n            this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, excelRows, this.rowLength);\n            cells.push(cell);\n            if (excelRows[excelRows.length - 1].cells.length > 0) {\n                var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n                var hIndex = 0;\n                for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n                    var tCell = _b[_a];\n                    if (tCell.index < lIndex) {\n                        lIndex = tCell.index;\n                    }\n                    if (tCell.index > hIndex) {\n                        hIndex = tCell.index;\n                    }\n                    if (cells[cells.length - 1].index !== tCell.index) {\n                        cells.push(tCell);\n                    }\n                }\n                if ((lIndex - cell.index) > 1) {\n                    cell.colSpan = lIndex - cell.index;\n                }\n                while (hIndex < (headerRow.columns.length + level + dataSource.childLevels)) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var sCell = {};\n                    sCell.index = (hIndex + 1);\n                    sCell.style = this.getCaptionThemeStyle(this.theme);\n                    cells.push(sCell);\n                    hIndex++;\n                }\n            }\n            else {\n                var span = 0;\n                //Calculation for column span when group caption dont have aggregates\n                for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n                    var col_1 = _d[_c];\n                    if (col_1.visible) {\n                        span++;\n                    }\n                }\n                cell.colSpan = (dataSource.childLevels + span);\n            }\n            excelRows[excelRows.length - 1].cells = cells;\n            this.rowLength++;\n            if (this.groupedColLength < 8 && level > 1) {\n                var grouping = { outlineLevel: level - 1, isCollapsed: true };\n                excelRows[excelRows.length - 1].grouping = grouping;\n            }\n            if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n                this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level) + dataSource.childLevels, true);\n            }\n            else {\n                startIndex = this.processRecordRows(gObj, item.items, headerRow, (level), startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level), true);\n            }\n        }\n    };\n    ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        var index = 1;\n        var cells = [];\n        var columns = headerRow.columns;\n        var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            cells = [];\n            startIndex++;\n            index = 1;\n            var templateRowHeight = void 0;\n            for (var c = 0, len = row.cells.length; c < len; c++) {\n                var gCell = row.cells[c];\n                if (gCell.cellType !== CellType.Data) {\n                    continue;\n                }\n                var column = gCell.column;\n                var field = column.field;\n                var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n                var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n                var fkData = void 0;\n                if (column.isForeignColumn && column.isForeignColumn()) {\n                    fkData = helper.getFData(value, column);\n                    value = getValue(column.foreignKeyValue, fkData);\n                }\n                if (!isNullOrUndefined(value)) {\n                    var cell = {};\n                    var idx = index + level + gObj.childGridLevel;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var excelCellArgs = {\n                        data: row.data, column: column, foreignKeyData: fkData,\n                        value: value, style: undefined, colSpan: 1, cell: cell\n                    };\n                    gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n                    if (!isNullOrUndefined(excelCellArgs.image) && !isNullOrUndefined(excelCellArgs.image.base64)) {\n                        if (isNullOrUndefined(this.sheet.images)) {\n                            this.sheet.images = [];\n                        }\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        var excelImage = {\n                            image: excelCellArgs.image.base64, row: this.rowLength, column: idx,\n                            lastRow: this.rowLength, lastColumn: idx\n                        };\n                        this.sheet.images.push(excelImage);\n                        templateRowHeight = excelCellArgs.image.height || 50;\n                        this.columns[idx - 1].width = excelCellArgs.image.width || this.columns[idx - 1].width;\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.hyperLink)) {\n                        excelCellArgs.cell.hyperlink = { target: excelCellArgs.hyperLink.target };\n                        excelCellArgs.value = excelCellArgs.hyperLink.displayText || excelCellArgs.value;\n                    }\n                    cell = excelCellArgs.cell;\n                    cell.index = idx;\n                    cell.value = excelCellArgs.value;\n                    if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n                        var style = {};\n                        style.hAlign = 'left';\n                        excelCellArgs = { style: style };\n                        cell.colSpan = gObj.getVisibleColumns().length;\n                        cell.value = this.l10n.getConstant('EmptyRecord');\n                    }\n                    if (excelCellArgs.colSpan > 1) {\n                        cell.colSpan = excelCellArgs.colSpan;\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.style)) {\n                        var styleIndex = this.getColumnStyle(gObj, index + level);\n                        cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n                    }\n                    else {\n                        cell.style = { name: gObj.element.id + 'column' + (index + level) };\n                    }\n                    cells.push(cell);\n                }\n                index++;\n            }\n            var excelRow = { index: this.rowLength++, cells: cells };\n            if (!isNullOrUndefined(templateRowHeight)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                excelRow.height = templateRowHeight;\n            }\n            if (this.groupedColLength < 8 && level > 0) {\n                excelRow.grouping = { outlineLevel: level, isCollapsed: true };\n                excelRows.push(excelRow);\n            }\n            else {\n                excelRows.push(excelRow);\n            }\n            if (!isNullOrUndefined(gObj.childGrid)) {\n                gObj.isPrinting = true;\n                var exportType = (!isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType) ?\n                    excelExportProperties.exportType : 'AllPages';\n                var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n                var childGridObj = returnVal.childGrid;\n                var element = returnVal.element;\n                childGridObj.actionFailure =\n                    helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n                childGridObj.childGridLevel = gObj.childGridLevel + 1;\n                var args = { childGrid: childGridObj, row: row, exportProperties: excelExportProperties };\n                this.parent.trigger(events.exportDetailDataBound, args);\n                childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n                childGridObj.appendTo(element);\n            }\n            gObj.notify(events.exportRowDataBound, { rowObj: row, type: 'excel', excelRows: excelRows });\n        }\n        return startIndex;\n    };\n    ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n        var _this = this;\n        return function (result) {\n            childGridObj.beforeDataBound = null;\n            result.cancel = true;\n            if (result.result.length === 0) {\n                result.result = [''];\n            }\n            excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n            var intent = _this.parent.groupSettings.columns.length;\n            var rows = excelRow.childRows;\n            for (var i = 0; i < rows.length; i++) {\n                rows[i].grouping = { outlineLevel: intent + childGridObj.childGridLevel,\n                    isCollapsed: !gRow.isExpand, isHidden: !gRow.isExpand };\n            }\n            childGridObj.destroy();\n            detach(childGridObj.element);\n            _this.gridPool[childGridObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n            return excelRow;\n        };\n    };\n    ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n        var summaryModel = new SummaryModelGenerator(gObj);\n        var columns = summaryModel.getColumns();\n        columns = columns.filter(function (col) { return isNullOrUndefined(col.commands) && col.type !== 'checkbox'; });\n        if (gObj.aggregates.length && this.parent !== gObj) {\n            gObj.aggregateModule.prepareSummaryInfo();\n        }\n        var data = undefined;\n        if (!isNullOrUndefined(currentViewRecords)) {\n            data = currentViewRecords;\n        }\n        else {\n            data = rec;\n        }\n        if (indent === undefined) {\n            indent = 0;\n        }\n        if (gObj.groupSettings.columns.length > 0 && byGroup) {\n            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n            var groupSummaryRows = groupSummaryModel.generateRows(data, { level: data.level });\n            if (groupSummaryRows.length > 0) {\n                excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n            }\n        }\n        else {\n            indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n            var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n            if (sRows.length > 0 && !byGroup) {\n                excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            var cells = [];\n            var isEmpty = true;\n            var index = 0;\n            for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n                var cell = _b[_a];\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var eCell = {};\n                if (cell.cellType === CellType.DetailFooterIntent) {\n                    continue;\n                }\n                if ((cell.visible || this.includeHiddenColumn)) {\n                    index++;\n                    if (cell.isDataCell) {\n                        isEmpty = false;\n                        var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n                        var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n                        var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n                        eCell.index = index + indent + gObj.childGridLevel;\n                        if (footerTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n                        }\n                        else if (groupFooterTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n                        }\n                        else if (groupCaptionTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n                        }\n                        else {\n                            for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                                var key = _d[_c];\n                                if (key === cell.column.type) {\n                                    if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                                        eCell.value = row.data[cell.column.field].Custom;\n                                    }\n                                }\n                            }\n                        }\n                        eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                        this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n                        var gridCellStyle = cell.attributes.style;\n                        if (gridCellStyle.textAlign) {\n                            eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n                        }\n                        var args = {\n                            row: row,\n                            type: footerTemplate ? 'Footer' : groupFooterTemplate ? 'GroupFooter' : 'GroupCaption',\n                            style: eCell\n                        };\n                        this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n                        cells.push(eCell);\n                    }\n                    else {\n                        if (customIndex === undefined) {\n                            eCell.index = index + indent + gObj.childGridLevel;\n                            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                            cells.push(eCell);\n                        }\n                    }\n                }\n            }\n            if (!isNullOrUndefined(customIndex)) {\n                excelRows.push({ index: customIndex, cells: cells });\n            }\n            else {\n                var row_1 = {};\n                if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n                    var dummyOutlineLevel = 'outlineLevel';\n                    var dummyGrouping = 'grouping';\n                    var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n                    var grouping = { outlineLevel: level, isCollapsed: true };\n                    row_1 = { index: this.rowLength++, cells: cells, grouping: grouping };\n                }\n                else {\n                    row_1 = { index: this.rowLength++, cells: cells };\n                }\n                if (!isEmpty) {\n                    excelRows.push(row_1);\n                }\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n        var column = this.parent.getColumnByField(field);\n        if (typeof col.format === 'object') {\n            var format = col.format;\n            style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n            if (!isNullOrUndefined(format.type)) {\n                style.type = format.type.toLowerCase();\n            }\n        }\n        else {\n            style.numberFormat = col.format;\n        }\n        if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n            style.type = column.type.toLowerCase();\n        }\n    };\n    ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n        var templateFn = {};\n        templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n        var txt;\n        var data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];\n        if (this.parent.isReact || this.parent.isVue) {\n            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent));\n            if (this.parent.isReact) {\n                this.parent.renderTemplates();\n            }\n        }\n        else {\n            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data));\n        }\n        return txt[0].textContent;\n    };\n    ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n        var result = {};\n        var attrname = Object.keys(JSON1);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON1[attrname[index]];\n            }\n        }\n        attrname = Object.keys(JSON2);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON2[attrname[index]];\n            }\n        }\n        return result;\n    };\n    ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n        var index = 0;\n        for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n            var style = _a[_i];\n            if (style.name === gObj.element.id + 'column' + columnIndex) {\n                return index;\n            }\n            index++;\n        }\n        return undefined;\n    };\n    ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n        var rowIndex = 1;\n        var gridRows = headerRow.rows;\n        // Column collection with respect to the records in the grid\n        var gridColumns = headerRow.columns;\n        var spannedCells = [];\n        if (indent > 0) {\n            var index = 0;\n            while (index !== indent) {\n                this.columns.push({ index: index + 1, width: 30 });\n                index++;\n            }\n        }\n        for (var row = 0; row < gridRows.length; row++) {\n            var currentCellIndex = 1 + indent;\n            var cells = [];\n            for (var column = 0; column < gridRows[row].cells.length; column++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var style = {};\n                var cell = {};\n                var gridCell = gridRows[row].cells[column];\n                if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n                    continue;\n                }\n                var result = { contains: true, index: 1 };\n                while (result.contains) {\n                    result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n                    currentCellIndex = result.index;\n                    if (!result.contains) {\n                        cell.index = result.index + gObj.childGridLevel;\n                        break;\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n                    cell.rowSpan = gridCell.rowSpan;\n                    for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n                        var spannedCell = { rowIndex: 0, columnIndex: 0 };\n                        spannedCell.rowIndex = i;\n                        spannedCell.columnIndex = currentCellIndex;\n                        spannedCells.push(spannedCell);\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n                    cell.colSpan = gridCell.colSpan;\n                    currentCellIndex = currentCellIndex + cell.colSpan - 1;\n                }\n                cell.value = gridCell.column.headerText;\n                style = this.getHeaderThemeStyle(this.theme);\n                if (!isNullOrUndefined(gridCell.column.textAlign)) {\n                    style.hAlign = gridCell.column.textAlign.toLowerCase();\n                }\n                if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n                    style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n                }\n                var excelHeaderCellArgs = { cell: cell, gridCell: gridCell, style: style };\n                gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n                cell.style = excelHeaderCellArgs.style;\n                cells.push(cell);\n                currentCellIndex++;\n            }\n            excelRows.push({ index: this.rowLength++, cells: cells });\n        }\n        for (var col = 0; col < gridColumns.length; col++) {\n            this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 12;\n        style.borders = { color: '#E0E0E0' };\n        style.bold = true;\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n            style = this.updateThemeStyle(theme.header, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n        return extend(style, themestyle);\n    };\n    ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.backColor = '#F6F6F6';\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n            style = this.updateThemeStyle(theme.caption, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.borders = { color: '#E0E0E0' };\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n            style = this.updateThemeStyle(theme.record, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.processExcelHeader = function (header) {\n        if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n            var noRows = void 0;\n            if (header.headerRows === undefined) {\n                this.rowLength = header.rows.length;\n            }\n            else {\n                this.rowLength = header.headerRows;\n            }\n            if (this.rowLength < header.rows.length) {\n                noRows = this.rowLength;\n            }\n            else {\n                noRows = header.rows.length;\n            }\n            this.rowLength++;\n            for (var row = 0; row < noRows; row++) {\n                var json = header.rows[row];\n                //Row index\n                if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n                    json.index = (row + 1);\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.updatedCellIndex = function (json) {\n        var cellsLength = json.cells.length;\n        for (var cellId = 0; cellId < cellsLength; cellId++) {\n            var jsonCell = json.cells[cellId];\n            //cell index\n            if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n                jsonCell.index = (cellId + 1);\n            }\n        }\n        this.rows.push(json);\n    };\n    ExcelExport.prototype.processExcelFooter = function (footer) {\n        if (!isNullOrUndefined(footer.rows)) {\n            var noRows = void 0;\n            if (footer.footerRows === undefined) {\n                this.rowLength += footer.rows.length;\n            }\n            else {\n                if (footer.footerRows > footer.rows.length) {\n                    this.rowLength += (footer.footerRows - footer.rows.length);\n                    noRows = footer.rows.length;\n                }\n                else {\n                    noRows = footer.footerRows;\n                }\n            }\n            for (var row = 0; row < noRows; row++) {\n                var json = footer.rows[row];\n                //Row index\n                if (json.index === null || json.index === undefined) {\n                    json.index = this.rowLength++;\n                }\n                else {\n                    json.index += this.rowLength;\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n        for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n            var spannedCell = spannedCells_1[_i];\n            if ((spannedCell.rowIndex === rowIndex) && (spannedCell.columnIndex === columnIndex)) {\n                columnIndex = columnIndex + 1;\n                return { contains: true, index: columnIndex };\n            }\n        }\n        return { contains: false, index: columnIndex };\n    };\n    ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n        if (!isNullOrUndefined(col.format)) {\n            if (typeof col.format === 'object') {\n                var format = col.format;\n                style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n                if (!isNullOrUndefined(format.type)) {\n                    style.type = format.type.toLowerCase();\n                }\n            }\n            else {\n                style.numberFormat = col.format;\n                style.type = col.type;\n            }\n        }\n        if (!isNullOrUndefined(col.textAlign)) {\n            style.hAlign = col.textAlign.toLowerCase();\n        }\n        if (Object.keys(style).length > 0) {\n            style.name = gObj.element.id + 'column' + index;\n            this.styles.push(style);\n        }\n        if (!isNullOrUndefined(col.width) && col.width !== 'auto') {\n            this.columns.push({ index: index + gObj.childGridLevel, width: typeof col.width === 'number' ?\n                    col.width : this.helper.getConvertedWidth(col.width) });\n        }\n    };\n    ExcelExport.prototype.destroy = function () {\n        //destroy for exporting\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n"]},"metadata":{},"sourceType":"module"}