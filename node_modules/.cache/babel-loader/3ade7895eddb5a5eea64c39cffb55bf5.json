{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `AggregateColumnDirective represent a aggregate column of the react TreeGrid.\n * ```tsx\n * <TreeGridComponent dataSource={data} allowPaging={true} allowSorting={true}>\n * <ColumnsDirective>\n * <ColumnDirective field='ID' width='100'></ColumnDirective>\n * <ColumnDirective field='name' headerText='Name' width='100'></ColumnDirective>\n * </ColumnsDirective>\n * <AggregatesDirective>\n * <AggregateDirective>\n * <AggregateColumnsDirective>\n * <AggregateColumnDirective field='ID' type='Min'></AggregateColumnsDirective>\n * </AggregateColumnsDirective>\n * </AggregateDirective>\n * </AggregatesDirective>\n * </TreeGridComponent>\n * ```\n */\n\nvar AggregateColumnDirective =\n/** @class */\nfunction (_super) {\n  __extends(AggregateColumnDirective, _super);\n\n  function AggregateColumnDirective() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AggregateColumnDirective.moduleName = 'aggregateColumn';\n  return AggregateColumnDirective;\n}(ComplexBase);\n\nexport { AggregateColumnDirective };\n\nvar AggregateColumnsDirective =\n/** @class */\nfunction (_super) {\n  __extends(AggregateColumnsDirective, _super);\n\n  function AggregateColumnsDirective() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AggregateColumnsDirective.propertyName = 'columns';\n  AggregateColumnsDirective.moduleName = 'aggregateColumns';\n  return AggregateColumnsDirective;\n}(ComplexBase);\n\nexport { AggregateColumnsDirective };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-react-treegrid/src/treegrid/aggregate-columns-directive.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","ComplexBase","AggregateColumnDirective","_super","apply","arguments","moduleName","AggregateColumnsDirective","propertyName"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,SAASI,WAAT,QAA4B,4BAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,wBAAwB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC5DhB,EAAAA,SAAS,CAACe,wBAAD,EAA2BC,MAA3B,CAAT;;AACA,WAASD,wBAAT,GAAoC;AAChC,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDH,EAAAA,wBAAwB,CAACI,UAAzB,GAAsC,iBAAtC;AACA,SAAOJ,wBAAP;AACH,CAP6C,CAO5CD,WAP4C,CAA9C;;AAQA,SAASC,wBAAT;;AACA,IAAIK,yBAAyB;AAAG;AAAe,UAAUJ,MAAV,EAAkB;AAC7DhB,EAAAA,SAAS,CAACoB,yBAAD,EAA4BJ,MAA5B,CAAT;;AACA,WAASI,yBAAT,GAAqC;AACjC,WAAOJ,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDE,EAAAA,yBAAyB,CAACC,YAA1B,GAAyC,SAAzC;AACAD,EAAAA,yBAAyB,CAACD,UAA1B,GAAuC,kBAAvC;AACA,SAAOC,yBAAP;AACH,CAR8C,CAQ7CN,WAR6C,CAA/C;;AASA,SAASM,yBAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `AggregateColumnDirective represent a aggregate column of the react TreeGrid.\n * ```tsx\n * <TreeGridComponent dataSource={data} allowPaging={true} allowSorting={true}>\n * <ColumnsDirective>\n * <ColumnDirective field='ID' width='100'></ColumnDirective>\n * <ColumnDirective field='name' headerText='Name' width='100'></ColumnDirective>\n * </ColumnsDirective>\n * <AggregatesDirective>\n * <AggregateDirective>\n * <AggregateColumnsDirective>\n * <AggregateColumnDirective field='ID' type='Min'></AggregateColumnsDirective>\n * </AggregateColumnsDirective>\n * </AggregateDirective>\n * </AggregatesDirective>\n * </TreeGridComponent>\n * ```\n */\nvar AggregateColumnDirective = /** @class */ (function (_super) {\n    __extends(AggregateColumnDirective, _super);\n    function AggregateColumnDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AggregateColumnDirective.moduleName = 'aggregateColumn';\n    return AggregateColumnDirective;\n}(ComplexBase));\nexport { AggregateColumnDirective };\nvar AggregateColumnsDirective = /** @class */ (function (_super) {\n    __extends(AggregateColumnsDirective, _super);\n    function AggregateColumnsDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AggregateColumnsDirective.propertyName = 'columns';\n    AggregateColumnsDirective.moduleName = 'aggregateColumns';\n    return AggregateColumnsDirective;\n}(ComplexBase));\nexport { AggregateColumnsDirective };\n"]},"metadata":{},"sourceType":"module"}