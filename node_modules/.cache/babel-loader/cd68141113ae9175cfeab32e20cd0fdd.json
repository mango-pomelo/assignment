{"ast":null,"code":"import { isNullOrUndefined, extend, getValue } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { extendArray, getPlainData, getParentData } from '../utils';\n/**\n * Performs CRUD update to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {string} columnName - Column field name\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\n\nexport function editAction(details, control, isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord) {\n  var value = details.value;\n  var action = details.action;\n  var changedRecords = 'changedRecords';\n  var i;\n  var j;\n  var addedRecords = 'addedRecords';\n  var batchChanges;\n  var key = control.grid.getPrimaryKeyFieldNames()[0];\n  var treeData = control.dataSource instanceof DataManager ? control.dataSource.dataSource.json : control.dataSource;\n  var modifiedData = [];\n  var originalData = value;\n  var isSkip = false;\n\n  if (control.editSettings.mode === 'Batch') {\n    batchChanges = control.grid.editModule.getBatchChanges();\n  }\n\n  if (action === 'add' || action === 'batchsave' && control.editSettings.mode === 'Batch' && batchChanges[addedRecords].length) {\n    var addAct = addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord);\n    value = addAct.value;\n    isSkip = addAct.isSkip;\n  }\n\n  if (value instanceof Array) {\n    modifiedData = extendArray(value);\n  } else {\n    modifiedData.push(extend({}, value));\n  }\n\n  if (!isSkip && (action !== 'add' || control.editSettings.newRowPosition !== 'Top' && control.editSettings.newRowPosition !== 'Bottom')) {\n    for (var k = 0; k < modifiedData.length; k++) {\n      if (typeof modifiedData[k][key] === 'object') {\n        modifiedData[k] = modifiedData[k][key];\n      }\n\n      var keys = modifiedData[k].taskData ? Object.keys(modifiedData[k].taskData) : Object.keys(modifiedData[k]);\n      i = treeData.length;\n\n      var _loop_1 = function () {\n        if (treeData[i][key] === modifiedData[k][key]) {\n          if (action === 'delete') {\n            var currentData_1 = treeData[i];\n            treeData.splice(i, 1);\n\n            if (isSelfReference) {\n              if (!isNullOrUndefined(currentData_1[control.parentIdMapping])) {\n                var parentData = control.flatData.filter(function (e) {\n                  return e[control.idMapping] === currentData_1[control.parentIdMapping];\n                })[0];\n                var childRecords = parentData ? parentData[control.childMapping] : [];\n\n                for (var p = childRecords.length - 1; p >= 0; p--) {\n                  if (childRecords[p][control.idMapping] === currentData_1[control.idMapping]) {\n                    childRecords.splice(p, 1);\n\n                    if (!childRecords.length) {\n                      parentData.hasChildRecords = false;\n                      updateParentRow(key, parentData, action, control, isSelfReference);\n                    }\n\n                    break;\n                  }\n                }\n              }\n\n              return \"break\";\n            }\n          } else {\n            if (action === 'edit') {\n              for (j = 0; j < keys.length; j++) {\n                if (Object.prototype.hasOwnProperty.call(treeData[i], keys[j]) && (control.editSettings.mode !== 'Cell' || !isNullOrUndefined(batchChanges) && batchChanges[changedRecords].length === 0 || keys[j] === columnName)) {\n                  var editedData = getParentData(control, modifiedData[k].uniqueID);\n                  treeData[i][keys[j]] = modifiedData[k][keys[j]];\n\n                  if (editedData && editedData.taskData) {\n                    editedData.taskData[keys[j]] = editedData[keys[j]] = treeData[i][keys[j]];\n                  }\n                }\n              }\n            } else if (action === 'add' || action === 'batchsave') {\n              var index = void 0;\n\n              if (control.editSettings.newRowPosition === 'Child') {\n                if (isSelfReference) {\n                  originalData.taskData[control.parentIdMapping] = treeData[i][control.idMapping];\n                  treeData.splice(i + 1, 0, originalData.taskData);\n                } else {\n                  if (!Object.prototype.hasOwnProperty.call(treeData[i], control.childMapping)) {\n                    treeData[i][control.childMapping] = [];\n                  }\n\n                  treeData[i][control.childMapping].push(originalData.taskData);\n                  updateParentRow(key, treeData[i], action, control, isSelfReference, originalData);\n                }\n              } else if (control.editSettings.newRowPosition === 'Below') {\n                treeData.splice(i + 1, 0, originalData.taskData);\n\n                if (!isNullOrUndefined(originalData.parentItem)) {\n                  updateParentRow(key, treeData[i + 1], action, control, isSelfReference, originalData);\n                }\n              } else if (!addRowIndex) {\n                index = 0;\n                treeData.splice(index, 0, originalData.taskData);\n              } else if (control.editSettings.newRowPosition === 'Above') {\n                treeData.splice(i, 0, originalData.taskData);\n\n                if (!isNullOrUndefined(originalData.parentItem)) {\n                  updateParentRow(key, treeData[i], action, control, isSelfReference, originalData);\n                }\n              }\n            }\n\n            return \"break\";\n          }\n        } else if (!isNullOrUndefined(treeData[i][control.childMapping])) {\n          if (removeChildRecords(treeData[i][control.childMapping], modifiedData[k], action, key, control, isSelfReference, originalData, columnName)) {\n            updateParentRow(key, treeData[i], action, control, isSelfReference);\n          }\n        }\n      };\n\n      while (i-- && i >= 0) {\n        var state_1 = _loop_1();\n\n        if (state_1 === \"break\") break;\n      }\n    }\n  }\n}\n/**\n * Performs Add action to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {Object[]} treeData - Tree Grid data source\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\n\nexport function addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord) {\n  var value;\n  var isSkip = false;\n  var currentViewRecords = control.grid.getCurrentViewRecords();\n  value = extend({}, details.value);\n  value = getPlainData(value);\n\n  switch (control.editSettings.newRowPosition) {\n    case 'Top':\n      treeData.unshift(value);\n      isSkip = true;\n      break;\n\n    case 'Bottom':\n      treeData.push(value);\n      isSkip = true;\n      break;\n\n    case 'Above':\n      if (!isNullOrUndefined(addRowRecord)) {\n        value = extend({}, addRowRecord);\n        value = getPlainData(value);\n      } else {\n        value = extend({}, currentViewRecords[addRowIndex + 1]);\n        value = getPlainData(value);\n      }\n\n      break;\n\n    case 'Below':\n    case 'Child':\n      if (!isNullOrUndefined(addRowRecord)) {\n        value = extend({}, addRowRecord);\n        value = getPlainData(value);\n      } else {\n        var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n        var currentdata = currentViewRecords[addRowIndex];\n\n        if (!isNullOrUndefined(currentdata) && currentdata[primaryKeys] === details.value[primaryKeys] || selectedIndex !== -1) {\n          value = extend({}, currentdata);\n        } else {\n          value = extend({}, details.value);\n        }\n\n        value = getPlainData(value);\n        var internalProperty = 'internalProperties';\n        control.editModule[internalProperty].taskData = value;\n      }\n\n      if (selectedIndex === -1) {\n        treeData.unshift(value);\n        isSkip = true;\n      }\n\n  }\n\n  return {\n    value: value,\n    isSkip: isSkip\n  };\n}\n/**\n * @param {ITreeData[]} childRecords - Child Records collection\n * @param {Object} modifiedData - Modified data in crud action\n * @param {string} action - crud action type\n * @param {string} key - Primary key field name\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether Self Referential data binding\n * @param {ITreeData} originalData - Non updated data from data source, of edited data\n * @param {string} columnName - column field name\n * @returns {boolean} Returns whether child records exists\n */\n\nexport function removeChildRecords(childRecords, modifiedData, action, key, control, isSelfReference, originalData, columnName) {\n  var isChildAll = false;\n  var j = childRecords.length;\n\n  while (j-- && j >= 0) {\n    if (childRecords[j][key] === modifiedData[key] || isSelfReference && childRecords[j][control.parentIdMapping] === modifiedData[control.idMapping]) {\n      if (action === 'edit') {\n        var keys = Object.keys(modifiedData);\n        var editedData = getParentData(control, modifiedData.uniqueID);\n\n        for (var i = 0; i < keys.length; i++) {\n          if (Object.prototype.hasOwnProperty.call(childRecords[j], keys[i]) && (control.editSettings.mode !== 'Cell' || keys[i] === columnName)) {\n            editedData[keys[i]] = editedData.taskData[keys[i]] = childRecords[j][keys[i]] = modifiedData[keys[i]];\n\n            if (control.grid.editSettings.mode === 'Normal' && control.editSettings.mode === 'Cell') {\n              var editModule = 'editModule';\n              control.grid.editModule[editModule].editRowIndex = modifiedData.index;\n              control.grid.editModule[editModule].updateCurrentViewData(modifiedData);\n            }\n          }\n        }\n\n        break;\n      } else if (action === 'add' || action === 'batchsave') {\n        if (control.editSettings.newRowPosition === 'Child') {\n          if (isSelfReference) {\n            originalData[control.parentIdMapping] = childRecords[j][control.idMapping];\n            childRecords.splice(j + 1, 0, originalData);\n            updateParentRow(key, childRecords[j], action, control, isSelfReference, originalData);\n          } else {\n            if (!Object.prototype.hasOwnProperty.call(childRecords[j], control.childMapping)) {\n              childRecords[j][control.childMapping] = [];\n            }\n\n            childRecords[j][control.childMapping].push(originalData.taskData);\n            updateParentRow(key, childRecords[j], action, control, isSelfReference, originalData);\n          }\n        } else if (control.editSettings.newRowPosition === 'Above') {\n          childRecords.splice(j, 0, originalData.taskData);\n\n          if (!isNullOrUndefined(originalData.parentItem)) {\n            updateParentRow(key, childRecords[j], action, control, isSelfReference, originalData);\n          }\n        } else if (control.editSettings.newRowPosition === 'Below') {\n          childRecords.splice(j + 1, 0, originalData.taskData);\n\n          if (!isNullOrUndefined(originalData.parentItem)) {\n            updateParentRow(key, childRecords[j], action, control, isSelfReference, originalData);\n          }\n        }\n      } else {\n        childRecords.splice(j, 1);\n\n        if (!childRecords.length) {\n          isChildAll = true;\n        }\n      }\n    } else if (!isNullOrUndefined(childRecords[j][control.childMapping])) {\n      if (removeChildRecords(childRecords[j][control.childMapping], modifiedData, action, key, control, isSelfReference, originalData, columnName)) {\n        updateParentRow(key, childRecords[j], action, control, isSelfReference);\n      }\n    }\n  }\n\n  return isChildAll;\n}\n/**\n * @param {string} key - Primary key field name\n * @param {ITreeData} record - Parent Record which has to be updated\n * @param {string} action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether self referential data binding\n * @param {ITreeData} child - Specifies child record\n * @returns {void}\n */\n\nexport function updateParentRow(key, record, action, control, isSelfReference, child) {\n  if ((control.editSettings.newRowPosition === 'Above' || control.editSettings.newRowPosition === 'Below') && (action === 'add' || action === 'batchsave') && !isNullOrUndefined(child.parentItem)) {\n    var parentData = getParentData(control, child.parentItem.uniqueID);\n    parentData.childRecords.push(child);\n  } else {\n    var currentRecords = control.grid.getCurrentViewRecords();\n    var index_1;\n    currentRecords.map(function (e, i) {\n      if (e[key] === record[key]) {\n        index_1 = i;\n        return;\n      }\n    });\n\n    if (!isNullOrUndefined(index_1)) {\n      record = currentRecords[index_1];\n    }\n\n    if (control.enableVirtualization && isNullOrUndefined(record) && !isNullOrUndefined(child)) {\n      record = getValue('uniqueIDCollection.' + child.parentUniqueID, control);\n    }\n\n    record.hasChildRecords = false;\n\n    if (action === 'add' || action === 'batchsave') {\n      record.expanded = true;\n      record.hasChildRecords = true;\n\n      if (control.sortSettings.columns.length && isNullOrUndefined(child)) {\n        child = currentRecords.filter(function (e) {\n          if (e.parentUniqueID === record.uniqueID) {\n            return e;\n          } else {\n            return null;\n          }\n        });\n      }\n\n      var childRecords = child ? child instanceof Array ? child[0] : child : currentRecords[index_1 + 1];\n\n      if (control.editSettings.newRowPosition !== 'Below') {\n        if (!Object.prototype.hasOwnProperty.call(record, 'childRecords')) {\n          record.childRecords = [];\n        } else {\n          if (!isNullOrUndefined(child) && record[key] !== child[key]) {\n            record.childRecords.push(child);\n          }\n        }\n\n        if (record.childRecords.indexOf(childRecords) === -1 && record[key] !== child[key]) {\n          record.childRecords.unshift(childRecords);\n        }\n\n        if (isSelfReference) {\n          if (!Object.prototype.hasOwnProperty.call(record, control.childMapping)) {\n            record[control.childMapping] = [];\n          }\n\n          if (record[control.childMapping].indexOf(childRecords) === -1 && record[key] !== child[key]) {\n            record[control.childMapping].unshift(childRecords);\n          }\n        }\n      }\n    }\n\n    var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n    var data = control.grid.dataSource instanceof DataManager ? control.grid.dataSource.dataSource.json : control.grid.dataSource;\n\n    for (var i = 0; i < data.length; i++) {\n      if (data[i][primaryKeys] === record[primaryKeys]) {\n        data[i] = record;\n        break;\n      }\n    }\n\n    control.grid.setRowData(key, record);\n    var row = control.getRowByIndex(index_1);\n\n    if (control.editSettings.mode === 'Batch') {\n      row = control.getRows()[control.grid.getRowIndexByPrimaryKey(record[key])];\n    }\n\n    var movableRow = void 0;\n\n    if (control.frozenRows || control.getFrozenColumns()) {\n      movableRow = control.getMovableRowByIndex(index_1);\n    }\n\n    if (!control.enableVirtualization && !isNullOrUndefined(row) || !isNullOrUndefined(movableRow)) {\n      var index_2 = control.treeColumnIndex;\n\n      if (control.allowRowDragAndDrop && control.enableImmutableMode) {\n        index_2 = index_2 + 1;\n      }\n\n      control.renderModule.cellRender({\n        data: record,\n        cell: row.cells[index_2] ? row.cells[index_2] : movableRow.cells[index_2 - control.getFrozenColumns()],\n        column: control.grid.getColumns()[control.treeColumnIndex],\n        requestType: action\n      });\n    }\n  }\n}","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/crud-actions.js"],"names":["isNullOrUndefined","extend","getValue","DataManager","extendArray","getPlainData","getParentData","editAction","details","control","isSelfReference","addRowIndex","selectedIndex","columnName","addRowRecord","value","action","changedRecords","i","j","addedRecords","batchChanges","key","grid","getPrimaryKeyFieldNames","treeData","dataSource","json","modifiedData","originalData","isSkip","editSettings","mode","editModule","getBatchChanges","length","addAct","addAction","Array","push","newRowPosition","k","keys","taskData","Object","_loop_1","currentData_1","splice","parentIdMapping","parentData","flatData","filter","e","idMapping","childRecords","childMapping","p","hasChildRecords","updateParentRow","prototype","hasOwnProperty","call","editedData","uniqueID","index","parentItem","removeChildRecords","state_1","currentViewRecords","getCurrentViewRecords","unshift","primaryKeys","currentdata","internalProperty","isChildAll","editRowIndex","updateCurrentViewData","record","child","currentRecords","index_1","map","enableVirtualization","parentUniqueID","expanded","sortSettings","columns","indexOf","data","setRowData","row","getRowByIndex","getRows","getRowIndexByPrimaryKey","movableRow","frozenRows","getFrozenColumns","getMovableRowByIndex","index_2","treeColumnIndex","allowRowDragAndDrop","enableImmutableMode","renderModule","cellRender","cell","cells","column","getColumns","requestType"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,MAA5B,EAAoCC,QAApC,QAAoD,sBAApD;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,aAApC,QAAyD,UAAzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,OAA7B,EAAsCC,eAAtC,EAAuDC,WAAvD,EAAoEC,aAApE,EAAmFC,UAAnF,EAA+FC,YAA/F,EAA6G;AAChH,MAAIC,KAAK,GAAGP,OAAO,CAACO,KAApB;AACA,MAAIC,MAAM,GAAGR,OAAO,CAACQ,MAArB;AACA,MAAIC,cAAc,GAAG,gBAArB;AACA,MAAIC,CAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,YAAY,GAAG,cAAnB;AACA,MAAIC,YAAJ;AACA,MAAIC,GAAG,GAAGb,OAAO,CAACc,IAAR,CAAaC,uBAAb,GAAuC,CAAvC,CAAV;AACA,MAAIC,QAAQ,GAAGhB,OAAO,CAACiB,UAAR,YAA8BvB,WAA9B,GACXM,OAAO,CAACiB,UAAR,CAAmBA,UAAnB,CAA8BC,IADnB,GAC0BlB,OAAO,CAACiB,UADjD;AAEA,MAAIE,YAAY,GAAG,EAAnB;AACA,MAAIC,YAAY,GAAGd,KAAnB;AACA,MAAIe,MAAM,GAAG,KAAb;;AACA,MAAIrB,OAAO,CAACsB,YAAR,CAAqBC,IAArB,KAA8B,OAAlC,EAA2C;AACvCX,IAAAA,YAAY,GAAGZ,OAAO,CAACc,IAAR,CAAaU,UAAb,CAAwBC,eAAxB,EAAf;AACH;;AACD,MAAIlB,MAAM,KAAK,KAAX,IAAqBA,MAAM,KAAK,WAAX,IAA2BP,OAAO,CAACsB,YAAR,CAAqBC,IAArB,KAA8B,OAA9B,IAC7CX,YAAY,CAACD,YAAD,CAAZ,CAA2Be,MADlC,EAC4C;AACxC,QAAIC,MAAM,GAAGC,SAAS,CAAC7B,OAAD,EAAUiB,QAAV,EAAoBhB,OAApB,EAA6BC,eAA7B,EAA8CC,WAA9C,EAA2DC,aAA3D,EAA0EE,YAA1E,CAAtB;AACAC,IAAAA,KAAK,GAAGqB,MAAM,CAACrB,KAAf;AACAe,IAAAA,MAAM,GAAGM,MAAM,CAACN,MAAhB;AACH;;AACD,MAAIf,KAAK,YAAYuB,KAArB,EAA4B;AACxBV,IAAAA,YAAY,GAAGxB,WAAW,CAACW,KAAD,CAA1B;AACH,GAFD,MAGK;AACDa,IAAAA,YAAY,CAACW,IAAb,CAAkBtC,MAAM,CAAC,EAAD,EAAKc,KAAL,CAAxB;AACH;;AACD,MAAI,CAACe,MAAD,KAAYd,MAAM,KAAK,KAAX,IACXP,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,KAAxC,IAAiD/B,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,QAD1F,CAAJ,EAC0G;AACtG,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,YAAY,CAACO,MAAjC,EAAyCM,CAAC,EAA1C,EAA8C;AAC1C,UAAI,OAAQb,YAAY,CAACa,CAAD,CAAZ,CAAgBnB,GAAhB,CAAR,KAAkC,QAAtC,EAAgD;AAC5CM,QAAAA,YAAY,CAACa,CAAD,CAAZ,GAAkBb,YAAY,CAACa,CAAD,CAAZ,CAAgBnB,GAAhB,CAAlB;AACH;;AACD,UAAIoB,IAAI,GAAGd,YAAY,CAACa,CAAD,CAAZ,CAAgBE,QAAhB,GAA2BC,MAAM,CAACF,IAAP,CAAYd,YAAY,CAACa,CAAD,CAAZ,CAAgBE,QAA5B,CAA3B,GACPC,MAAM,CAACF,IAAP,CAAYd,YAAY,CAACa,CAAD,CAAxB,CADJ;AAEAvB,MAAAA,CAAC,GAAGO,QAAQ,CAACU,MAAb;;AACA,UAAIU,OAAO,GAAG,YAAY;AACtB,YAAIpB,QAAQ,CAACP,CAAD,CAAR,CAAYI,GAAZ,MAAqBM,YAAY,CAACa,CAAD,CAAZ,CAAgBnB,GAAhB,CAAzB,EAA+C;AAC3C,cAAIN,MAAM,KAAK,QAAf,EAAyB;AACrB,gBAAI8B,aAAa,GAAGrB,QAAQ,CAACP,CAAD,CAA5B;AACAO,YAAAA,QAAQ,CAACsB,MAAT,CAAgB7B,CAAhB,EAAmB,CAAnB;;AACA,gBAAIR,eAAJ,EAAqB;AACjB,kBAAI,CAACV,iBAAiB,CAAC8C,aAAa,CAACrC,OAAO,CAACuC,eAAT,CAAd,CAAtB,EAAgE;AAC5D,oBAAIC,UAAU,GAAGxC,OAAO,CAACyC,QAAR,CAAiBC,MAAjB,CAAwB,UAAUC,CAAV,EAAa;AAClD,yBAAOA,CAAC,CAAC3C,OAAO,CAAC4C,SAAT,CAAD,KAAyBP,aAAa,CAACrC,OAAO,CAACuC,eAAT,CAA7C;AACH,iBAFgB,EAEd,CAFc,CAAjB;AAGA,oBAAIM,YAAY,GAAGL,UAAU,GAAGA,UAAU,CAACxC,OAAO,CAAC8C,YAAT,CAAb,GAAsC,EAAnE;;AACA,qBAAK,IAAIC,CAAC,GAAGF,YAAY,CAACnB,MAAb,GAAsB,CAAnC,EAAsCqB,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AAC/C,sBAAIF,YAAY,CAACE,CAAD,CAAZ,CAAgB/C,OAAO,CAAC4C,SAAxB,MAAuCP,aAAa,CAACrC,OAAO,CAAC4C,SAAT,CAAxD,EAA6E;AACzEC,oBAAAA,YAAY,CAACP,MAAb,CAAoBS,CAApB,EAAuB,CAAvB;;AACA,wBAAI,CAACF,YAAY,CAACnB,MAAlB,EAA0B;AACtBc,sBAAAA,UAAU,CAACQ,eAAX,GAA6B,KAA7B;AACAC,sBAAAA,eAAe,CAACpC,GAAD,EAAM2B,UAAN,EAAkBjC,MAAlB,EAA0BP,OAA1B,EAAmCC,eAAnC,CAAf;AACH;;AACD;AACH;AACJ;AACJ;;AACD,qBAAO,OAAP;AACH;AACJ,WAtBD,MAuBK;AACD,gBAAIM,MAAM,KAAK,MAAf,EAAuB;AACnB,mBAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuB,IAAI,CAACP,MAArB,EAA6BhB,CAAC,EAA9B,EAAkC;AAC9B,oBAAIyB,MAAM,CAACe,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCpC,QAAQ,CAACP,CAAD,CAA7C,EAAkDwB,IAAI,CAACvB,CAAD,CAAtD,MAAgEV,OAAO,CAACsB,YAAR,CAAqBC,IAArB,KAA8B,MAA9B,IAC5D,CAAChC,iBAAiB,CAACqB,YAAD,CAAlB,IAAoCA,YAAY,CAACJ,cAAD,CAAZ,CAA6BkB,MAA7B,KAAwC,CADjB,IAE5DO,IAAI,CAACvB,CAAD,CAAJ,KAAYN,UAFf,CAAJ,EAEgC;AAC5B,sBAAIiD,UAAU,GAAGxD,aAAa,CAACG,OAAD,EAAUmB,YAAY,CAACa,CAAD,CAAZ,CAAgBsB,QAA1B,CAA9B;AACAtC,kBAAAA,QAAQ,CAACP,CAAD,CAAR,CAAYwB,IAAI,CAACvB,CAAD,CAAhB,IAAuBS,YAAY,CAACa,CAAD,CAAZ,CAAgBC,IAAI,CAACvB,CAAD,CAApB,CAAvB;;AACA,sBAAI2C,UAAU,IAAIA,UAAU,CAACnB,QAA7B,EAAuC;AACnCmB,oBAAAA,UAAU,CAACnB,QAAX,CAAoBD,IAAI,CAACvB,CAAD,CAAxB,IAA+B2C,UAAU,CAACpB,IAAI,CAACvB,CAAD,CAAL,CAAV,GAAsBM,QAAQ,CAACP,CAAD,CAAR,CAAYwB,IAAI,CAACvB,CAAD,CAAhB,CAArD;AACH;AACJ;AACJ;AACJ,aAZD,MAaK,IAAIH,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,WAAnC,EAAgD;AACjD,kBAAIgD,KAAK,GAAG,KAAK,CAAjB;;AACA,kBAAIvD,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,OAA5C,EAAqD;AACjD,oBAAI9B,eAAJ,EAAqB;AACjBmB,kBAAAA,YAAY,CAACc,QAAb,CAAsBlC,OAAO,CAACuC,eAA9B,IAAiDvB,QAAQ,CAACP,CAAD,CAAR,CAAYT,OAAO,CAAC4C,SAApB,CAAjD;AACA5B,kBAAAA,QAAQ,CAACsB,MAAT,CAAgB7B,CAAC,GAAG,CAApB,EAAuB,CAAvB,EAA0BW,YAAY,CAACc,QAAvC;AACH,iBAHD,MAIK;AACD,sBAAI,CAACC,MAAM,CAACe,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCpC,QAAQ,CAACP,CAAD,CAA7C,EAAkDT,OAAO,CAAC8C,YAA1D,CAAL,EAA8E;AAC1E9B,oBAAAA,QAAQ,CAACP,CAAD,CAAR,CAAYT,OAAO,CAAC8C,YAApB,IAAoC,EAApC;AACH;;AACD9B,kBAAAA,QAAQ,CAACP,CAAD,CAAR,CAAYT,OAAO,CAAC8C,YAApB,EAAkChB,IAAlC,CAAuCV,YAAY,CAACc,QAApD;AACAe,kBAAAA,eAAe,CAACpC,GAAD,EAAMG,QAAQ,CAACP,CAAD,CAAd,EAAmBF,MAAnB,EAA2BP,OAA3B,EAAoCC,eAApC,EAAqDmB,YAArD,CAAf;AACH;AACJ,eAZD,MAaK,IAAIpB,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,OAA5C,EAAqD;AACtDf,gBAAAA,QAAQ,CAACsB,MAAT,CAAgB7B,CAAC,GAAG,CAApB,EAAuB,CAAvB,EAA0BW,YAAY,CAACc,QAAvC;;AACA,oBAAI,CAAC3C,iBAAiB,CAAC6B,YAAY,CAACoC,UAAd,CAAtB,EAAiD;AAC7CP,kBAAAA,eAAe,CAACpC,GAAD,EAAMG,QAAQ,CAACP,CAAC,GAAG,CAAL,CAAd,EAAuBF,MAAvB,EAA+BP,OAA/B,EAAwCC,eAAxC,EAAyDmB,YAAzD,CAAf;AACH;AACJ,eALI,MAMA,IAAI,CAAClB,WAAL,EAAkB;AACnBqD,gBAAAA,KAAK,GAAG,CAAR;AACAvC,gBAAAA,QAAQ,CAACsB,MAAT,CAAgBiB,KAAhB,EAAuB,CAAvB,EAA0BnC,YAAY,CAACc,QAAvC;AACH,eAHI,MAIA,IAAIlC,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,OAA5C,EAAqD;AACtDf,gBAAAA,QAAQ,CAACsB,MAAT,CAAgB7B,CAAhB,EAAmB,CAAnB,EAAsBW,YAAY,CAACc,QAAnC;;AACA,oBAAI,CAAC3C,iBAAiB,CAAC6B,YAAY,CAACoC,UAAd,CAAtB,EAAiD;AAC7CP,kBAAAA,eAAe,CAACpC,GAAD,EAAMG,QAAQ,CAACP,CAAD,CAAd,EAAmBF,MAAnB,EAA2BP,OAA3B,EAAoCC,eAApC,EAAqDmB,YAArD,CAAf;AACH;AACJ;AACJ;;AACD,mBAAO,OAAP;AACH;AACJ,SAxED,MAyEK,IAAI,CAAC7B,iBAAiB,CAACyB,QAAQ,CAACP,CAAD,CAAR,CAAYT,OAAO,CAAC8C,YAApB,CAAD,CAAtB,EAA2D;AAC5D,cAAIW,kBAAkB,CAACzC,QAAQ,CAACP,CAAD,CAAR,CAAYT,OAAO,CAAC8C,YAApB,CAAD,EAAoC3B,YAAY,CAACa,CAAD,CAAhD,EAAqDzB,MAArD,EAA6DM,GAA7D,EAAkEb,OAAlE,EAA2EC,eAA3E,EAA4FmB,YAA5F,EAA0GhB,UAA1G,CAAtB,EAA6I;AACzI6C,YAAAA,eAAe,CAACpC,GAAD,EAAMG,QAAQ,CAACP,CAAD,CAAd,EAAmBF,MAAnB,EAA2BP,OAA3B,EAAoCC,eAApC,CAAf;AACH;AACJ;AACJ,OA/ED;;AAgFA,aAAOQ,CAAC,MAAMA,CAAC,IAAI,CAAnB,EAAsB;AAClB,YAAIiD,OAAO,GAAGtB,OAAO,EAArB;;AACA,YAAIsB,OAAO,KAAK,OAAhB,EACI;AACP;AACJ;AACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS9B,SAAT,CAAmB7B,OAAnB,EAA4BiB,QAA5B,EAAsChB,OAAtC,EAA+CC,eAA/C,EAAgEC,WAAhE,EAA6EC,aAA7E,EAA4FE,YAA5F,EAA0G;AAC7G,MAAIC,KAAJ;AACA,MAAIe,MAAM,GAAG,KAAb;AACA,MAAIsC,kBAAkB,GAAG3D,OAAO,CAACc,IAAR,CAAa8C,qBAAb,EAAzB;AACAtD,EAAAA,KAAK,GAAGd,MAAM,CAAC,EAAD,EAAKO,OAAO,CAACO,KAAb,CAAd;AACAA,EAAAA,KAAK,GAAGV,YAAY,CAACU,KAAD,CAApB;;AACA,UAAQN,OAAO,CAACsB,YAAR,CAAqBS,cAA7B;AACI,SAAK,KAAL;AACIf,MAAAA,QAAQ,CAAC6C,OAAT,CAAiBvD,KAAjB;AACAe,MAAAA,MAAM,GAAG,IAAT;AACA;;AACJ,SAAK,QAAL;AACIL,MAAAA,QAAQ,CAACc,IAAT,CAAcxB,KAAd;AACAe,MAAAA,MAAM,GAAG,IAAT;AACA;;AACJ,SAAK,OAAL;AACI,UAAI,CAAC9B,iBAAiB,CAACc,YAAD,CAAtB,EAAsC;AAClCC,QAAAA,KAAK,GAAGd,MAAM,CAAC,EAAD,EAAKa,YAAL,CAAd;AACAC,QAAAA,KAAK,GAAGV,YAAY,CAACU,KAAD,CAApB;AACH,OAHD,MAIK;AACDA,QAAAA,KAAK,GAAGd,MAAM,CAAC,EAAD,EAAKmE,kBAAkB,CAACzD,WAAW,GAAG,CAAf,CAAvB,CAAd;AACAI,QAAAA,KAAK,GAAGV,YAAY,CAACU,KAAD,CAApB;AACH;;AACD;;AACJ,SAAK,OAAL;AACA,SAAK,OAAL;AACI,UAAI,CAACf,iBAAiB,CAACc,YAAD,CAAtB,EAAsC;AAClCC,QAAAA,KAAK,GAAGd,MAAM,CAAC,EAAD,EAAKa,YAAL,CAAd;AACAC,QAAAA,KAAK,GAAGV,YAAY,CAACU,KAAD,CAApB;AACH,OAHD,MAIK;AACD,YAAIwD,WAAW,GAAG9D,OAAO,CAACc,IAAR,CAAaC,uBAAb,GAAuC,CAAvC,CAAlB;AACA,YAAIgD,WAAW,GAAGJ,kBAAkB,CAACzD,WAAD,CAApC;;AACA,YAAI,CAACX,iBAAiB,CAACwE,WAAD,CAAlB,IAAmCA,WAAW,CAACD,WAAD,CAAX,KAA6B/D,OAAO,CAACO,KAAR,CAAcwD,WAAd,CAAhE,IAA8F3D,aAAa,KAAK,CAAC,CAArH,EAAwH;AACpHG,UAAAA,KAAK,GAAGd,MAAM,CAAC,EAAD,EAAKuE,WAAL,CAAd;AACH,SAFD,MAGK;AACDzD,UAAAA,KAAK,GAAGd,MAAM,CAAC,EAAD,EAAKO,OAAO,CAACO,KAAb,CAAd;AACH;;AACDA,QAAAA,KAAK,GAAGV,YAAY,CAACU,KAAD,CAApB;AACA,YAAI0D,gBAAgB,GAAG,oBAAvB;AACAhE,QAAAA,OAAO,CAACwB,UAAR,CAAmBwC,gBAAnB,EAAqC9B,QAArC,GAAgD5B,KAAhD;AACH;;AACD,UAAIH,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACtBa,QAAAA,QAAQ,CAAC6C,OAAT,CAAiBvD,KAAjB;AACAe,QAAAA,MAAM,GAAG,IAAT;AACH;;AAzCT;;AA2CA,SAAO;AAAEf,IAAAA,KAAK,EAAEA,KAAT;AAAgBe,IAAAA,MAAM,EAAEA;AAAxB,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoC,kBAAT,CAA4BZ,YAA5B,EAA0C1B,YAA1C,EAAwDZ,MAAxD,EAAgEM,GAAhE,EAAqEb,OAArE,EAA8EC,eAA9E,EAA+FmB,YAA/F,EAA6GhB,UAA7G,EAAyH;AAC5H,MAAI6D,UAAU,GAAG,KAAjB;AACA,MAAIvD,CAAC,GAAGmC,YAAY,CAACnB,MAArB;;AACA,SAAOhB,CAAC,MAAMA,CAAC,IAAI,CAAnB,EAAsB;AAClB,QAAImC,YAAY,CAACnC,CAAD,CAAZ,CAAgBG,GAAhB,MAAyBM,YAAY,CAACN,GAAD,CAArC,IACCZ,eAAe,IAAI4C,YAAY,CAACnC,CAAD,CAAZ,CAAgBV,OAAO,CAACuC,eAAxB,MAA6CpB,YAAY,CAACnB,OAAO,CAAC4C,SAAT,CADjF,EACuG;AACnG,UAAIrC,MAAM,KAAK,MAAf,EAAuB;AACnB,YAAI0B,IAAI,GAAGE,MAAM,CAACF,IAAP,CAAYd,YAAZ,CAAX;AACA,YAAIkC,UAAU,GAAGxD,aAAa,CAACG,OAAD,EAAUmB,YAAY,CAACmC,QAAvB,CAA9B;;AACA,aAAK,IAAI7C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwB,IAAI,CAACP,MAAzB,EAAiCjB,CAAC,EAAlC,EAAsC;AAClC,cAAI0B,MAAM,CAACe,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,YAAY,CAACnC,CAAD,CAAjD,EAAsDuB,IAAI,CAACxB,CAAD,CAA1D,MAAmET,OAAO,CAACsB,YAAR,CAAqBC,IAArB,KAA8B,MAA9B,IAAwCU,IAAI,CAACxB,CAAD,CAAJ,KAAYL,UAAvH,CAAJ,EAAwI;AACpIiD,YAAAA,UAAU,CAACpB,IAAI,CAACxB,CAAD,CAAL,CAAV,GAAsB4C,UAAU,CAACnB,QAAX,CAAoBD,IAAI,CAACxB,CAAD,CAAxB,IAA+BoC,YAAY,CAACnC,CAAD,CAAZ,CAAgBuB,IAAI,CAACxB,CAAD,CAApB,IAA2BU,YAAY,CAACc,IAAI,CAACxB,CAAD,CAAL,CAA5F;;AACA,gBAAIT,OAAO,CAACc,IAAR,CAAaQ,YAAb,CAA0BC,IAA1B,KAAmC,QAAnC,IAA+CvB,OAAO,CAACsB,YAAR,CAAqBC,IAArB,KAA8B,MAAjF,EAAyF;AACrF,kBAAIC,UAAU,GAAG,YAAjB;AACAxB,cAAAA,OAAO,CAACc,IAAR,CAAaU,UAAb,CAAwBA,UAAxB,EAAoC0C,YAApC,GAAmD/C,YAAY,CAACoC,KAAhE;AACAvD,cAAAA,OAAO,CAACc,IAAR,CAAaU,UAAb,CAAwBA,UAAxB,EAAoC2C,qBAApC,CAA0DhD,YAA1D;AACH;AACJ;AACJ;;AACD;AACH,OAdD,MAeK,IAAIZ,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,WAAnC,EAAgD;AACjD,YAAIP,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,OAA5C,EAAqD;AACjD,cAAI9B,eAAJ,EAAqB;AACjBmB,YAAAA,YAAY,CAACpB,OAAO,CAACuC,eAAT,CAAZ,GAAwCM,YAAY,CAACnC,CAAD,CAAZ,CAAgBV,OAAO,CAAC4C,SAAxB,CAAxC;AACAC,YAAAA,YAAY,CAACP,MAAb,CAAoB5B,CAAC,GAAG,CAAxB,EAA2B,CAA3B,EAA8BU,YAA9B;AACA6B,YAAAA,eAAe,CAACpC,GAAD,EAAMgC,YAAY,CAACnC,CAAD,CAAlB,EAAuBH,MAAvB,EAA+BP,OAA/B,EAAwCC,eAAxC,EAAyDmB,YAAzD,CAAf;AACH,WAJD,MAKK;AACD,gBAAI,CAACe,MAAM,CAACe,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,YAAY,CAACnC,CAAD,CAAjD,EAAsDV,OAAO,CAAC8C,YAA9D,CAAL,EAAkF;AAC9ED,cAAAA,YAAY,CAACnC,CAAD,CAAZ,CAAgBV,OAAO,CAAC8C,YAAxB,IAAwC,EAAxC;AACH;;AACDD,YAAAA,YAAY,CAACnC,CAAD,CAAZ,CAAgBV,OAAO,CAAC8C,YAAxB,EAAsChB,IAAtC,CAA2CV,YAAY,CAACc,QAAxD;AACAe,YAAAA,eAAe,CAACpC,GAAD,EAAMgC,YAAY,CAACnC,CAAD,CAAlB,EAAuBH,MAAvB,EAA+BP,OAA/B,EAAwCC,eAAxC,EAAyDmB,YAAzD,CAAf;AACH;AACJ,SAbD,MAcK,IAAIpB,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,OAA5C,EAAqD;AACtDc,UAAAA,YAAY,CAACP,MAAb,CAAoB5B,CAApB,EAAuB,CAAvB,EAA0BU,YAAY,CAACc,QAAvC;;AACA,cAAI,CAAC3C,iBAAiB,CAAC6B,YAAY,CAACoC,UAAd,CAAtB,EAAiD;AAC7CP,YAAAA,eAAe,CAACpC,GAAD,EAAMgC,YAAY,CAACnC,CAAD,CAAlB,EAAuBH,MAAvB,EAA+BP,OAA/B,EAAwCC,eAAxC,EAAyDmB,YAAzD,CAAf;AACH;AACJ,SALI,MAMA,IAAIpB,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,OAA5C,EAAqD;AACtDc,UAAAA,YAAY,CAACP,MAAb,CAAoB5B,CAAC,GAAG,CAAxB,EAA2B,CAA3B,EAA8BU,YAAY,CAACc,QAA3C;;AACA,cAAI,CAAC3C,iBAAiB,CAAC6B,YAAY,CAACoC,UAAd,CAAtB,EAAiD;AAC7CP,YAAAA,eAAe,CAACpC,GAAD,EAAMgC,YAAY,CAACnC,CAAD,CAAlB,EAAuBH,MAAvB,EAA+BP,OAA/B,EAAwCC,eAAxC,EAAyDmB,YAAzD,CAAf;AACH;AACJ;AACJ,OA3BI,MA4BA;AACDyB,QAAAA,YAAY,CAACP,MAAb,CAAoB5B,CAApB,EAAuB,CAAvB;;AACA,YAAI,CAACmC,YAAY,CAACnB,MAAlB,EAA0B;AACtBuC,UAAAA,UAAU,GAAG,IAAb;AACH;AACJ;AACJ,KAnDD,MAoDK,IAAI,CAAC1E,iBAAiB,CAACsD,YAAY,CAACnC,CAAD,CAAZ,CAAgBV,OAAO,CAAC8C,YAAxB,CAAD,CAAtB,EAA+D;AAChE,UAAIW,kBAAkB,CAACZ,YAAY,CAACnC,CAAD,CAAZ,CAAgBV,OAAO,CAAC8C,YAAxB,CAAD,EAAwC3B,YAAxC,EAAsDZ,MAAtD,EAA8DM,GAA9D,EAAmEb,OAAnE,EAA4EC,eAA5E,EAA6FmB,YAA7F,EAA2GhB,UAA3G,CAAtB,EAA8I;AAC1I6C,QAAAA,eAAe,CAACpC,GAAD,EAAMgC,YAAY,CAACnC,CAAD,CAAlB,EAAuBH,MAAvB,EAA+BP,OAA/B,EAAwCC,eAAxC,CAAf;AACH;AACJ;AACJ;;AACD,SAAOgE,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAShB,eAAT,CAAyBpC,GAAzB,EAA8BuD,MAA9B,EAAsC7D,MAAtC,EAA8CP,OAA9C,EAAuDC,eAAvD,EAAwEoE,KAAxE,EAA+E;AAClF,MAAI,CAACrE,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,OAAxC,IAAmD/B,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,OAA5F,MACKxB,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,WADpC,KACqD,CAAChB,iBAAiB,CAAC8E,KAAK,CAACb,UAAP,CAD3E,EAC+F;AAC3F,QAAIhB,UAAU,GAAG3C,aAAa,CAACG,OAAD,EAAUqE,KAAK,CAACb,UAAN,CAAiBF,QAA3B,CAA9B;AACAd,IAAAA,UAAU,CAACK,YAAX,CAAwBf,IAAxB,CAA6BuC,KAA7B;AACH,GAJD,MAKK;AACD,QAAIC,cAAc,GAAGtE,OAAO,CAACc,IAAR,CAAa8C,qBAAb,EAArB;AACA,QAAIW,OAAJ;AACAD,IAAAA,cAAc,CAACE,GAAf,CAAmB,UAAU7B,CAAV,EAAalC,CAAb,EAAgB;AAAE,UAAIkC,CAAC,CAAC9B,GAAD,CAAD,KAAWuD,MAAM,CAACvD,GAAD,CAArB,EAA4B;AAC7D0D,QAAAA,OAAO,GAAG9D,CAAV;AACA;AACH;AAAE,KAHH;;AAIA,QAAI,CAAClB,iBAAiB,CAACgF,OAAD,CAAtB,EAAiC;AAC7BH,MAAAA,MAAM,GAAGE,cAAc,CAACC,OAAD,CAAvB;AACH;;AACD,QAAIvE,OAAO,CAACyE,oBAAR,IAAgClF,iBAAiB,CAAC6E,MAAD,CAAjD,IAA6D,CAAC7E,iBAAiB,CAAC8E,KAAD,CAAnF,EAA4F;AACxFD,MAAAA,MAAM,GAAG3E,QAAQ,CAAC,wBAAwB4E,KAAK,CAACK,cAA/B,EAA+C1E,OAA/C,CAAjB;AACH;;AACDoE,IAAAA,MAAM,CAACpB,eAAP,GAAyB,KAAzB;;AACA,QAAIzC,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,WAAnC,EAAgD;AAC5C6D,MAAAA,MAAM,CAACO,QAAP,GAAkB,IAAlB;AACAP,MAAAA,MAAM,CAACpB,eAAP,GAAyB,IAAzB;;AACA,UAAIhD,OAAO,CAAC4E,YAAR,CAAqBC,OAArB,CAA6BnD,MAA7B,IAAuCnC,iBAAiB,CAAC8E,KAAD,CAA5D,EAAqE;AACjEA,QAAAA,KAAK,GAAGC,cAAc,CAAC5B,MAAf,CAAsB,UAAUC,CAAV,EAAa;AACvC,cAAIA,CAAC,CAAC+B,cAAF,KAAqBN,MAAM,CAACd,QAAhC,EAA0C;AACtC,mBAAOX,CAAP;AACH,WAFD,MAGK;AACD,mBAAO,IAAP;AACH;AACJ,SAPO,CAAR;AAQH;;AACD,UAAIE,YAAY,GAAGwB,KAAK,GAAGA,KAAK,YAAYxC,KAAjB,GAAyBwC,KAAK,CAAC,CAAD,CAA9B,GAAoCA,KAAvC,GAA+CC,cAAc,CAACC,OAAO,GAAG,CAAX,CAArF;;AACA,UAAIvE,OAAO,CAACsB,YAAR,CAAqBS,cAArB,KAAwC,OAA5C,EAAqD;AACjD,YAAI,CAACI,MAAM,CAACe,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCgB,MAArC,EAA6C,cAA7C,CAAL,EAAmE;AAC/DA,UAAAA,MAAM,CAACvB,YAAP,GAAsB,EAAtB;AACH,SAFD,MAGK;AACD,cAAI,CAACtD,iBAAiB,CAAC8E,KAAD,CAAlB,IAA6BD,MAAM,CAACvD,GAAD,CAAN,KAAgBwD,KAAK,CAACxD,GAAD,CAAtD,EAA6D;AACzDuD,YAAAA,MAAM,CAACvB,YAAP,CAAoBf,IAApB,CAAyBuC,KAAzB;AACH;AACJ;;AACD,YAAID,MAAM,CAACvB,YAAP,CAAoBiC,OAApB,CAA4BjC,YAA5B,MAA8C,CAAC,CAA/C,IAAoDuB,MAAM,CAACvD,GAAD,CAAN,KAAgBwD,KAAK,CAACxD,GAAD,CAA7E,EAAoF;AAChFuD,UAAAA,MAAM,CAACvB,YAAP,CAAoBgB,OAApB,CAA4BhB,YAA5B;AACH;;AACD,YAAI5C,eAAJ,EAAqB;AACjB,cAAI,CAACkC,MAAM,CAACe,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCgB,MAArC,EAA6CpE,OAAO,CAAC8C,YAArD,CAAL,EAAyE;AACrEsB,YAAAA,MAAM,CAACpE,OAAO,CAAC8C,YAAT,CAAN,GAA+B,EAA/B;AACH;;AACD,cAAIsB,MAAM,CAACpE,OAAO,CAAC8C,YAAT,CAAN,CAA6BgC,OAA7B,CAAqCjC,YAArC,MAAuD,CAAC,CAAxD,IAA6DuB,MAAM,CAACvD,GAAD,CAAN,KAAgBwD,KAAK,CAACxD,GAAD,CAAtF,EAA6F;AACzFuD,YAAAA,MAAM,CAACpE,OAAO,CAAC8C,YAAT,CAAN,CAA6Be,OAA7B,CAAqChB,YAArC;AACH;AACJ;AACJ;AACJ;;AACD,QAAIiB,WAAW,GAAG9D,OAAO,CAACc,IAAR,CAAaC,uBAAb,GAAuC,CAAvC,CAAlB;AACA,QAAIgE,IAAI,GAAG/E,OAAO,CAACc,IAAR,CAAaG,UAAb,YAAmCvB,WAAnC,GACPM,OAAO,CAACc,IAAR,CAAaG,UAAb,CAAwBA,UAAxB,CAAmCC,IAD5B,GACmClB,OAAO,CAACc,IAAR,CAAaG,UAD3D;;AAEA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsE,IAAI,CAACrD,MAAzB,EAAiCjB,CAAC,EAAlC,EAAsC;AAClC,UAAIsE,IAAI,CAACtE,CAAD,CAAJ,CAAQqD,WAAR,MAAyBM,MAAM,CAACN,WAAD,CAAnC,EAAkD;AAC9CiB,QAAAA,IAAI,CAACtE,CAAD,CAAJ,GAAU2D,MAAV;AACA;AACH;AACJ;;AACDpE,IAAAA,OAAO,CAACc,IAAR,CAAakE,UAAb,CAAwBnE,GAAxB,EAA6BuD,MAA7B;AACA,QAAIa,GAAG,GAAGjF,OAAO,CAACkF,aAAR,CAAsBX,OAAtB,CAAV;;AACA,QAAIvE,OAAO,CAACsB,YAAR,CAAqBC,IAArB,KAA8B,OAAlC,EAA2C;AACvC0D,MAAAA,GAAG,GAAGjF,OAAO,CAACmF,OAAR,GAAkBnF,OAAO,CAACc,IAAR,CAAasE,uBAAb,CAAqChB,MAAM,CAACvD,GAAD,CAA3C,CAAlB,CAAN;AACH;;AACD,QAAIwE,UAAU,GAAG,KAAK,CAAtB;;AACA,QAAIrF,OAAO,CAACsF,UAAR,IAAsBtF,OAAO,CAACuF,gBAAR,EAA1B,EAAsD;AAClDF,MAAAA,UAAU,GAAGrF,OAAO,CAACwF,oBAAR,CAA6BjB,OAA7B,CAAb;AACH;;AACD,QAAI,CAACvE,OAAO,CAACyE,oBAAT,IAAiC,CAAClF,iBAAiB,CAAC0F,GAAD,CAAnD,IAA4D,CAAC1F,iBAAiB,CAAC8F,UAAD,CAAlF,EAAgG;AAC5F,UAAII,OAAO,GAAGzF,OAAO,CAAC0F,eAAtB;;AACA,UAAI1F,OAAO,CAAC2F,mBAAR,IAA+B3F,OAAO,CAAC4F,mBAA3C,EAAgE;AAC5DH,QAAAA,OAAO,GAAGA,OAAO,GAAG,CAApB;AACH;;AACDzF,MAAAA,OAAO,CAAC6F,YAAR,CAAqBC,UAArB,CAAgC;AAC5Bf,QAAAA,IAAI,EAAEX,MADsB;AACd2B,QAAAA,IAAI,EAAEd,GAAG,CAACe,KAAJ,CAAUP,OAAV,IAAqBR,GAAG,CAACe,KAAJ,CAAUP,OAAV,CAArB,GACdJ,UAAU,CAACW,KAAX,CAAiBP,OAAO,GAAGzF,OAAO,CAACuF,gBAAR,EAA3B,CAFsB;AAG5BU,QAAAA,MAAM,EAAEjG,OAAO,CAACc,IAAR,CAAaoF,UAAb,GAA0BlG,OAAO,CAAC0F,eAAlC,CAHoB;AAI5BS,QAAAA,WAAW,EAAE5F;AAJe,OAAhC;AAMH;AACJ;AACJ","sourcesContent":["import { isNullOrUndefined, extend, getValue } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { extendArray, getPlainData, getParentData } from '../utils';\n/**\n * Performs CRUD update to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {string} columnName - Column field name\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\nexport function editAction(details, control, isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord) {\n    var value = details.value;\n    var action = details.action;\n    var changedRecords = 'changedRecords';\n    var i;\n    var j;\n    var addedRecords = 'addedRecords';\n    var batchChanges;\n    var key = control.grid.getPrimaryKeyFieldNames()[0];\n    var treeData = control.dataSource instanceof DataManager ?\n        control.dataSource.dataSource.json : control.dataSource;\n    var modifiedData = [];\n    var originalData = value;\n    var isSkip = false;\n    if (control.editSettings.mode === 'Batch') {\n        batchChanges = control.grid.editModule.getBatchChanges();\n    }\n    if (action === 'add' || (action === 'batchsave' && (control.editSettings.mode === 'Batch'\n        && batchChanges[addedRecords].length))) {\n        var addAct = addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord);\n        value = addAct.value;\n        isSkip = addAct.isSkip;\n    }\n    if (value instanceof Array) {\n        modifiedData = extendArray(value);\n    }\n    else {\n        modifiedData.push(extend({}, value));\n    }\n    if (!isSkip && (action !== 'add' ||\n        (control.editSettings.newRowPosition !== 'Top' && control.editSettings.newRowPosition !== 'Bottom'))) {\n        for (var k = 0; k < modifiedData.length; k++) {\n            if (typeof (modifiedData[k][key]) === 'object') {\n                modifiedData[k] = modifiedData[k][key];\n            }\n            var keys = modifiedData[k].taskData ? Object.keys(modifiedData[k].taskData) :\n                Object.keys(modifiedData[k]);\n            i = treeData.length;\n            var _loop_1 = function () {\n                if (treeData[i][key] === modifiedData[k][key]) {\n                    if (action === 'delete') {\n                        var currentData_1 = treeData[i];\n                        treeData.splice(i, 1);\n                        if (isSelfReference) {\n                            if (!isNullOrUndefined(currentData_1[control.parentIdMapping])) {\n                                var parentData = control.flatData.filter(function (e) {\n                                    return e[control.idMapping] === currentData_1[control.parentIdMapping];\n                                })[0];\n                                var childRecords = parentData ? parentData[control.childMapping] : [];\n                                for (var p = childRecords.length - 1; p >= 0; p--) {\n                                    if (childRecords[p][control.idMapping] === currentData_1[control.idMapping]) {\n                                        childRecords.splice(p, 1);\n                                        if (!childRecords.length) {\n                                            parentData.hasChildRecords = false;\n                                            updateParentRow(key, parentData, action, control, isSelfReference);\n                                        }\n                                        break;\n                                    }\n                                }\n                            }\n                            return \"break\";\n                        }\n                    }\n                    else {\n                        if (action === 'edit') {\n                            for (j = 0; j < keys.length; j++) {\n                                if (Object.prototype.hasOwnProperty.call(treeData[i], keys[j]) && ((control.editSettings.mode !== 'Cell'\n                                    || (!isNullOrUndefined(batchChanges) && batchChanges[changedRecords].length === 0))\n                                    || keys[j] === columnName)) {\n                                    var editedData = getParentData(control, modifiedData[k].uniqueID);\n                                    treeData[i][keys[j]] = modifiedData[k][keys[j]];\n                                    if (editedData && editedData.taskData) {\n                                        editedData.taskData[keys[j]] = editedData[keys[j]] = treeData[i][keys[j]];\n                                    }\n                                }\n                            }\n                        }\n                        else if (action === 'add' || action === 'batchsave') {\n                            var index = void 0;\n                            if (control.editSettings.newRowPosition === 'Child') {\n                                if (isSelfReference) {\n                                    originalData.taskData[control.parentIdMapping] = treeData[i][control.idMapping];\n                                    treeData.splice(i + 1, 0, originalData.taskData);\n                                }\n                                else {\n                                    if (!Object.prototype.hasOwnProperty.call(treeData[i], control.childMapping)) {\n                                        treeData[i][control.childMapping] = [];\n                                    }\n                                    treeData[i][control.childMapping].push(originalData.taskData);\n                                    updateParentRow(key, treeData[i], action, control, isSelfReference, originalData);\n                                }\n                            }\n                            else if (control.editSettings.newRowPosition === 'Below') {\n                                treeData.splice(i + 1, 0, originalData.taskData);\n                                if (!isNullOrUndefined(originalData.parentItem)) {\n                                    updateParentRow(key, treeData[i + 1], action, control, isSelfReference, originalData);\n                                }\n                            }\n                            else if (!addRowIndex) {\n                                index = 0;\n                                treeData.splice(index, 0, originalData.taskData);\n                            }\n                            else if (control.editSettings.newRowPosition === 'Above') {\n                                treeData.splice(i, 0, originalData.taskData);\n                                if (!isNullOrUndefined(originalData.parentItem)) {\n                                    updateParentRow(key, treeData[i], action, control, isSelfReference, originalData);\n                                }\n                            }\n                        }\n                        return \"break\";\n                    }\n                }\n                else if (!isNullOrUndefined(treeData[i][control.childMapping])) {\n                    if (removeChildRecords(treeData[i][control.childMapping], modifiedData[k], action, key, control, isSelfReference, originalData, columnName)) {\n                        updateParentRow(key, treeData[i], action, control, isSelfReference);\n                    }\n                }\n            };\n            while (i-- && i >= 0) {\n                var state_1 = _loop_1();\n                if (state_1 === \"break\")\n                    break;\n            }\n        }\n    }\n}\n/**\n * Performs Add action to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {Object[]} treeData - Tree Grid data source\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\nexport function addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord) {\n    var value;\n    var isSkip = false;\n    var currentViewRecords = control.grid.getCurrentViewRecords();\n    value = extend({}, details.value);\n    value = getPlainData(value);\n    switch (control.editSettings.newRowPosition) {\n        case 'Top':\n            treeData.unshift(value);\n            isSkip = true;\n            break;\n        case 'Bottom':\n            treeData.push(value);\n            isSkip = true;\n            break;\n        case 'Above':\n            if (!isNullOrUndefined(addRowRecord)) {\n                value = extend({}, addRowRecord);\n                value = getPlainData(value);\n            }\n            else {\n                value = extend({}, currentViewRecords[addRowIndex + 1]);\n                value = getPlainData(value);\n            }\n            break;\n        case 'Below':\n        case 'Child':\n            if (!isNullOrUndefined(addRowRecord)) {\n                value = extend({}, addRowRecord);\n                value = getPlainData(value);\n            }\n            else {\n                var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n                var currentdata = currentViewRecords[addRowIndex];\n                if (!isNullOrUndefined(currentdata) && currentdata[primaryKeys] === details.value[primaryKeys] || selectedIndex !== -1) {\n                    value = extend({}, currentdata);\n                }\n                else {\n                    value = extend({}, details.value);\n                }\n                value = getPlainData(value);\n                var internalProperty = 'internalProperties';\n                control.editModule[internalProperty].taskData = value;\n            }\n            if (selectedIndex === -1) {\n                treeData.unshift(value);\n                isSkip = true;\n            }\n    }\n    return { value: value, isSkip: isSkip };\n}\n/**\n * @param {ITreeData[]} childRecords - Child Records collection\n * @param {Object} modifiedData - Modified data in crud action\n * @param {string} action - crud action type\n * @param {string} key - Primary key field name\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether Self Referential data binding\n * @param {ITreeData} originalData - Non updated data from data source, of edited data\n * @param {string} columnName - column field name\n * @returns {boolean} Returns whether child records exists\n */\nexport function removeChildRecords(childRecords, modifiedData, action, key, control, isSelfReference, originalData, columnName) {\n    var isChildAll = false;\n    var j = childRecords.length;\n    while (j-- && j >= 0) {\n        if (childRecords[j][key] === modifiedData[key] ||\n            (isSelfReference && childRecords[j][control.parentIdMapping] === modifiedData[control.idMapping])) {\n            if (action === 'edit') {\n                var keys = Object.keys(modifiedData);\n                var editedData = getParentData(control, modifiedData.uniqueID);\n                for (var i = 0; i < keys.length; i++) {\n                    if (Object.prototype.hasOwnProperty.call(childRecords[j], keys[i]) && (control.editSettings.mode !== 'Cell' || keys[i] === columnName)) {\n                        editedData[keys[i]] = editedData.taskData[keys[i]] = childRecords[j][keys[i]] = modifiedData[keys[i]];\n                        if (control.grid.editSettings.mode === 'Normal' && control.editSettings.mode === 'Cell') {\n                            var editModule = 'editModule';\n                            control.grid.editModule[editModule].editRowIndex = modifiedData.index;\n                            control.grid.editModule[editModule].updateCurrentViewData(modifiedData);\n                        }\n                    }\n                }\n                break;\n            }\n            else if (action === 'add' || action === 'batchsave') {\n                if (control.editSettings.newRowPosition === 'Child') {\n                    if (isSelfReference) {\n                        originalData[control.parentIdMapping] = childRecords[j][control.idMapping];\n                        childRecords.splice(j + 1, 0, originalData);\n                        updateParentRow(key, childRecords[j], action, control, isSelfReference, originalData);\n                    }\n                    else {\n                        if (!Object.prototype.hasOwnProperty.call(childRecords[j], control.childMapping)) {\n                            childRecords[j][control.childMapping] = [];\n                        }\n                        childRecords[j][control.childMapping].push(originalData.taskData);\n                        updateParentRow(key, childRecords[j], action, control, isSelfReference, originalData);\n                    }\n                }\n                else if (control.editSettings.newRowPosition === 'Above') {\n                    childRecords.splice(j, 0, originalData.taskData);\n                    if (!isNullOrUndefined(originalData.parentItem)) {\n                        updateParentRow(key, childRecords[j], action, control, isSelfReference, originalData);\n                    }\n                }\n                else if (control.editSettings.newRowPosition === 'Below') {\n                    childRecords.splice(j + 1, 0, originalData.taskData);\n                    if (!isNullOrUndefined(originalData.parentItem)) {\n                        updateParentRow(key, childRecords[j], action, control, isSelfReference, originalData);\n                    }\n                }\n            }\n            else {\n                childRecords.splice(j, 1);\n                if (!childRecords.length) {\n                    isChildAll = true;\n                }\n            }\n        }\n        else if (!isNullOrUndefined(childRecords[j][control.childMapping])) {\n            if (removeChildRecords(childRecords[j][control.childMapping], modifiedData, action, key, control, isSelfReference, originalData, columnName)) {\n                updateParentRow(key, childRecords[j], action, control, isSelfReference);\n            }\n        }\n    }\n    return isChildAll;\n}\n/**\n * @param {string} key - Primary key field name\n * @param {ITreeData} record - Parent Record which has to be updated\n * @param {string} action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether self referential data binding\n * @param {ITreeData} child - Specifies child record\n * @returns {void}\n */\nexport function updateParentRow(key, record, action, control, isSelfReference, child) {\n    if ((control.editSettings.newRowPosition === 'Above' || control.editSettings.newRowPosition === 'Below')\n        && ((action === 'add' || action === 'batchsave')) && !isNullOrUndefined(child.parentItem)) {\n        var parentData = getParentData(control, child.parentItem.uniqueID);\n        parentData.childRecords.push(child);\n    }\n    else {\n        var currentRecords = control.grid.getCurrentViewRecords();\n        var index_1;\n        currentRecords.map(function (e, i) { if (e[key] === record[key]) {\n            index_1 = i;\n            return;\n        } });\n        if (!isNullOrUndefined(index_1)) {\n            record = currentRecords[index_1];\n        }\n        if (control.enableVirtualization && isNullOrUndefined(record) && !isNullOrUndefined(child)) {\n            record = getValue('uniqueIDCollection.' + child.parentUniqueID, control);\n        }\n        record.hasChildRecords = false;\n        if (action === 'add' || action === 'batchsave') {\n            record.expanded = true;\n            record.hasChildRecords = true;\n            if (control.sortSettings.columns.length && isNullOrUndefined(child)) {\n                child = currentRecords.filter(function (e) {\n                    if (e.parentUniqueID === record.uniqueID) {\n                        return e;\n                    }\n                    else {\n                        return null;\n                    }\n                });\n            }\n            var childRecords = child ? child instanceof Array ? child[0] : child : currentRecords[index_1 + 1];\n            if (control.editSettings.newRowPosition !== 'Below') {\n                if (!Object.prototype.hasOwnProperty.call(record, 'childRecords')) {\n                    record.childRecords = [];\n                }\n                else {\n                    if (!isNullOrUndefined(child) && record[key] !== child[key]) {\n                        record.childRecords.push(child);\n                    }\n                }\n                if (record.childRecords.indexOf(childRecords) === -1 && record[key] !== child[key]) {\n                    record.childRecords.unshift(childRecords);\n                }\n                if (isSelfReference) {\n                    if (!Object.prototype.hasOwnProperty.call(record, control.childMapping)) {\n                        record[control.childMapping] = [];\n                    }\n                    if (record[control.childMapping].indexOf(childRecords) === -1 && record[key] !== child[key]) {\n                        record[control.childMapping].unshift(childRecords);\n                    }\n                }\n            }\n        }\n        var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n        var data = control.grid.dataSource instanceof DataManager ?\n            control.grid.dataSource.dataSource.json : control.grid.dataSource;\n        for (var i = 0; i < data.length; i++) {\n            if (data[i][primaryKeys] === record[primaryKeys]) {\n                data[i] = record;\n                break;\n            }\n        }\n        control.grid.setRowData(key, record);\n        var row = control.getRowByIndex(index_1);\n        if (control.editSettings.mode === 'Batch') {\n            row = control.getRows()[control.grid.getRowIndexByPrimaryKey(record[key])];\n        }\n        var movableRow = void 0;\n        if (control.frozenRows || control.getFrozenColumns()) {\n            movableRow = control.getMovableRowByIndex(index_1);\n        }\n        if (!control.enableVirtualization && !isNullOrUndefined(row) || !isNullOrUndefined(movableRow)) {\n            var index_2 = control.treeColumnIndex;\n            if (control.allowRowDragAndDrop && control.enableImmutableMode) {\n                index_2 = index_2 + 1;\n            }\n            control.renderModule.cellRender({\n                data: record, cell: row.cells[index_2] ? row.cells[index_2]\n                    : movableRow.cells[index_2 - control.getFrozenColumns()],\n                column: control.grid.getColumns()[control.treeColumnIndex],\n                requestType: action\n            });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}