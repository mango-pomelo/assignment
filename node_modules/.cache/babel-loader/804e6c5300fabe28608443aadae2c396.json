{"ast":null,"code":"import { getObject, Grid, ExcelExport as GridExcel } from '@syncfusion/ej2-grids';\nimport { isRemoteData, isOffline, getParentData, getExpandStatus } from '../utils';\nimport { isNullOrUndefined, setValue, extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport * as event from '../base/constant';\n/**\n * TreeGrid Excel Export module\n *\n * @hidden\n */\n\nvar ExcelExport =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Excel Export module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function ExcelExport(parent) {\n    this.isCollapsedStatePersist = false;\n    Grid.Inject(GridExcel);\n    this.parent = parent;\n    this.dataResults = {};\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns ExcelExport module name\n   */\n\n\n  ExcelExport.prototype.getModuleName = function () {\n    return 'ExcelExport';\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  ExcelExport.prototype.addEventListener = function () {\n    this.parent.on('updateResults', this.updateExcelResultModel, this);\n    this.parent.on('excelCellInfo', this.excelQueryCellInfo, this);\n    this.parent.grid.on('export-RowDataBound', this.exportRowDataBound, this);\n    this.parent.grid.on('finalPageSetup', this.finalPageSetup, this);\n  };\n  /**\n   * To destroy the Excel Export\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  ExcelExport.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  ExcelExport.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('updateResults', this.updateExcelResultModel);\n    this.parent.off('excelCellInfo', this.excelQueryCellInfo);\n    this.parent.grid.off('export-RowDataBound', this.exportRowDataBound);\n    this.parent.grid.off('finalPageSetup', this.finalPageSetup);\n  };\n\n  ExcelExport.prototype.updateExcelResultModel = function (returnResult) {\n    this.dataResults = returnResult;\n  };\n\n  ExcelExport.prototype.Map = function (excelExportProperties,\n  /* eslint-disable-next-line */\n  isMultipleExport, workbook, isBlob, isCsv) {\n    var _this = this;\n\n    var dataSource = this.parent.dataSource;\n    var property = Object();\n    setValue('isCsv', isCsv, property);\n    setValue('cancel', false, property);\n\n    if (!isNullOrUndefined(excelExportProperties)) {\n      this.isCollapsedStatePersist = excelExportProperties.isCollapsedStatePersist;\n    }\n\n    return new Promise(function (resolve) {\n      var dm = _this.isLocal() && !(dataSource instanceof DataManager) ? new DataManager(dataSource) : _this.parent.dataSource;\n      var query = new Query();\n\n      if (!_this.isLocal()) {\n        query = _this.generateQuery(query);\n        setValue('query', query, property);\n      }\n\n      _this.parent.trigger(event.beforeExcelExport, extend(property, excelExportProperties));\n\n      if (getObject('cancel', property)) {\n        return null;\n      }\n\n      dm.executeQuery(query).then(function (e) {\n        var customData = null;\n\n        if (!isNullOrUndefined(excelExportProperties) && !isNullOrUndefined(excelExportProperties.dataSource)) {\n          customData = excelExportProperties.dataSource;\n        }\n\n        excelExportProperties = _this.manipulateExportProperties(excelExportProperties, dataSource, e);\n        return _this.parent.grid.excelExportModule.Map(_this.parent.grid, excelExportProperties, isMultipleExport, workbook, isCsv, isBlob).then(function (book) {\n          if (customData != null) {\n            excelExportProperties.dataSource = customData;\n          } else {\n            delete excelExportProperties.dataSource;\n          }\n\n          resolve(book);\n        });\n      });\n    });\n  };\n\n  ExcelExport.prototype.generateQuery = function (query, property) {\n    if (!isNullOrUndefined(property) && property.exportType === 'CurrentPage' && this.parent.allowPaging) {\n      property.exportType = 'AllPages';\n      query.addParams('ExportType', 'CurrentPage');\n      query.where(this.parent.parentIdMapping, 'equal', null);\n      query = getObject('grid.renderModule.data.pageQuery', this.parent)(query);\n    }\n\n    return query;\n  };\n\n  ExcelExport.prototype.manipulateExportProperties = function (property, dtSrc, queryResult) {\n    //count not required for this query\n    var args = Object();\n    setValue('query', this.parent.grid.getDataModule().generateQuery(true), args);\n    setValue('isExport', true, args);\n\n    if (!isNullOrUndefined(property) && !isNullOrUndefined(property.exportType)) {\n      setValue('exportType', property.exportType, args);\n    }\n\n    if (!this.isLocal()) {\n      this.parent.parentData = [];\n      this.parent.dataModule.convertToFlatData(getObject('result', queryResult));\n      setValue('expresults', this.parent.flatData, args);\n    }\n\n    this.parent.notify('dataProcessor', args); //args = this.parent.dataModule.dataProcessor(args);\n\n    args = this.dataResults;\n    dtSrc = isNullOrUndefined(args.result) ? this.parent.flatData.slice(0) : args.result;\n\n    if (!this.isLocal()) {\n      this.parent.flatData = [];\n    }\n\n    if (property && property.dataSource && this.isLocal()) {\n      var flatsData = this.parent.flatData;\n      var dataSrc = property.dataSource instanceof DataManager ? property.dataSource.dataSource.json : property.dataSource;\n      this.parent.dataModule.convertToFlatData(dataSrc);\n      dtSrc = this.parent.flatData;\n      this.parent.flatData = flatsData;\n    }\n\n    property = isNullOrUndefined(property) ? Object() : property;\n    property.dataSource = new DataManager({\n      json: dtSrc\n    });\n    return property;\n  };\n  /**\n   * TreeGrid Excel Export cell modifier\n   *\n   * @param {ExcelQueryCellInfoEventArgs} args - current cell details\n   * @hidden\n   * @returns {void}\n   */\n\n\n  ExcelExport.prototype.excelQueryCellInfo = function (args) {\n    if (this.parent.grid.getColumnIndexByUid(args.column.uid) === this.parent.treeColumnIndex) {\n      var style = {};\n      var data = args.data;\n      var ispadfilter = isNullOrUndefined(data.filterLevel);\n      var pad = ispadfilter ? data.level : data.filterLevel;\n      style.indent = pad;\n      args.style = style;\n    }\n\n    this.parent.notify('updateResults', args);\n    this.parent.trigger('excelQueryCellInfo', args);\n  };\n\n  ExcelExport.prototype.exportRowDataBound = function (excelRow) {\n    if (excelRow.type === 'excel') {\n      var excelrowobj = excelRow.rowObj.data;\n      var filtercolumnlength = this.parent.grid.filterSettings.columns.length;\n\n      if (excelrowobj.parentItem && getParentData(this.parent, excelrowobj.parentItem.uniqueID, Boolean(filtercolumnlength))) {\n        var rowlength = excelRow.excelRows.length;\n        var rowlevel = excelrowobj.level;\n        var expandedStatus = false;\n        var sublevelState = false;\n        var state = getExpandStatus(this.parent, excelrowobj, this.parent.parentData);\n\n        if (this.isCollapsedStatePersist && (!state || !this.parent.isLocalData)) {\n          expandedStatus = true;\n          sublevelState = excelrowobj.expanded ? false : true;\n        }\n\n        excelRow.excelRows[rowlength - 1].grouping = {\n          outlineLevel: rowlevel,\n          isCollapsed: sublevelState,\n          isHidden: expandedStatus\n        };\n      }\n    }\n  };\n  /* eslint-disable-next-line */\n\n\n  ExcelExport.prototype.finalPageSetup = function (workbook) {\n    for (var i = 0; i < workbook.worksheets.length; i++) {\n      if (workbook.worksheets[i].rows) {\n        workbook.worksheets[i].pageSetup = {\n          isSummaryRowBelow: false\n        };\n      }\n    }\n  };\n\n  ExcelExport.prototype.isLocal = function () {\n    return !isRemoteData(this.parent) && isOffline(this.parent);\n  };\n\n  return ExcelExport;\n}();\n\nexport { ExcelExport };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/excel-export.js"],"names":["getObject","Grid","ExcelExport","GridExcel","isRemoteData","isOffline","getParentData","getExpandStatus","isNullOrUndefined","setValue","extend","DataManager","Query","event","parent","isCollapsedStatePersist","Inject","dataResults","addEventListener","prototype","getModuleName","on","updateExcelResultModel","excelQueryCellInfo","grid","exportRowDataBound","finalPageSetup","destroy","removeEventListener","isDestroyed","off","returnResult","Map","excelExportProperties","isMultipleExport","workbook","isBlob","isCsv","_this","dataSource","property","Object","Promise","resolve","dm","isLocal","query","generateQuery","trigger","beforeExcelExport","executeQuery","then","e","customData","manipulateExportProperties","excelExportModule","book","exportType","allowPaging","addParams","where","parentIdMapping","dtSrc","queryResult","args","getDataModule","parentData","dataModule","convertToFlatData","flatData","notify","result","slice","flatsData","dataSrc","json","getColumnIndexByUid","column","uid","treeColumnIndex","style","data","ispadfilter","filterLevel","pad","level","indent","excelRow","type","excelrowobj","rowObj","filtercolumnlength","filterSettings","columns","length","parentItem","uniqueID","Boolean","rowlength","excelRows","rowlevel","expandedStatus","sublevelState","state","isLocalData","expanded","grouping","outlineLevel","isCollapsed","isHidden","i","worksheets","rows","pageSetup","isSummaryRowBelow"],"mappings":"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","sourcesContent":["import { getObject, Grid, ExcelExport as GridExcel } from '@syncfusion/ej2-grids';\nimport { isRemoteData, isOffline, getParentData, getExpandStatus } from '../utils';\nimport { isNullOrUndefined, setValue, extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport * as event from '../base/constant';\n/**\n * TreeGrid Excel Export module\n *\n * @hidden\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for Excel Export module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function ExcelExport(parent) {\n        this.isCollapsedStatePersist = false;\n        Grid.Inject(GridExcel);\n        this.parent = parent;\n        this.dataResults = {};\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns ExcelExport module name\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'ExcelExport';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    ExcelExport.prototype.addEventListener = function () {\n        this.parent.on('updateResults', this.updateExcelResultModel, this);\n        this.parent.on('excelCellInfo', this.excelQueryCellInfo, this);\n        this.parent.grid.on('export-RowDataBound', this.exportRowDataBound, this);\n        this.parent.grid.on('finalPageSetup', this.finalPageSetup, this);\n    };\n    /**\n     * To destroy the Excel Export\n     *\n     * @returns {void}\n     * @hidden\n     */\n    ExcelExport.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    ExcelExport.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updateResults', this.updateExcelResultModel);\n        this.parent.off('excelCellInfo', this.excelQueryCellInfo);\n        this.parent.grid.off('export-RowDataBound', this.exportRowDataBound);\n        this.parent.grid.off('finalPageSetup', this.finalPageSetup);\n    };\n    ExcelExport.prototype.updateExcelResultModel = function (returnResult) {\n        this.dataResults = returnResult;\n    };\n    ExcelExport.prototype.Map = function (excelExportProperties, \n    /* eslint-disable-next-line */\n    isMultipleExport, workbook, isBlob, isCsv) {\n        var _this = this;\n        var dataSource = this.parent.dataSource;\n        var property = Object();\n        setValue('isCsv', isCsv, property);\n        setValue('cancel', false, property);\n        if (!isNullOrUndefined(excelExportProperties)) {\n            this.isCollapsedStatePersist = excelExportProperties.isCollapsedStatePersist;\n        }\n        return new Promise(function (resolve) {\n            var dm = _this.isLocal() && !(dataSource instanceof DataManager) ? new DataManager(dataSource)\n                : _this.parent.dataSource;\n            var query = new Query();\n            if (!_this.isLocal()) {\n                query = _this.generateQuery(query);\n                setValue('query', query, property);\n            }\n            _this.parent.trigger(event.beforeExcelExport, extend(property, excelExportProperties));\n            if (getObject('cancel', property)) {\n                return null;\n            }\n            dm.executeQuery(query).then(function (e) {\n                var customData = null;\n                if (!isNullOrUndefined(excelExportProperties) && !isNullOrUndefined(excelExportProperties.dataSource)) {\n                    customData = excelExportProperties.dataSource;\n                }\n                excelExportProperties = _this.manipulateExportProperties(excelExportProperties, dataSource, e);\n                return _this.parent.grid.excelExportModule.Map(_this.parent.grid, excelExportProperties, isMultipleExport, workbook, isCsv, isBlob).then(function (book) {\n                    if (customData != null) {\n                        excelExportProperties.dataSource = customData;\n                    }\n                    else {\n                        delete excelExportProperties.dataSource;\n                    }\n                    resolve(book);\n                });\n            });\n        });\n    };\n    ExcelExport.prototype.generateQuery = function (query, property) {\n        if (!isNullOrUndefined(property) && property.exportType === 'CurrentPage'\n            && this.parent.allowPaging) {\n            property.exportType = 'AllPages';\n            query.addParams('ExportType', 'CurrentPage');\n            query.where(this.parent.parentIdMapping, 'equal', null);\n            query = getObject('grid.renderModule.data.pageQuery', this.parent)(query);\n        }\n        return query;\n    };\n    ExcelExport.prototype.manipulateExportProperties = function (property, dtSrc, queryResult) {\n        //count not required for this query\n        var args = Object();\n        setValue('query', this.parent.grid.getDataModule().generateQuery(true), args);\n        setValue('isExport', true, args);\n        if (!isNullOrUndefined(property) && !isNullOrUndefined(property.exportType)) {\n            setValue('exportType', property.exportType, args);\n        }\n        if (!this.isLocal()) {\n            this.parent.parentData = [];\n            this.parent.dataModule.convertToFlatData(getObject('result', queryResult));\n            setValue('expresults', this.parent.flatData, args);\n        }\n        this.parent.notify('dataProcessor', args);\n        //args = this.parent.dataModule.dataProcessor(args);\n        args = this.dataResults;\n        dtSrc = isNullOrUndefined(args.result) ? this.parent.flatData.slice(0) : args.result;\n        if (!this.isLocal()) {\n            this.parent.flatData = [];\n        }\n        if (property && property.dataSource && this.isLocal()) {\n            var flatsData = this.parent.flatData;\n            var dataSrc = property.dataSource instanceof DataManager ? property.dataSource.dataSource.json : property.dataSource;\n            this.parent.dataModule.convertToFlatData(dataSrc);\n            dtSrc = this.parent.flatData;\n            this.parent.flatData = flatsData;\n        }\n        property = isNullOrUndefined(property) ? Object() : property;\n        property.dataSource = new DataManager({ json: dtSrc });\n        return property;\n    };\n    /**\n     * TreeGrid Excel Export cell modifier\n     *\n     * @param {ExcelQueryCellInfoEventArgs} args - current cell details\n     * @hidden\n     * @returns {void}\n     */\n    ExcelExport.prototype.excelQueryCellInfo = function (args) {\n        if (this.parent.grid.getColumnIndexByUid(args.column.uid) === this.parent.treeColumnIndex) {\n            var style = {};\n            var data = args.data;\n            var ispadfilter = isNullOrUndefined(data.filterLevel);\n            var pad = ispadfilter ? data.level : data.filterLevel;\n            style.indent = pad;\n            args.style = style;\n        }\n        this.parent.notify('updateResults', args);\n        this.parent.trigger('excelQueryCellInfo', args);\n    };\n    ExcelExport.prototype.exportRowDataBound = function (excelRow) {\n        if (excelRow.type === 'excel') {\n            var excelrowobj = excelRow.rowObj.data;\n            var filtercolumnlength = this.parent.grid.filterSettings.columns.length;\n            if (excelrowobj.parentItem && getParentData(this.parent, excelrowobj.parentItem.uniqueID, Boolean(filtercolumnlength))) {\n                var rowlength = excelRow.excelRows.length;\n                var rowlevel = excelrowobj.level;\n                var expandedStatus = false;\n                var sublevelState = false;\n                var state = getExpandStatus(this.parent, excelrowobj, this.parent.parentData);\n                if (this.isCollapsedStatePersist && (!state || !this.parent.isLocalData)) {\n                    expandedStatus = true;\n                    sublevelState = excelrowobj.expanded ? false : true;\n                }\n                excelRow.excelRows[rowlength - 1].grouping = { outlineLevel: rowlevel, isCollapsed: sublevelState,\n                    isHidden: expandedStatus };\n            }\n        }\n    };\n    /* eslint-disable-next-line */\n    ExcelExport.prototype.finalPageSetup = function (workbook) {\n        for (var i = 0; i < workbook.worksheets.length; i++) {\n            if (workbook.worksheets[i].rows) {\n                workbook.worksheets[i].pageSetup = { isSummaryRowBelow: false };\n            }\n        }\n    };\n    ExcelExport.prototype.isLocal = function () {\n        return !isRemoteData(this.parent) && isOffline(this.parent);\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n"]},"metadata":{},"sourceType":"module"}