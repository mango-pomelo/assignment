{"ast":null,"code":"import { Grid, Resize as GridResize } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid Resize module\n *\n * @hidden\n */\n\nvar Resize =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Resize module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function Resize(parent) {\n    Grid.Inject(GridResize);\n    this.parent = parent;\n  }\n  /**\n   * Resize by field names.\n   *\n   * @param  {string|string[]} fName - Defines the field name.\n   * @returns {void}\n   */\n\n\n  Resize.prototype.autoFitColumns = function (fName) {\n    this.parent.grid.autoFitColumns(fName);\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns Resize module name\n   */\n\n\n  Resize.prototype.getModuleName = function () {\n    return 'resize';\n  };\n  /**\n   * Destroys the Resize.\n   *\n   * @function destroy\n   * @returns {void}\n   */\n\n\n  Resize.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.grid.resizeModule.destroy();\n  };\n\n  return Resize;\n}();\n\nexport { Resize };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/resize.js"],"names":["Grid","Resize","GridResize","parent","Inject","prototype","autoFitColumns","fName","grid","getModuleName","destroy","isDestroyed","resizeModule"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAM,IAAIC,UAAzB,QAA2C,uBAA3C;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,MAAM;AAAG;AAAe,YAAY;AACpC;AACJ;AACA;AACA;AACA;AACI,WAASA,MAAT,CAAgBE,MAAhB,EAAwB;AACpBH,IAAAA,IAAI,CAACI,MAAL,CAAYF,UAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,MAAM,CAACI,SAAP,CAAiBC,cAAjB,GAAkC,UAAUC,KAAV,EAAiB;AAC/C,SAAKJ,MAAL,CAAYK,IAAZ,CAAiBF,cAAjB,CAAgCC,KAAhC;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIN,EAAAA,MAAM,CAACI,SAAP,CAAiBI,aAAjB,GAAiC,YAAY;AACzC,WAAO,QAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIR,EAAAA,MAAM,CAACI,SAAP,CAAiBK,OAAjB,GAA2B,YAAY;AACnC,QAAI,KAAKP,MAAL,CAAYQ,WAAhB,EAA6B;AACzB;AACH;;AACD,SAAKR,MAAL,CAAYK,IAAZ,CAAiBI,YAAjB,CAA8BF,OAA9B;AACH,GALD;;AAMA,SAAOT,MAAP;AACH,CAzC2B,EAA5B;;AA0CA,SAASA,MAAT","sourcesContent":["import { Grid, Resize as GridResize } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid Resize module\n *\n * @hidden\n */\nvar Resize = /** @class */ (function () {\n    /**\n     * Constructor for Resize module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Resize(parent) {\n        Grid.Inject(GridResize);\n        this.parent = parent;\n    }\n    /**\n     * Resize by field names.\n     *\n     * @param  {string|string[]} fName - Defines the field name.\n     * @returns {void}\n     */\n    Resize.prototype.autoFitColumns = function (fName) {\n        this.parent.grid.autoFitColumns(fName);\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Resize module name\n     */\n    Resize.prototype.getModuleName = function () {\n        return 'resize';\n    };\n    /**\n     * Destroys the Resize.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    Resize.prototype.destroy = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.grid.resizeModule.destroy();\n    };\n    return Resize;\n}());\nexport { Resize };\n"]},"metadata":{},"sourceType":"module"}