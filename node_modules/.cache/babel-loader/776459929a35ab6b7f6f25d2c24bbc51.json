{"ast":null,"code":"import { getObject } from '@syncfusion/ej2-grids';\nimport { DataManager, ODataAdaptor, UrlAdaptor } from '@syncfusion/ej2-data';\nimport { WebApiAdaptor, WebMethodAdaptor, CacheAdaptor } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Specifies whether remote data binding\n */\n\nexport function isRemoteData(parent) {\n  if (parent.dataSource instanceof DataManager) {\n    var adaptor = parent.dataSource.adaptor;\n    return adaptor instanceof ODataAdaptor || adaptor instanceof WebApiAdaptor || adaptor instanceof WebMethodAdaptor || adaptor instanceof CacheAdaptor || adaptor instanceof UrlAdaptor;\n  }\n\n  return false;\n}\n/**\n * @param {TreeGrid | IGrid} parent - Tree Grid or Grid instance\n * @returns {boolean} - Returns whether custom binding\n */\n\nexport function isCountRequired(parent) {\n  if (parent.dataSource && 'result' in parent.dataSource) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns whether checkbox column is enabled\n */\n\nexport function isCheckboxcolumn(parent) {\n  for (var i = 0; i < parent.columns.length; i++) {\n    if (parent.columns[i].showCheckbox) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns whether filtering and searching done\n */\n\nexport function isFilterChildHierarchy(parent) {\n  if (!isNullOrUndefined(parent.grid.searchSettings.key) && parent.grid.searchSettings.key !== '' && (parent.searchSettings.hierarchyMode === 'Child' || parent.searchSettings.hierarchyMode === 'None') || parent.allowFiltering && parent.grid.filterSettings.columns.length && (parent.filterSettings.hierarchyMode === 'Child' || parent.filterSettings.hierarchyMode === 'None')) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @param {Object} records - Define records for which parent records has to be found\n * @hidden\n * @returns {Object} - Returns parent records collection\n */\n\nexport function findParentRecords(records) {\n  var datas = [];\n  var recordsLength = Object.keys(records).length;\n\n  for (var i = 0, len = recordsLength; i < len; i++) {\n    var hasChild = getObject('hasChildRecords', records[i]);\n\n    if (hasChild) {\n      datas.push(records[i]);\n    }\n  }\n\n  return datas;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns the expand status of record\n * @param {ITreeData} record - Define the record for which expand status has be found\n * @param {ITreeData[]} parents - Parent Data collection\n * @hidden\n */\n\nexport function getExpandStatus(parent, record, parents) {\n  var parentRecord = isNullOrUndefined(record.parentItem) ? null : getParentData(parent, record.parentItem.uniqueID);\n  var childParent;\n\n  if (parentRecord != null) {\n    if (parent.initialRender && !isNullOrUndefined(parentRecord[parent.expandStateMapping]) && !parentRecord[parent.expandStateMapping]) {\n      parentRecord.expanded = false;\n      return false;\n    } else if (parentRecord.expanded === false) {\n      return false;\n    } else if (parentRecord.parentItem) {\n      childParent = getParentData(parent, parentRecord.parentItem.uniqueID);\n\n      if (childParent && parent.initialRender && !isNullOrUndefined(childParent[parent.expandStateMapping]) && !childParent[parent.expandStateMapping]) {\n        childParent.expanded = false;\n        return false;\n      }\n\n      if (childParent && childParent.expanded === false) {\n        return false;\n      } else if (childParent) {\n        return getExpandStatus(parent, childParent, parents);\n      }\n\n      return true;\n    } else {\n      return true;\n    }\n  } else {\n    return true;\n  }\n}\n/**\n * @param {ITreeData} records - Define the record for which child records has to be found\n * @returns {Object[]} - Returns child records collection\n * @hidden\n */\n\nexport function findChildrenRecords(records) {\n  var datas = [];\n\n  if (isNullOrUndefined(records) || !records.hasChildRecords && !isNullOrUndefined(records.childRecords) && !records.childRecords.length) {\n    return [];\n  }\n\n  if (!isNullOrUndefined(records.childRecords)) {\n    var childRecords = records.childRecords;\n\n    for (var i = 0, len = Object.keys(childRecords).length; i < len; i++) {\n      datas.push(childRecords[i]);\n\n      if (childRecords[i].hasChildRecords || !isNullOrUndefined(childRecords[i].childRecords) && childRecords[i].childRecords.length) {\n        datas = datas.concat(findChildrenRecords(childRecords[i]));\n      }\n    }\n  }\n\n  return datas;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns whether local data binding\n */\n\nexport function isOffline(parent) {\n  if (isRemoteData(parent)) {\n    var dm = parent.dataSource;\n    return !isNullOrUndefined(dm.ready);\n  }\n\n  return true;\n}\n/**\n * @param {Object[]} array - Defines the array to be cloned\n * @returns {Object[]} - Returns cloned array collection\n */\n\nexport function extendArray(array) {\n  var objArr = [];\n  var obj;\n  var keys;\n\n  for (var i = 0; array && i < array.length; i++) {\n    keys = Object.keys(array[i]);\n    obj = {};\n\n    for (var j = 0; j < keys.length; j++) {\n      obj[keys[j]] = array[i][keys[j]];\n    }\n\n    objArr.push(obj);\n  }\n\n  return objArr;\n}\n/**\n * @param {ITreeData} value - Defined the dirty data to be cleaned\n * @returns {ITreeData} - Returns cleaned original data\n */\n\nexport function getPlainData(value) {\n  delete value.hasChildRecords;\n  delete value.childRecords;\n  delete value.index;\n  delete value.parentItem;\n  delete value.level;\n  delete value.taskData;\n  delete value.uniqueID;\n  return value;\n}\n/**\n * @param {TreeGrid} parent - TreeGrid instance\n * @param {string} value - IdMapping field name\n * @param {boolean} requireFilter - Specified whether treegrid data is filtered\n * @returns {ITreeData} - Returns IdMapping matched record\n */\n\nexport function getParentData(parent, value, requireFilter) {\n  if (requireFilter) {\n    var idFilter = 'uniqueIDFilterCollection';\n    return parent[idFilter][value];\n  } else {\n    var id = 'uniqueIDCollection';\n    return parent[id][value];\n  }\n}\n/**\n * @param {HTMLTableRowElement} el - Row element\n * @returns {boolean} - Returns whether hidden\n */\n\nexport function isHidden(el) {\n  var style = window.getComputedStyle(el);\n  return style.display === 'none' || style.visibility === 'hidden';\n}","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/utils.js"],"names":["getObject","DataManager","ODataAdaptor","UrlAdaptor","WebApiAdaptor","WebMethodAdaptor","CacheAdaptor","isNullOrUndefined","isRemoteData","parent","dataSource","adaptor","isCountRequired","isCheckboxcolumn","i","columns","length","showCheckbox","isFilterChildHierarchy","grid","searchSettings","key","hierarchyMode","allowFiltering","filterSettings","findParentRecords","records","datas","recordsLength","Object","keys","len","hasChild","push","getExpandStatus","record","parents","parentRecord","parentItem","getParentData","uniqueID","childParent","initialRender","expandStateMapping","expanded","findChildrenRecords","hasChildRecords","childRecords","concat","isOffline","dm","ready","extendArray","array","objArr","obj","j","getPlainData","value","index","level","taskData","requireFilter","idFilter","id","isHidden","el","style","window","getComputedStyle","display","visibility"],"mappings":"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","sourcesContent":["import { getObject } from '@syncfusion/ej2-grids';\nimport { DataManager, ODataAdaptor, UrlAdaptor } from '@syncfusion/ej2-data';\nimport { WebApiAdaptor, WebMethodAdaptor, CacheAdaptor } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Specifies whether remote data binding\n */\nexport function isRemoteData(parent) {\n    if (parent.dataSource instanceof DataManager) {\n        var adaptor = parent.dataSource.adaptor;\n        return (adaptor instanceof ODataAdaptor ||\n            (adaptor instanceof WebApiAdaptor) || (adaptor instanceof WebMethodAdaptor) ||\n            (adaptor instanceof CacheAdaptor) || adaptor instanceof UrlAdaptor);\n    }\n    return false;\n}\n/**\n * @param {TreeGrid | IGrid} parent - Tree Grid or Grid instance\n * @returns {boolean} - Returns whether custom binding\n */\nexport function isCountRequired(parent) {\n    if (parent.dataSource && 'result' in parent.dataSource) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns whether checkbox column is enabled\n */\nexport function isCheckboxcolumn(parent) {\n    for (var i = 0; i < parent.columns.length; i++) {\n        if (parent.columns[i].showCheckbox) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns whether filtering and searching done\n */\nexport function isFilterChildHierarchy(parent) {\n    if ((!isNullOrUndefined(parent.grid.searchSettings.key) && parent.grid.searchSettings.key !== '' &&\n        (parent.searchSettings.hierarchyMode === 'Child' || parent.searchSettings.hierarchyMode === 'None')) ||\n        (parent.allowFiltering && parent.grid.filterSettings.columns.length &&\n            (parent.filterSettings.hierarchyMode === 'Child' || parent.filterSettings.hierarchyMode === 'None'))) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {Object} records - Define records for which parent records has to be found\n * @hidden\n * @returns {Object} - Returns parent records collection\n */\nexport function findParentRecords(records) {\n    var datas = [];\n    var recordsLength = Object.keys(records).length;\n    for (var i = 0, len = recordsLength; i < len; i++) {\n        var hasChild = getObject('hasChildRecords', records[i]);\n        if (hasChild) {\n            datas.push(records[i]);\n        }\n    }\n    return datas;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns the expand status of record\n * @param {ITreeData} record - Define the record for which expand status has be found\n * @param {ITreeData[]} parents - Parent Data collection\n * @hidden\n */\nexport function getExpandStatus(parent, record, parents) {\n    var parentRecord = isNullOrUndefined(record.parentItem) ? null :\n        getParentData(parent, record.parentItem.uniqueID);\n    var childParent;\n    if (parentRecord != null) {\n        if (parent.initialRender && !isNullOrUndefined(parentRecord[parent.expandStateMapping])\n            && !parentRecord[parent.expandStateMapping]) {\n            parentRecord.expanded = false;\n            return false;\n        }\n        else if (parentRecord.expanded === false) {\n            return false;\n        }\n        else if (parentRecord.parentItem) {\n            childParent = getParentData(parent, parentRecord.parentItem.uniqueID);\n            if (childParent && parent.initialRender && !isNullOrUndefined(childParent[parent.expandStateMapping])\n                && !childParent[parent.expandStateMapping]) {\n                childParent.expanded = false;\n                return false;\n            }\n            if (childParent && childParent.expanded === false) {\n                return false;\n            }\n            else if (childParent) {\n                return getExpandStatus(parent, childParent, parents);\n            }\n            return true;\n        }\n        else {\n            return true;\n        }\n    }\n    else {\n        return true;\n    }\n}\n/**\n * @param {ITreeData} records - Define the record for which child records has to be found\n * @returns {Object[]} - Returns child records collection\n * @hidden\n */\nexport function findChildrenRecords(records) {\n    var datas = [];\n    if (isNullOrUndefined(records) || (!records.hasChildRecords && !isNullOrUndefined(records.childRecords)\n        && !records.childRecords.length)) {\n        return [];\n    }\n    if (!isNullOrUndefined(records.childRecords)) {\n        var childRecords = records.childRecords;\n        for (var i = 0, len = Object.keys(childRecords).length; i < len; i++) {\n            datas.push(childRecords[i]);\n            if (childRecords[i].hasChildRecords || (!isNullOrUndefined(childRecords[i].childRecords) &&\n                childRecords[i].childRecords.length)) {\n                datas = datas.concat(findChildrenRecords(childRecords[i]));\n            }\n        }\n    }\n    return datas;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns whether local data binding\n */\nexport function isOffline(parent) {\n    if (isRemoteData(parent)) {\n        var dm = parent.dataSource;\n        return !isNullOrUndefined(dm.ready);\n    }\n    return true;\n}\n/**\n * @param {Object[]} array - Defines the array to be cloned\n * @returns {Object[]} - Returns cloned array collection\n */\nexport function extendArray(array) {\n    var objArr = [];\n    var obj;\n    var keys;\n    for (var i = 0; array && i < array.length; i++) {\n        keys = Object.keys(array[i]);\n        obj = {};\n        for (var j = 0; j < keys.length; j++) {\n            obj[keys[j]] = array[i][keys[j]];\n        }\n        objArr.push(obj);\n    }\n    return objArr;\n}\n/**\n * @param {ITreeData} value - Defined the dirty data to be cleaned\n * @returns {ITreeData} - Returns cleaned original data\n */\nexport function getPlainData(value) {\n    delete value.hasChildRecords;\n    delete value.childRecords;\n    delete value.index;\n    delete value.parentItem;\n    delete value.level;\n    delete value.taskData;\n    delete value.uniqueID;\n    return value;\n}\n/**\n * @param {TreeGrid} parent - TreeGrid instance\n * @param {string} value - IdMapping field name\n * @param {boolean} requireFilter - Specified whether treegrid data is filtered\n * @returns {ITreeData} - Returns IdMapping matched record\n */\nexport function getParentData(parent, value, requireFilter) {\n    if (requireFilter) {\n        var idFilter = 'uniqueIDFilterCollection';\n        return parent[idFilter][value];\n    }\n    else {\n        var id = 'uniqueIDCollection';\n        return parent[id][value];\n    }\n}\n/**\n * @param {HTMLTableRowElement} el - Row element\n * @returns {boolean} - Returns whether hidden\n */\nexport function isHidden(el) {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n}\n"]},"metadata":{},"sourceType":"module"}