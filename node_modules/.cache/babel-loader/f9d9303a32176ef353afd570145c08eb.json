{"ast":null,"code":"import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, ensureLastRow, ensureFirstRow, getEditedDataIndex, resetRowIndex, setRowElements } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\n\nvar InfiniteScroll =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid infinite scrolling.\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n   * @hidden\n   */\n  function InfiniteScroll(parent, serviceLocator) {\n    this.infiniteCache = {};\n    this.infiniteCurrentViewData = {};\n    this.infiniteFrozenCache = {};\n    this.isDownScroll = false;\n    this.isUpScroll = false;\n    this.isScroll = true;\n    this.enableContinuousScroll = false;\n    this.initialRender = true;\n    this.isRemove = false;\n    this.isInitialCollapse = false;\n    this.prevScrollTop = 0;\n    this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting'];\n    this.keys = ['downArrow', 'upArrow', 'PageUp', 'PageDown'];\n    this.rowTop = 0;\n    this.isInitialMovableRender = true;\n    this.virtualInfiniteData = {};\n    this.isCancel = false;\n    this.emptyRowData = {};\n    this.isNormaledit = false;\n    this.isInfiniteScroll = false;\n    this.isLastPage = false;\n    this.isInitialRender = true;\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n    this.addEventListener();\n    this.widthService = serviceLocator.getService('widthService');\n    this.rowModelGenerator = this.parent.isFrozenGrid() ? new FreezeRowModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n  }\n\n  InfiniteScroll.prototype.getModuleName = function () {\n    return 'infiniteScroll';\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.addEventListener = function () {\n    this.parent.on(events.dataReady, this.onDataReady, this);\n    this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n    this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n    this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n    this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n    this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n    this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n    this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n    this.parent.on(events.setInfiniteCache, this.setCache, this);\n    this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n    this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n    this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n    this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n    this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n    this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n    this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n    this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n    this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n    this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n    this.parent.on(events.modelChanged, this.modelChanged, this);\n    this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n    this.actionBeginFunction = this.actionBegin.bind(this);\n    this.actionCompleteFunction = this.actionComplete.bind(this);\n    this.parent.on(events.deleteComplete, this.deleteComplate, this);\n    this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.dataReady, this.onDataReady);\n    this.parent.off(events.dataSourceModified, this.dataSourceModified);\n    this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n    this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n    this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n    this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n    this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n    this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n    this.parent.off(events.setInfiniteCache, this.setCache);\n    this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n    this.parent.off(events.keyPressed, this.infiniteCellFocus);\n    this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n    this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n    this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n    this.parent.off(events.editReset, this.resetInfiniteEdit);\n    this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n    this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n    this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n    this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n    this.parent.off(events.modelChanged, this.modelChanged);\n    this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n    this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n  };\n\n  InfiniteScroll.prototype.updateCurrentViewData = function () {\n    var gObj = this.parent;\n\n    if (gObj.groupSettings.columns.length) {\n      return;\n    }\n\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    gObj.currentViewData = [];\n    var page = gObj.pageSettings.currentPage;\n    var isCache = gObj.infiniteScrollSettings.enableCache;\n    var blocks = gObj.infiniteScrollSettings.maxBlocks;\n    var isMiddlePage = isCache && (page > blocks || this.isUpScroll && page > 1);\n    var start = isMiddlePage ? this.isUpScroll ? page : page - blocks + 1 : 1;\n    var end = isMiddlePage ? start + blocks - 1 : isCache ? blocks : keys.length;\n\n    for (var i = start; i <= end; i++) {\n      if (this.infiniteCurrentViewData[i]) {\n        gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n    var page = this.parent.pageSettings.currentPage;\n    var size = this.parent.pageSettings.pageSize;\n    var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var cache = this.parent.infiniteScrollSettings.enableCache;\n\n    if (!this.parent.groupSettings.columns.length) {\n      var isAdd = e.args.requestType === 'save';\n      var isDelete = e.args.requestType === 'delete';\n\n      if (!cache && (isAdd || isDelete)) {\n        if (isAdd) {\n          this.infiniteCurrentViewData[1] = e.data.concat(this.infiniteCurrentViewData[1]);\n        } else {\n          this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n        }\n      } else {\n        if (blocks > 1 && e.data.length === blocks * size) {\n          this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n        } else {\n          this.infiniteCurrentViewData[page] = e.data.slice();\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.deleteComplate = function () {\n    if (this.parent.isFrozenGrid() && !this.parent.infiniteScrollSettings.enableCache) {\n      this.parent.contentModule.refreshScrollOffset();\n    }\n  };\n\n  InfiniteScroll.prototype.modelChanged = function (args) {\n    if (args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n      var rows = this.parent.getRows();\n      this.firstIndex = parseInt(rows[0].getAttribute(literals.ariaRowIndex), 10);\n      this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n      this.lastIndex = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10);\n\n      if (args.requestType === 'delete') {\n        var rowObj = this.parent.getRowsObject();\n        args.startIndex = this.parent.infiniteScrollSettings.enableCache ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n      } else {\n        args.startIndex = this.firstIndex;\n      }\n\n      if (!this.parent.infiniteScrollSettings.enableCache && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n        this.isLastPage = true;\n        this.lastIndex = this.lastIndex - 1;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n    if (this.isNormaledit) {\n      this.isAdd = true;\n\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        if (!Object.keys(this.emptyRowData).length) {\n          this.createEmptyRowdata();\n        }\n\n        if (this.parent.pageSettings.currentPage > 1) {\n          args.startEdit = false;\n          this.resetInfiniteBlocks({}, true);\n          this.makeRequest({\n            currentPage: 1\n          });\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n    if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete' || args.e.requestType === 'save' && this.requestType === 'add')) {\n      var frozenCols = this.parent.isFrozenGrid();\n      var rowElms = this.parent.getRows();\n      var rows = this.parent.getRowsObject();\n\n      if (this.ensureRowAvailability(rows, args.result[0])) {\n        this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n\n        if (frozenCols) {\n          var rows_1 = this.parent.getMovableRowsObject();\n          this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n\n          if (this.parent.getFrozenMode() === literals.leftRight) {\n            var frRows = this.parent.getFrozenRightRowsObject();\n            this.resetRowIndex(frRows, args.e, this.parent.getFrozenRightRows(), this.requestType === 'add');\n          }\n        }\n\n        if (!this.isLastPage) {\n          this.createRow(rows, args);\n        } else {\n          this.isLastPage = false;\n          this.parent.pageSettings.currentPage = this.maxPage;\n\n          if (this.parent.selectionModule.index < this.parent.frozenRows) {\n            remove(rowElms[this.parent.frozenRows - 1]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n\n            if (frozenCols) {\n              var movableRows = this.parent.getMovableDataRows();\n              remove(movableRows[this.parent.frozenRows]);\n              this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n\n              if (this.parent.getFrozenMode() === literals.leftRight) {\n                var rightRows = this.parent.getFrozenRightDataRows();\n                remove(rightRows[this.parent.frozenRows]);\n                this.createRow([this.parent.getFrozenRightRowsObject()[this.parent.frozenRows - 1]], args, false, true, true);\n              }\n            }\n\n            setRowElements(this.parent);\n          }\n        }\n      }\n\n      this.parent.hideSpinner();\n\n      if (this.requestType === 'delete') {\n        this.parent.notify(events.deleteComplete, args.e);\n      } else {\n        this.parent.notify(events.saveComplete, args.e);\n      }\n    }\n\n    this.parent.notify(events.freezeRender, {\n      case: 'refreshHeight'\n    });\n  };\n\n  InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n    var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n    var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n    var tbody;\n\n    if (isFrozenRight) {\n      tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n    } else {\n      tbody = !this.parent.isFrozenGrid() ? this.parent.getContent().querySelector(literals.tbody) : isMovable ? this.parent.getMovableVirtualContent().querySelector(literals.tbody) : this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n    }\n\n    if (this.parent.frozenRows) {\n      tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add' ? !this.parent.isFrozenGrid() ? this.parent.getHeaderContent().querySelector(literals.tbody) : isMovable ? this.parent.getMovableVirtualHeader().querySelector(literals.tbody) : isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector(literals.tbody) : this.parent.getFrozenVirtualHeader().querySelector(literals.tbody) : tbody;\n    }\n\n    var notifyArgs = {\n      rows: rows,\n      cancel: false,\n      args: args,\n      isMovable: isMovable,\n      isFrozenRows: isFrozenRows,\n      isFrozenRight: isFrozenRows,\n      row: row\n    };\n    this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n\n    if (!notifyArgs.cancel) {\n      for (var i = row.length - 1; i >= 0; i--) {\n        if (this.requestType === 'delete') {\n          tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n        } else {\n          tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n        }\n      }\n    }\n\n    if (!isFrozenRows && this.parent.frozenRows && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n      var rowElems = isMovable ? this.parent.getMovableDataRows() : isFrozenRight ? this.parent.getFrozenRightDataRows() : this.parent.getRows();\n      var index = (isMovable || isFrozenRight) && this.requestType === 'add' ? this.parent.frozenRows : this.parent.frozenRows - 1;\n      remove(rowElems[index]);\n      this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true, isFrozenRight);\n    }\n\n    if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n      if (isFrozenRight) {\n        setRowElements(this.parent);\n        this.parent.contentModule.rightFreezeRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n      } else if (!this.parent.isFrozenGrid() || isMovable) {\n        setRowElements(this.parent);\n        this.parent.contentModule.visibleRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n\n        if (this.parent.getFrozenMode() === literals.leftRight) {\n          this.createRow(this.parent.getFrozenRightRowsObject(), args, false, false, true);\n        }\n      } else {\n        this.parent.contentModule.visibleFrozenRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n        this.createRow(this.parent.getMovableRowsObject(), args, true);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n    var resume = true;\n\n    if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache && this.parent.sortSettings.columns && this.requestType === 'add') {\n      var key = this.parent.getPrimaryKeyFieldNames()[0];\n\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[i].data[key] === data[key]) {\n          resume = false;\n          break;\n        }\n      }\n    }\n\n    return resume;\n  };\n\n  InfiniteScroll.prototype.generateRows = function (data, args) {\n    return this.rowModelGenerator.generateRows(data, args);\n  };\n\n  InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n    var _this = this;\n\n    var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n    var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n\n    if (isAdd) {\n      if (isRemove) {\n        if (isFrozen && !this.parent.groupSettings.columns.length) {\n          this.swapCurrentViewData(1, true);\n        }\n\n        remove(rowElms[rows.length - 1]);\n        rowElms.splice(rows.length - 1, 1);\n        rows.splice(rows.length - 1, 1);\n      }\n    } else {\n      rows.filter(function (e, index) {\n        if (e.data[keyField] === args.data[0][keyField]) {\n          if (isFrozen && !_this.parent.groupSettings.columns.length) {\n            var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n\n            _this.resetInfiniteCurrentViewData(page, index);\n          }\n\n          rows.splice(index, 1);\n          remove(rowElms[index]);\n          rowElms.splice(index, 1);\n        }\n      });\n    }\n\n    var startIndex = isAdd ? 1 : 0;\n    resetRowIndex(this.parent, rows, rowElms, startIndex);\n  };\n\n  InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n    index = index - (page - 1) * this.parent.pageSettings.pageSize;\n    this.infiniteCurrentViewData[page].splice(index, 1);\n    this.swapCurrentViewData(page, false);\n  };\n\n  InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var end = isAdd ? keys.length + 1 : keys.length;\n\n    for (var i = page; i < end; i++) {\n      if (this.infiniteCurrentViewData[i + 1]) {\n        var pageIndex = isAdd ? i : i + 1;\n        var index = isAdd ? this.infiniteCurrentViewData[i].length - 1 : 0;\n        var data = this.infiniteCurrentViewData[pageIndex].splice(index, 1);\n\n        if (isAdd) {\n          this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n\n          if (i + 1 === end - 1) {\n            this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n          }\n        } else {\n          this.infiniteCurrentViewData[i].push(data[0]);\n        }\n      }\n    }\n\n    this.updateCurrentViewData();\n  };\n\n  InfiniteScroll.prototype.setDisplayNone = function (args) {\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      var frozenCols = this.parent.isFrozenGrid();\n      var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n\n      for (var i = 1; i <= keys.length; i++) {\n        var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0] : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n        cache.filter(function (e) {\n          e.cells[args.index].visible = args.visible === '';\n        });\n      }\n\n      this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n    }\n  };\n\n  InfiniteScroll.prototype.refreshInfiniteCache = function (data) {\n    this.getEditedRowObject().data = data;\n  };\n\n  InfiniteScroll.prototype.getEditedRowObject = function () {\n    var rowObjects = this.parent.getRowsObject();\n    var editedrow;\n\n    for (var i = 0; i < rowObjects.length; i++) {\n      if (rowObjects[i].index === this.editRowIndex) {\n        editedrow = rowObjects[i];\n      }\n    }\n\n    return editedrow;\n  };\n\n  InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n    if (this.isNormaledit) {\n      if (!this.isAdd && args.data) {\n        this.updateCurrentViewRecords(args.data);\n      }\n\n      this.isAdd = false;\n    }\n  };\n\n  InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n    var index = getEditedDataIndex(this.parent, data);\n\n    if (!isNullOrUndefined(index)) {\n      this.parent.getCurrentViewRecords()[index] = data;\n    }\n  };\n\n  InfiniteScroll.prototype.actionBegin = function (args) {\n    if (args.requestType === 'add' || args.requestType === 'delete') {\n      this.requestType = args.requestType;\n    } else if (args.action === 'add' && args.requestType === 'save') {\n      this.requestType = args.action;\n    }\n\n    if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching' || args.requestType === 'sorting' || args.requestType === 'filtering') {\n      this.isInitialRender = true;\n    }\n  };\n\n  InfiniteScroll.prototype.actionComplete = function (args) {\n    if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n      this.requestType = this.empty;\n      this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n      this.isAdd = this.isEdit = false;\n\n      if (this.isNormaledit) {\n        this.editRowIndex = this.empty;\n        this.virtualInfiniteData = {};\n        this.parent.editModule.previousVirtualData = {};\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.resetInfiniteEdit = function () {\n    if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n      if (this.parent.editSettings.allowEditing && this.isEdit || this.parent.editSettings.allowAdding && this.isAdd) {\n        this.parent.isEdit = true;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n    data.virtualData = this.virtualInfiniteData;\n    data.isAdd = this.isAdd;\n    data.isCancel = this.isCancel;\n  };\n\n  InfiniteScroll.prototype.editActionBegin = function (e) {\n    this.isEdit = true;\n    this.editRowIndex = e.index;\n    var rowObject = extend({}, this.getEditedRowObject().data);\n    e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n  };\n\n  InfiniteScroll.prototype.dataSourceModified = function () {\n    this.resetInfiniteBlocks({\n      requestType: this.empty\n    }, true);\n  };\n\n  InfiniteScroll.prototype.onDataReady = function (e) {\n    if (!isNullOrUndefined(e.count)) {\n      this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n    }\n  };\n\n  InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n    this.isInitialCollapse = !isExpand;\n  };\n\n  InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n    this.restoreInfiniteEdit();\n    this.restoreInfiniteAdd();\n    var targetEle = e.target;\n    var isInfinite = targetEle.classList.contains(literals.content);\n\n    if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n      var scrollEle = this.parent.getContent().firstElementChild;\n      this.prevScrollTop = scrollEle.scrollTop;\n      var rows = this.parent.getRows();\n      var index = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10) + 1;\n      var prevPage = this.parent.pageSettings.currentPage;\n      var args = void 0;\n      var offset = targetEle.scrollHeight - targetEle.scrollTop;\n      var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n      var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n      var isBottom = floor === targetEle.clientHeight || round === targetEle.clientHeight;\n\n      if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isUpScroll = false;\n          this.isDownScroll = true;\n        }\n\n        var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n        var row = rows_2[rows_2.length - 1];\n        var rowIndex = parseInt(row.getAttribute(literals.ariaRowIndex), 10);\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n        args = {\n          requestType: 'infiniteScroll',\n          currentPage: this.parent.pageSettings.currentPage,\n          prevPage: prevPage,\n          startIndex: index,\n          direction: 'down'\n        };\n        this.makeRequest(args);\n      }\n\n      if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0 && this.parent.pageSettings.currentPage !== 1) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isDownScroll = false;\n          this.isUpScroll = true;\n        }\n\n        var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n        var rowIndex = parseInt(row[this.parent.pageSettings.pageSize - 1].getAttribute(literals.ariaRowIndex), 10);\n        var startIndex = parseInt(row[0].getAttribute(literals.ariaRowIndex), 10) - this.parent.pageSettings.pageSize;\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n\n        if (this.parent.pageSettings.currentPage) {\n          args = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: startIndex,\n            direction: 'up'\n          };\n          this.makeRequest(args);\n        }\n      }\n\n      if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n        if (this.isDownScroll || this.isUpScroll) {\n          scrollEle.scrollTop = this.top;\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.makeRequest = function (args) {\n    var _this = this;\n\n    if (this.parent.pageSettings.currentPage !== args.prevPage) {\n      if (this.parent.pageSettings.currentPage <= this.maxPage) {\n        this.isInfiniteScroll = true;\n\n        if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n\n            _this.parent.notify('model-changed', args);\n          }, 100);\n        } else {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n\n            _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n          }, 100);\n        }\n      } else {\n        this.parent.pageSettings.currentPage = this.maxPage;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infinitePageQuery = function (query) {\n    if (this.initialRender) {\n      this.initialRender = false;\n      this.intialPageQuery(query);\n    } else {\n      if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n        this.editPageQuery(query);\n      } else {\n        query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.editPageQuery = function (query) {\n    var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var isCache = this.parent.infiniteScrollSettings.enableCache;\n\n    if (isCache) {\n      this.infiniteCache = {};\n      this.infiniteFrozenCache = {};\n      this.infiniteCurrentViewData = {};\n      query.skip(this.firstIndex);\n      query.take(initialBlocks * this.parent.pageSettings.pageSize);\n    } else {\n      if (this.parent.editSettings.mode === 'Dialog') {\n        this.parent.clearSelection();\n      }\n\n      var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n      query.skip(index);\n      query.take(1);\n    }\n  };\n\n  InfiniteScroll.prototype.intialPageQuery = function (query) {\n    if (this.parent.infiniteScrollSettings.enableCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n      this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n    }\n\n    var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n    query.page(1, pageSize);\n  };\n\n  InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n    if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n      this.pressedKey = e.keyArgs.action;\n      var ele = document.activeElement;\n      var rowIndex = parseInt(ele.parentElement.getAttribute(literals.ariaRowIndex), 10);\n      var scrollEle = this.parent.getContent().firstElementChild;\n      this.rowIndex = e.keyArgs.action === 'downArrow' ? rowIndex + 1 : rowIndex - 1;\n      this.cellIndex = parseInt(ele.getAttribute(literals.ariaColIndex), 10);\n      var row = this.parent.getRowByIndex(rowIndex);\n      var visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight());\n\n      if (!row || ensureLastRow(row, this.parent) || ensureFirstRow(row, this.rowTop)) {\n        var height = row ? row.getBoundingClientRect().height : this.parent.getRowHeight();\n\n        if (!this.parent.infiniteScrollSettings.enableCache) {\n          if (e.keyArgs.action === 'downArrow' && (ensureLastRow(row, this.parent) || !row)) {\n            var nTop = (this.rowIndex - visibleRowCount) * height;\n            var oTop = scrollEle.scrollTop + this.parent.getRowHeight();\n            scrollEle.scrollTop = nTop < oTop ? oTop : nTop;\n          }\n\n          if (e.keyArgs.action === 'upArrow' && ensureFirstRow(row, this.rowTop)) {\n            scrollEle.scrollTop = this.rowIndex * height;\n          }\n        }\n      } else {\n        this.pressedKey = this.empty;\n      }\n    } else if (e.key === 'PageDown' || e.key === 'PageUp') {\n      this.pressedKey = e.key;\n    }\n  };\n\n  InfiniteScroll.prototype.createEmptyRowdata = function () {\n    var _this = this;\n\n    this.parent.getColumns().filter(function (e) {\n      _this.emptyRowData[e.field] = _this.empty;\n    });\n  };\n\n  InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n    var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n    var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n    var gridForm = this.parent.element.querySelector('.e-gridform');\n\n    if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n      var rowData = editForm ? extend({}, this.getEditedRowObject().data) : extend({}, this.emptyRowData);\n      this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n\n      if (this.parent.isFrozenGrid()) {\n        this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n    var content = this.parent.getContent().firstElementChild;\n    var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n\n    if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n      if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n        var row = this.parent.getRowByIndex(this.editRowIndex);\n\n        if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n          var top_1 = row.getBoundingClientRect().top;\n\n          if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n            this.parent.isEdit = false;\n            this.parent.editModule.startEdit(row);\n          }\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n    var content = this.parent.getContent().firstElementChild;\n\n    if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n      var isTop = content.scrollTop < this.parent.getRowHeight();\n\n      if (isTop) {\n        this.parent.isEdit = false;\n        this.parent.addRecord();\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n    var frozenCols = this.parent.isFrozenGrid();\n    var scrollEle = this.parent.getContent().firstElementChild;\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n    var isMovable = this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable';\n\n    if (isInfiniteScroll && !e.args.isFrozen && !isMovable || !isInfiniteScroll) {\n      if (isInfiniteScroll && e.args.direction === 'up') {\n        e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n      } else {\n        e.tbody.appendChild(e.frag);\n      }\n    }\n\n    if (!frozenCols) {\n      this.parent.contentModule.getTable().appendChild(e.tbody);\n      this.updateCurrentViewData();\n    } else {\n      if (isInfiniteScroll) {\n        if (e.tableName === literals.frozenLeft || this.parent.getFrozenMode() === 'Right' && e.tableName === literals.frozenRight) {\n          this.frozenFrag = e.frag;\n        } else if (this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable') {\n          this.movableFrag = e.frag;\n        } else {\n          var tbody = this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n\n          if (e.args.direction === 'up') {\n            tbody.insertBefore(this.frozenFrag, tbody.firstElementChild);\n          } else {\n            tbody.appendChild(this.frozenFrag);\n          }\n\n          if (e.tableName === literals.frozenRight) {\n            this.parent.getMovableVirtualContent().querySelector(literals.tbody).appendChild(this.movableFrag);\n            this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody).appendChild(e.frag);\n          } else {\n            this.parent.getMovableVirtualContent().querySelector('.' + literals.table).appendChild(e.tbody);\n          }\n\n          this.parent.contentModule.refreshScrollOffset();\n          this.updateCurrentViewData();\n        }\n      } else {\n        var table = void 0;\n\n        if (e.tableName === literals.frozenLeft) {\n          table = this.parent.getFrozenVirtualContent().querySelector('.' + literals.table);\n        } else if (e.tableName === 'movable') {\n          table = this.parent.getMovableVirtualContent().querySelector('.' + literals.table);\n\n          if (this.parent.getFrozenMode() !== literals.leftRight) {\n            this.parent.contentModule.refreshScrollOffset();\n            this.updateCurrentViewData();\n          }\n        } else {\n          table = this.parent.element.querySelector('.e-frozen-right-content').querySelector('.' + literals.table);\n\n          if (this.parent.getFrozenMode() === literals.leftRight) {\n            this.parent.contentModule.refreshScrollOffset();\n            this.updateCurrentViewData();\n          }\n        }\n\n        table.appendChild(e.tbody);\n        this.widthService.refreshFrozenScrollbar();\n      }\n    }\n\n    if (this.isInitialRender && !e.args.isFrozen) {\n      this.isInitialRender = false;\n      this.parent.scrollModule.setHeight();\n    }\n\n    if (!e.args.isFrozen) {\n      this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n\n      if (isInfiniteScroll) {\n        if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n          scrollEle.scrollTop = this.top;\n        }\n\n        setRowElements(this.parent);\n        this.selectNewRow(e.tbody, e.args.startIndex);\n        this.pressedKey = undefined;\n      }\n\n      this.restoreInfiniteAdd();\n      this.isScroll = true;\n    }\n\n    this.isInfiniteScroll = false;\n  };\n\n  InfiniteScroll.prototype.selectNewRow = function (tbody, startIndex) {\n    var _this = this;\n\n    var row = this.parent.getRowByIndex(this.rowIndex);\n\n    if (this.keys.some(function (value) {\n      return value === _this.pressedKey;\n    })) {\n      if (this.pressedKey === 'downArrow' || this.parent.infiniteScrollSettings.enableCache && this.pressedKey === 'upArrow') {\n        setTimeout(function () {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          var target = row.cells[0];\n          target.focus({\n            preventScroll: true\n          });\n\n          _this.parent.selectRow(_this.rowIndex);\n\n          _this.parent.getContent().firstElementChild.scrollTop += _this.parent.getRowHeight();\n        }, 0);\n      }\n\n      if (this.pressedKey === 'PageDown') {\n        var row_1 = this.parent.getRowByIndex(startIndex);\n\n        if (row_1) {\n          row_1.cells[0].focus();\n        }\n      }\n\n      if (this.pressedKey === 'PageUp') {\n        tbody.querySelector('.' + literals.row).cells[0].focus();\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n\n    if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n      var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n\n      if (e.args.direction === 'down') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        }\n\n        var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n        this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n      }\n\n      if (e.args.direction === 'up') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        } else {\n          this.removeBottomRows(rows, rows.length - 1, e.args);\n        }\n      }\n\n      this.isScroll = false;\n      this.top = this.calculateScrollTop(e.args);\n    }\n  };\n\n  InfiniteScroll.prototype.calculateScrollTop = function (args) {\n    var top = 0;\n    var scrollCnt = this.parent.getContent().firstElementChild;\n\n    if (args.direction === 'down') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.captionRowHeight();\n      }\n\n      var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n      var captionCount = 0;\n\n      if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n        captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n      }\n\n      var value = captionCount ? captionCount : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n      var currentViewRowCount = 0;\n      var i = 0;\n\n      while (currentViewRowCount < scrollCnt.clientHeight) {\n        i++;\n        currentViewRowCount = i * this.parent.getRowHeight();\n      }\n\n      i = i - 1;\n      top += (value - i) * this.parent.getRowHeight();\n    }\n\n    if (args.direction === 'up') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n      } else if (this.isInitialCollapse) {\n        var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n        var count = 0;\n\n        for (var i = 0; i < groupedData.length; i++) {\n          if (groupedData[i].isCaptionRow) {\n            count++;\n          }\n        }\n\n        top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n      } else {\n        top += this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth();\n      }\n    }\n\n    return top;\n  };\n\n  InfiniteScroll.prototype.captionRowHeight = function () {\n    var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n    return rows.length * this.parent.getRowHeight();\n  };\n\n  InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n    var frozeCols = this.parent.isFrozenGrid();\n    var frRows = this.parent.getFrozenMode() === literals.leftRight ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n\n    for (var i = 0; i <= maxIndx; i++) {\n      if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1 && i > maxIndx - this.parent.frozenRows) {\n        continue;\n      }\n\n      remove(rows[i]);\n\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n\n      if (frRows) {\n        remove(frRows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n    var cnt = 0;\n    var frozeCols = this.parent.isFrozenGrid();\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n    var frRows = this.parent.getFrozenMode() === literals.leftRight ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n    var pageSize = this.parent.pageSettings.pageSize;\n\n    if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n    }\n\n    if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n    }\n\n    for (var i = maxIndx; cnt < pageSize; i--) {\n      cnt++;\n      remove(rows[i]);\n\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n\n      if (frRows) {\n        remove(frRows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n    if (args.direction === 'down') {\n      var lastRow = this.parent.getRows()[this.parent.pageSettings.pageSize];\n      var lastRowIndex = parseInt(lastRow.getAttribute(literals.ariaRowIndex), 10) - 1;\n      var k = 0;\n\n      for (var i = 0; k < lastRowIndex; i++) {\n        if (!rows[i].classList.contains(literals.row)) {\n          remove(rows[i]);\n        } else {\n          k = parseInt(rows[i].getAttribute(literals.ariaRowIndex), 10);\n        }\n      }\n    }\n\n    if (args.direction === 'up') {\n      var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n      var lastIndex = parseInt(rowElements[rowElements.length - 1].getAttribute(literals.ariaRowIndex), 10);\n      var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n      var startIndex = 0;\n\n      for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n        startIndex += this.infiniteCache[i].length;\n      }\n\n      for (var i = startIndex; i < rows.length; i++) {\n        remove(rows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n\n    if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n      if (this.actions.some(function (value) {\n        return value === args.requestType;\n      }) || isDataModified) {\n        var scrollEle = this.parent.getContent().firstElementChild;\n        this.initialRender = true;\n        scrollEle.scrollTop = 0;\n        this.parent.pageSettings.currentPage = 1;\n        this.infiniteCache = this.infiniteFrozenCache = {};\n        this.infiniteCurrentViewData = {};\n        this.resetContentModuleCache({});\n        this.isRemove = false;\n        this.top = 0;\n        this.isInitialMovableRender = true;\n        this.isInitialCollapse = false;\n        this.parent.contentModule.isRemove = this.isRemove;\n        this.parent.contentModule.isAddRows = this.isRemove;\n        this.parent.contentModule.visibleRows = [];\n        this.parent.contentModule.visibleFrozenRows = [];\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.setCache = function (e) {\n    if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n      var frozeCols = this.parent.isFrozenGrid();\n      var idx = e.args.isFrozen ? 1 : 0;\n      var isEdit = e.args.requestType !== 'infiniteScroll' && (this.requestType === 'delete' || this.requestType === 'add');\n      var currentPage = this.parent.pageSettings.currentPage;\n\n      if (frozeCols && this.isInitialMovableRender || !frozeCols && !Object.keys(this.infiniteCache).length || isEdit) {\n        this.isInitialMovableRender = !e.args.isFrozen;\n        this.setInitialCache(e.modelData, e.args, isEdit);\n      }\n\n      if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n        this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n        this.resetContentModuleCache(this.infiniteCache);\n      }\n\n      if (frozeCols) {\n        if (idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]) || !this.infiniteFrozenCache[currentPage][idx].length) {\n          this.createFrozenCache(currentPage);\n          this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n\n          if (idx === 1) {\n            this.resetContentModuleCache(this.infiniteFrozenCache);\n          }\n        }\n      }\n\n      if (e.isInfiniteScroll && !this.isRemove) {\n        this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n        this.parent.contentModule.isRemove = this.isRemove;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n    var frozenCols = this.parent.isFrozenGrid();\n    var idx = args.isFrozen ? 1 : 0;\n    var k = !isEdit ? 1 : this.firstBlock;\n\n    for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n      var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n      var endIndex = i * this.parent.pageSettings.pageSize;\n\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n        this.setInitialGroupCache(data, k, startIndex, endIndex);\n      } else {\n        if (isCurrentViewData) {\n          this.infiniteCurrentViewData[k] = data.slice(startIndex, endIndex);\n        } else {\n          if (frozenCols) {\n            this.createFrozenCache(k);\n            this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n            this.resetContentModuleCache(this.infiniteFrozenCache);\n          } else {\n            this.infiniteCache[k] = data.slice(startIndex, endIndex);\n            this.resetContentModuleCache(this.infiniteCache);\n          }\n        }\n      }\n\n      k++;\n    }\n  };\n\n  InfiniteScroll.prototype.createFrozenCache = function (index) {\n    if (!this.infiniteFrozenCache[index]) {\n      this.infiniteFrozenCache[index] = [[], []];\n    }\n  };\n\n  InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n    var pageData = [];\n    var startIndex = 0;\n\n    for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n      startIndex += this.infiniteCache[i].length;\n    }\n\n    var k = sIndex;\n\n    for (var i = startIndex; i < data.length && k < eIndex; i++) {\n      if (data[i].index < eIndex || data[i].isCaptionRow) {\n        k = data[i].isCaptionRow ? k : data[i].index;\n        pageData.push(data[i]);\n      }\n\n      if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n        break;\n      }\n    }\n\n    this.infiniteCache[index] = pageData;\n    this.resetContentModuleCache(this.infiniteCache);\n  };\n\n  InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n    this.parent.contentModule.infiniteCache = data;\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return InfiniteScroll;\n}();\n\nexport { InfiniteScroll };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-grids/src/grid/actions/infinite-scroll.js"],"names":["isNullOrUndefined","remove","extend","RowModelGenerator","FreezeRowModelGenerator","RowRenderer","events","getScrollBarWidth","ensureLastRow","ensureFirstRow","getEditedDataIndex","resetRowIndex","setRowElements","literals","InfiniteScroll","parent","serviceLocator","infiniteCache","infiniteCurrentViewData","infiniteFrozenCache","isDownScroll","isUpScroll","isScroll","enableContinuousScroll","initialRender","isRemove","isInitialCollapse","prevScrollTop","actions","keys","rowTop","isInitialMovableRender","virtualInfiniteData","isCancel","emptyRowData","isNormaledit","isInfiniteScroll","isLastPage","isInitialRender","editSettings","mode","addEventListener","widthService","getService","rowModelGenerator","isFrozenGrid","prototype","getModuleName","on","dataReady","onDataReady","dataSourceModified","infinitePageQuery","infiniteScrollHandler","beforeCellFocused","infiniteCellFocus","appendInfiniteContent","appendInfiniteRows","removeInfiniteRows","removeInfiniteCacheRows","resetInfiniteBlocks","setInfiniteCache","setCache","initialCollapse","ensureIntialCollapse","keyPressed","infiniteShowHide","setDisplayNone","virtualScrollEditActionBegin","editActionBegin","getVirtualData","getVirtualInfiniteData","editReset","resetInfiniteEdit","virtualScrollEditSuccess","infiniteEditSuccess","refreshVirtualCache","refreshInfiniteCache","infiniteEditHandler","virtualScrollAddActionBegin","infiniteAddActionBegin","modelChanged","refreshInfiniteCurrentViewData","actionBeginFunction","actionBegin","bind","actionCompleteFunction","actionComplete","deleteComplete","deleteComplate","removeEventListener","isDestroyed","off","updateCurrentViewData","gObj","groupSettings","columns","length","Object","currentViewData","page","pageSettings","currentPage","isCache","infiniteScrollSettings","enableCache","blocks","maxBlocks","isMiddlePage","start","end","i","concat","e","size","pageSize","initialBlocks","cache","isAdd","args","requestType","isDelete","data","push","setInitialCache","slice","contentModule","refreshScrollOffset","rows","getRows","firstIndex","parseInt","getAttribute","ariaRowIndex","firstBlock","Math","ceil","lastIndex","rowObj","getRowsObject","startIndex","index","maxPage","createEmptyRowdata","startEdit","makeRequest","frozenCols","rowElms","ensureRowAvailability","result","rows_1","getMovableRowsObject","getMovableDataRows","getFrozenMode","leftRight","frRows","getFrozenRightRowsObject","getFrozenRightRows","createRow","selectionModule","frozenRows","movableRows","rightRows","getFrozenRightDataRows","hideSpinner","notify","saveComplete","freezeRender","case","isMovable","isFrozenRows","isFrozenRight","row","generateRows","rowRenderer","tbody","element","querySelector","getContent","getMovableVirtualContent","getFrozenVirtualContent","getHeaderContent","getMovableVirtualHeader","getFrozenVirtualHeader","notifyArgs","cancel","infiniteCrudCancel","appendChild","render","getColumns","insertBefore","firstElementChild","rowElems","rightFreezeRows","visibleRows","visibleFrozenRows","resume","sortSettings","key","getPrimaryKeyFieldNames","isFrozen","_this","keyField","swapCurrentViewData","splice","filter","resetInfiniteCurrentViewData","pageIndex","isFreeze","cells","visible","resetContentModuleCache","getEditedRowObject","rowObjects","editedrow","editRowIndex","updateCurrentViewRecords","getCurrentViewRecords","action","empty","isEdit","editModule","previousVirtualData","enableInfiniteScrolling","allowEditing","allowAdding","virtualData","rowObject","count","isExpand","restoreInfiniteEdit","restoreInfiniteAdd","targetEle","target","isInfinite","classList","contains","content","isLeft","scrollEle","scrollTop","prevPage","offset","scrollHeight","round","floor","clientHeight","isBottom","rows_2","call","querySelectorAll","rowIndex","direction","getElementsByClassName","top","setTimeout","getVirtualInfiniteEditedData","refreshInfiniteModeBlocks","query","intialPageQuery","editPageQuery","skip","take","clearSelection","byKey","keyArgs","pressedKey","ele","document","activeElement","parentElement","cellIndex","ariaColIndex","getRowByIndex","visibleRowCount","offsetHeight","getRowHeight","height","getBoundingClientRect","nTop","oTop","field","editForm","editedRow","addForm","addedRow","gridForm","rowData","getCurrentEditedData","frozenEdit","top_1","isTop","addRecord","tableName","frag","getTable","frozenLeft","frozenRight","frozenFrag","movableFrag","table","refreshFrozenScrollbar","scrollModule","setHeight","selectNewRow","undefined","some","value","focus","preventScroll","selectRow","row_1","getContentTable","allowGrouping","captionRows","removeCaptionRows","addRowCount","removeTopRows","removeBottomRows","calculateScrollTop","scrollCnt","captionRowHeight","captionCount","currentViewRowCount","groupedData","isCaptionRow","maxIndx","frozeCols","cnt","lastRow","lastRowIndex","k","rowElements","isDataModified","infiniteScrollModule","isAddRows","idx","modelData","createFrozenCache","isCurrentViewData","endIndex","setInitialGroupCache","sIndex","eIndex","pageData","destroy"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, ensureLastRow, ensureFirstRow, getEditedDataIndex, resetRowIndex, setRowElements } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\nvar InfiniteScroll = /** @class */ (function () {\n    /**\n     * Constructor for the Grid infinite scrolling.\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n     * @hidden\n     */\n    function InfiniteScroll(parent, serviceLocator) {\n        this.infiniteCache = {};\n        this.infiniteCurrentViewData = {};\n        this.infiniteFrozenCache = {};\n        this.isDownScroll = false;\n        this.isUpScroll = false;\n        this.isScroll = true;\n        this.enableContinuousScroll = false;\n        this.initialRender = true;\n        this.isRemove = false;\n        this.isInitialCollapse = false;\n        this.prevScrollTop = 0;\n        this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting'];\n        this.keys = ['downArrow', 'upArrow', 'PageUp', 'PageDown'];\n        this.rowTop = 0;\n        this.isInitialMovableRender = true;\n        this.virtualInfiniteData = {};\n        this.isCancel = false;\n        this.emptyRowData = {};\n        this.isNormaledit = false;\n        this.isInfiniteScroll = false;\n        this.isLastPage = false;\n        this.isInitialRender = true;\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n        this.addEventListener();\n        this.widthService = serviceLocator.getService('widthService');\n        this.rowModelGenerator = this.parent.isFrozenGrid() ? new FreezeRowModelGenerator(this.parent)\n            : new RowModelGenerator(this.parent);\n    }\n    InfiniteScroll.prototype.getModuleName = function () {\n        return 'infiniteScroll';\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.addEventListener = function () {\n        this.parent.on(events.dataReady, this.onDataReady, this);\n        this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n        this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n        this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n        this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n        this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n        this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n        this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n        this.parent.on(events.setInfiniteCache, this.setCache, this);\n        this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n        this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n        this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n        this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n        this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n        this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n        this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n        this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n        this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n        this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n        this.parent.on(events.modelChanged, this.modelChanged, this);\n        this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n        this.actionBeginFunction = this.actionBegin.bind(this);\n        this.actionCompleteFunction = this.actionComplete.bind(this);\n        this.parent.on(events.deleteComplete, this.deleteComplate, this);\n        this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.dataReady, this.onDataReady);\n        this.parent.off(events.dataSourceModified, this.dataSourceModified);\n        this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n        this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n        this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n        this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n        this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n        this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n        this.parent.off(events.setInfiniteCache, this.setCache);\n        this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n        this.parent.off(events.keyPressed, this.infiniteCellFocus);\n        this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n        this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n        this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n        this.parent.off(events.editReset, this.resetInfiniteEdit);\n        this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n        this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n        this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n        this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n        this.parent.off(events.modelChanged, this.modelChanged);\n        this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n        this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n    };\n    InfiniteScroll.prototype.updateCurrentViewData = function () {\n        var gObj = this.parent;\n        if (gObj.groupSettings.columns.length) {\n            return;\n        }\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        gObj.currentViewData = [];\n        var page = gObj.pageSettings.currentPage;\n        var isCache = gObj.infiniteScrollSettings.enableCache;\n        var blocks = gObj.infiniteScrollSettings.maxBlocks;\n        var isMiddlePage = isCache && (page > blocks || (this.isUpScroll && page > 1));\n        var start = isMiddlePage ? this.isUpScroll ? page : (page - blocks) + 1 : 1;\n        var end = isMiddlePage ? (start + blocks) - 1 : isCache ? blocks : keys.length;\n        for (var i = start; i <= end; i++) {\n            if (this.infiniteCurrentViewData[i]) {\n                gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n        var page = this.parent.pageSettings.currentPage;\n        var size = this.parent.pageSettings.pageSize;\n        var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var cache = this.parent.infiniteScrollSettings.enableCache;\n        if (!this.parent.groupSettings.columns.length) {\n            var isAdd = e.args.requestType === 'save';\n            var isDelete = e.args.requestType === 'delete';\n            if (!cache && (isAdd || isDelete)) {\n                if (isAdd) {\n                    this.infiniteCurrentViewData[1] = e.data.concat(this.infiniteCurrentViewData[1]);\n                }\n                else {\n                    this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n                }\n            }\n            else {\n                if (blocks > 1 && e.data.length === (blocks * size)) {\n                    this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n                }\n                else {\n                    this.infiniteCurrentViewData[page] = e.data.slice();\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.deleteComplate = function () {\n        if (this.parent.isFrozenGrid() && !this.parent.infiniteScrollSettings.enableCache) {\n            this.parent.contentModule.refreshScrollOffset();\n        }\n    };\n    InfiniteScroll.prototype.modelChanged = function (args) {\n        if (args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n            var rows = this.parent.getRows();\n            this.firstIndex = parseInt(rows[0].getAttribute(literals.ariaRowIndex), 10);\n            this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n            this.lastIndex = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10);\n            if (args.requestType === 'delete') {\n                var rowObj = this.parent.getRowsObject();\n                args.startIndex = this.parent.infiniteScrollSettings.enableCache\n                    ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n            }\n            else {\n                args.startIndex = this.firstIndex;\n            }\n            if (!this.parent.infiniteScrollSettings.enableCache\n                && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n                this.isLastPage = true;\n                this.lastIndex = this.lastIndex - 1;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n        if (this.isNormaledit) {\n            this.isAdd = true;\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                if (!Object.keys(this.emptyRowData).length) {\n                    this.createEmptyRowdata();\n                }\n                if (this.parent.pageSettings.currentPage > 1) {\n                    args.startEdit = false;\n                    this.resetInfiniteBlocks({}, true);\n                    this.makeRequest({ currentPage: 1 });\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n        if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete'\n            || (args.e.requestType === 'save' && this.requestType === 'add'))) {\n            var frozenCols = this.parent.isFrozenGrid();\n            var rowElms = this.parent.getRows();\n            var rows = this.parent.getRowsObject();\n            if (this.ensureRowAvailability(rows, args.result[0])) {\n                this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n                if (frozenCols) {\n                    var rows_1 = this.parent.getMovableRowsObject();\n                    this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n                    if (this.parent.getFrozenMode() === literals.leftRight) {\n                        var frRows = this.parent.getFrozenRightRowsObject();\n                        this.resetRowIndex(frRows, args.e, this.parent.getFrozenRightRows(), this.requestType === 'add');\n                    }\n                }\n                if (!this.isLastPage) {\n                    this.createRow(rows, args);\n                }\n                else {\n                    this.isLastPage = false;\n                    this.parent.pageSettings.currentPage = this.maxPage;\n                    if (this.parent.selectionModule.index < this.parent.frozenRows) {\n                        remove(rowElms[this.parent.frozenRows - 1]);\n                        this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n                        if (frozenCols) {\n                            var movableRows = this.parent.getMovableDataRows();\n                            remove(movableRows[this.parent.frozenRows]);\n                            this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n                            if (this.parent.getFrozenMode() === literals.leftRight) {\n                                var rightRows = this.parent.getFrozenRightDataRows();\n                                remove(rightRows[this.parent.frozenRows]);\n                                this.createRow([this.parent.getFrozenRightRowsObject()[this.parent.frozenRows - 1]], args, false, true, true);\n                            }\n                        }\n                        setRowElements(this.parent);\n                    }\n                }\n            }\n            this.parent.hideSpinner();\n            if (this.requestType === 'delete') {\n                this.parent.notify(events.deleteComplete, args.e);\n            }\n            else {\n                this.parent.notify(events.saveComplete, args.e);\n            }\n        }\n        this.parent.notify(events.freezeRender, { case: 'refreshHeight' });\n    };\n    InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n        var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n        var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n        var tbody;\n        if (isFrozenRight) {\n            tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n        }\n        else {\n            tbody = !this.parent.isFrozenGrid() ? this.parent.getContent().querySelector(literals.tbody) : isMovable\n                ? this.parent.getMovableVirtualContent().querySelector(literals.tbody)\n                : this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n        }\n        if (this.parent.frozenRows) {\n            tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add'\n                ? !this.parent.isFrozenGrid() ? this.parent.getHeaderContent().querySelector(literals.tbody)\n                    : isMovable ? this.parent.getMovableVirtualHeader().querySelector(literals.tbody)\n                        : isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector(literals.tbody)\n                            : this.parent.getFrozenVirtualHeader().querySelector(literals.tbody) : tbody;\n        }\n        var notifyArgs = {\n            rows: rows, cancel: false, args: args, isMovable: isMovable,\n            isFrozenRows: isFrozenRows, isFrozenRight: isFrozenRows, row: row\n        };\n        this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n        if (!notifyArgs.cancel) {\n            for (var i = row.length - 1; i >= 0; i--) {\n                if (this.requestType === 'delete') {\n                    tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n                }\n                else {\n                    tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n                }\n            }\n        }\n        if (!isFrozenRows && this.parent.frozenRows\n            && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n            var rowElems = isMovable ? this.parent.getMovableDataRows() : isFrozenRight ? this.parent.getFrozenRightDataRows()\n                : this.parent.getRows();\n            var index = (isMovable || isFrozenRight) && this.requestType === 'add'\n                ? this.parent.frozenRows : this.parent.frozenRows - 1;\n            remove(rowElems[index]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true, isFrozenRight);\n        }\n        if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n            if (isFrozenRight) {\n                setRowElements(this.parent);\n                this.parent.contentModule.rightFreezeRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n            }\n            else if (!this.parent.isFrozenGrid() || isMovable) {\n                setRowElements(this.parent);\n                this.parent.contentModule.visibleRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n                if (this.parent.getFrozenMode() === literals.leftRight) {\n                    this.createRow(this.parent.getFrozenRightRowsObject(), args, false, false, true);\n                }\n            }\n            else {\n                this.parent.contentModule.visibleFrozenRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n                this.createRow(this.parent.getMovableRowsObject(), args, true);\n            }\n        }\n    };\n    InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n        var resume = true;\n        if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache\n            && this.parent.sortSettings.columns && this.requestType === 'add') {\n            var key = this.parent.getPrimaryKeyFieldNames()[0];\n            for (var i = 0; i < rows.length; i++) {\n                if (rows[i].data[key] === data[key]) {\n                    resume = false;\n                    break;\n                }\n            }\n        }\n        return resume;\n    };\n    InfiniteScroll.prototype.generateRows = function (data, args) {\n        return this.rowModelGenerator.generateRows(data, args);\n    };\n    InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n        var _this = this;\n        var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n        var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n        if (isAdd) {\n            if (isRemove) {\n                if (isFrozen && !this.parent.groupSettings.columns.length) {\n                    this.swapCurrentViewData(1, true);\n                }\n                remove(rowElms[rows.length - 1]);\n                rowElms.splice(rows.length - 1, 1);\n                rows.splice(rows.length - 1, 1);\n            }\n        }\n        else {\n            rows.filter(function (e, index) {\n                if (e.data[keyField] === args.data[0][keyField]) {\n                    if (isFrozen && !_this.parent.groupSettings.columns.length) {\n                        var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n                        _this.resetInfiniteCurrentViewData(page, index);\n                    }\n                    rows.splice(index, 1);\n                    remove(rowElms[index]);\n                    rowElms.splice(index, 1);\n                }\n            });\n        }\n        var startIndex = isAdd ? 1 : 0;\n        resetRowIndex(this.parent, rows, rowElms, startIndex);\n    };\n    InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n        index = index - ((page - 1) * this.parent.pageSettings.pageSize);\n        this.infiniteCurrentViewData[page].splice(index, 1);\n        this.swapCurrentViewData(page, false);\n    };\n    InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var end = isAdd ? keys.length + 1 : keys.length;\n        for (var i = page; i < end; i++) {\n            if (this.infiniteCurrentViewData[i + 1]) {\n                var pageIndex = isAdd ? i : i + 1;\n                var index = isAdd ? this.infiniteCurrentViewData[i].length - 1 : 0;\n                var data = this.infiniteCurrentViewData[pageIndex].splice(index, 1);\n                if (isAdd) {\n                    this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n                    if ((i + 1) === end - 1) {\n                        this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n                    }\n                }\n                else {\n                    this.infiniteCurrentViewData[i].push(data[0]);\n                }\n            }\n        }\n        this.updateCurrentViewData();\n    };\n    InfiniteScroll.prototype.setDisplayNone = function (args) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            var frozenCols = this.parent.isFrozenGrid();\n            var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n            for (var i = 1; i <= keys.length; i++) {\n                var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0]\n                    : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n                cache.filter(function (e) {\n                    e.cells[args.index].visible = args.visible === '';\n                });\n            }\n            this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCache = function (data) {\n        this.getEditedRowObject().data = data;\n    };\n    InfiniteScroll.prototype.getEditedRowObject = function () {\n        var rowObjects = this.parent.getRowsObject();\n        var editedrow;\n        for (var i = 0; i < rowObjects.length; i++) {\n            if (rowObjects[i].index === this.editRowIndex) {\n                editedrow = rowObjects[i];\n            }\n        }\n        return editedrow;\n    };\n    InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n        if (this.isNormaledit) {\n            if (!this.isAdd && args.data) {\n                this.updateCurrentViewRecords(args.data);\n            }\n            this.isAdd = false;\n        }\n    };\n    InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n        var index = getEditedDataIndex(this.parent, data);\n        if (!isNullOrUndefined(index)) {\n            this.parent.getCurrentViewRecords()[index] = data;\n        }\n    };\n    InfiniteScroll.prototype.actionBegin = function (args) {\n        if (args.requestType === 'add' || args.requestType === 'delete') {\n            this.requestType = args.requestType;\n        }\n        else if (args.action === 'add' && args.requestType === 'save') {\n            this.requestType = args.action;\n        }\n        if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching'\n            || args.requestType === 'sorting' || args.requestType === 'filtering') {\n            this.isInitialRender = true;\n        }\n    };\n    InfiniteScroll.prototype.actionComplete = function (args) {\n        if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n            this.requestType = this.empty;\n            this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n            this.isAdd = this.isEdit = false;\n            if (this.isNormaledit) {\n                this.editRowIndex = this.empty;\n                this.virtualInfiniteData = {};\n                this.parent.editModule.previousVirtualData = {};\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteEdit = function () {\n        if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n            if ((this.parent.editSettings.allowEditing && this.isEdit) || (this.parent.editSettings.allowAdding && this.isAdd)) {\n                this.parent.isEdit = true;\n            }\n        }\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n        data.virtualData = this.virtualInfiniteData;\n        data.isAdd = this.isAdd;\n        data.isCancel = this.isCancel;\n    };\n    InfiniteScroll.prototype.editActionBegin = function (e) {\n        this.isEdit = true;\n        this.editRowIndex = e.index;\n        var rowObject = extend({}, this.getEditedRowObject().data);\n        e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n    };\n    InfiniteScroll.prototype.dataSourceModified = function () {\n        this.resetInfiniteBlocks({ requestType: this.empty }, true);\n    };\n    InfiniteScroll.prototype.onDataReady = function (e) {\n        if (!isNullOrUndefined(e.count)) {\n            this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n        }\n    };\n    InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n        this.isInitialCollapse = !isExpand;\n    };\n    InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n        this.restoreInfiniteEdit();\n        this.restoreInfiniteAdd();\n        var targetEle = e.target;\n        var isInfinite = targetEle.classList.contains(literals.content);\n        if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n            var scrollEle = this.parent.getContent().firstElementChild;\n            this.prevScrollTop = scrollEle.scrollTop;\n            var rows = this.parent.getRows();\n            var index = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10) + 1;\n            var prevPage = this.parent.pageSettings.currentPage;\n            var args = void 0;\n            var offset = targetEle.scrollHeight - targetEle.scrollTop;\n            var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n            var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n            var isBottom = (floor === targetEle.clientHeight || round === targetEle.clientHeight);\n            if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isUpScroll = false;\n                    this.isDownScroll = true;\n                }\n                var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n                var row = rows_2[rows_2.length - 1];\n                var rowIndex = parseInt(row.getAttribute(literals.ariaRowIndex), 10);\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n                args = {\n                    requestType: 'infiniteScroll',\n                    currentPage: this.parent.pageSettings.currentPage,\n                    prevPage: prevPage,\n                    startIndex: index,\n                    direction: 'down'\n                };\n                this.makeRequest(args);\n            }\n            if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0\n                && this.parent.pageSettings.currentPage !== 1) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isDownScroll = false;\n                    this.isUpScroll = true;\n                }\n                var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n                var rowIndex = parseInt(row[this.parent.pageSettings.pageSize - 1].getAttribute(literals.ariaRowIndex), 10);\n                var startIndex = parseInt(row[0].getAttribute(literals.ariaRowIndex), 10) - this.parent.pageSettings.pageSize;\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n                if (this.parent.pageSettings.currentPage) {\n                    args = {\n                        requestType: 'infiniteScroll',\n                        currentPage: this.parent.pageSettings.currentPage,\n                        prevPage: prevPage,\n                        startIndex: startIndex,\n                        direction: 'up'\n                    };\n                    this.makeRequest(args);\n                }\n            }\n            if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n                if (this.isDownScroll || this.isUpScroll) {\n                    scrollEle.scrollTop = this.top;\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeRequest = function (args) {\n        var _this = this;\n        if (this.parent.pageSettings.currentPage !== args.prevPage) {\n            if (this.parent.pageSettings.currentPage <= this.maxPage) {\n                this.isInfiniteScroll = true;\n                if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify('model-changed', args);\n                    }, 100);\n                }\n                else {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n                    }, 100);\n                }\n            }\n            else {\n                this.parent.pageSettings.currentPage = this.maxPage;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infinitePageQuery = function (query) {\n        if (this.initialRender) {\n            this.initialRender = false;\n            this.intialPageQuery(query);\n        }\n        else {\n            if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n                this.editPageQuery(query);\n            }\n            else {\n                query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n            }\n        }\n    };\n    InfiniteScroll.prototype.editPageQuery = function (query) {\n        var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var isCache = this.parent.infiniteScrollSettings.enableCache;\n        if (isCache) {\n            this.infiniteCache = {};\n            this.infiniteFrozenCache = {};\n            this.infiniteCurrentViewData = {};\n            query.skip(this.firstIndex);\n            query.take(initialBlocks * this.parent.pageSettings.pageSize);\n        }\n        else {\n            if (this.parent.editSettings.mode === 'Dialog') {\n                this.parent.clearSelection();\n            }\n            var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n            query.skip(index);\n            query.take(1);\n        }\n    };\n    InfiniteScroll.prototype.intialPageQuery = function (query) {\n        if (this.parent.infiniteScrollSettings.enableCache\n            && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n            this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n        }\n        var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n        query.page(1, pageSize);\n    };\n    InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n        if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n            this.pressedKey = e.keyArgs.action;\n            var ele = document.activeElement;\n            var rowIndex = parseInt(ele.parentElement.getAttribute(literals.ariaRowIndex), 10);\n            var scrollEle = this.parent.getContent().firstElementChild;\n            this.rowIndex = e.keyArgs.action === 'downArrow' ? rowIndex + 1 : rowIndex - 1;\n            this.cellIndex = parseInt(ele.getAttribute(literals.ariaColIndex), 10);\n            var row = this.parent.getRowByIndex(rowIndex);\n            var visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight());\n            if (!row || ensureLastRow(row, this.parent) || ensureFirstRow(row, this.rowTop)) {\n                var height = row ? row.getBoundingClientRect().height : this.parent.getRowHeight();\n                if (!this.parent.infiniteScrollSettings.enableCache) {\n                    if (e.keyArgs.action === 'downArrow' && (ensureLastRow(row, this.parent) || !row)) {\n                        var nTop = (this.rowIndex - visibleRowCount) * height;\n                        var oTop = scrollEle.scrollTop + this.parent.getRowHeight();\n                        scrollEle.scrollTop = nTop < oTop ? oTop : nTop;\n                    }\n                    if (e.keyArgs.action === 'upArrow' && ensureFirstRow(row, this.rowTop)) {\n                        scrollEle.scrollTop = this.rowIndex * height;\n                    }\n                }\n            }\n            else {\n                this.pressedKey = this.empty;\n            }\n        }\n        else if (e.key === 'PageDown' || e.key === 'PageUp') {\n            this.pressedKey = e.key;\n        }\n    };\n    InfiniteScroll.prototype.createEmptyRowdata = function () {\n        var _this = this;\n        this.parent.getColumns().filter(function (e) {\n            _this.emptyRowData[e.field] = _this.empty;\n        });\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n        var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n        var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n        var gridForm = this.parent.element.querySelector('.e-gridform');\n        if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n            var rowData = editForm ? extend({}, this.getEditedRowObject().data)\n                : extend({}, this.emptyRowData);\n            this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n            if (this.parent.isFrozenGrid()) {\n                this.virtualInfiniteData = this.parent.editModule\n                    .getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n        var content = this.parent.getContent().firstElementChild;\n        var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n        if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n            if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n                var row = this.parent.getRowByIndex(this.editRowIndex);\n                if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n                    var top_1 = row.getBoundingClientRect().top;\n                    if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n                        this.parent.isEdit = false;\n                        this.parent.editModule.startEdit(row);\n                    }\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n        var content = this.parent.getContent().firstElementChild;\n        if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit &&\n            this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n            var isTop = content.scrollTop < this.parent.getRowHeight();\n            if (isTop) {\n                this.parent.isEdit = false;\n                this.parent.addRecord();\n            }\n        }\n    };\n    InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n        var frozenCols = this.parent.isFrozenGrid();\n        var scrollEle = this.parent.getContent().firstElementChild;\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        var isMovable = this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable';\n        if ((isInfiniteScroll && !e.args.isFrozen && !isMovable) || !isInfiniteScroll) {\n            if (isInfiniteScroll && e.args.direction === 'up') {\n                e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n            }\n            else {\n                e.tbody.appendChild(e.frag);\n            }\n        }\n        if (!frozenCols) {\n            this.parent.contentModule.getTable().appendChild(e.tbody);\n            this.updateCurrentViewData();\n        }\n        else {\n            if (isInfiniteScroll) {\n                if (e.tableName === literals.frozenLeft || (this.parent.getFrozenMode() === 'Right' && e.tableName === literals.frozenRight)) {\n                    this.frozenFrag = e.frag;\n                }\n                else if (this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable') {\n                    this.movableFrag = e.frag;\n                }\n                else {\n                    var tbody = this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n                    if (e.args.direction === 'up') {\n                        tbody.insertBefore(this.frozenFrag, tbody.firstElementChild);\n                    }\n                    else {\n                        tbody.appendChild(this.frozenFrag);\n                    }\n                    if (e.tableName === literals.frozenRight) {\n                        this.parent.getMovableVirtualContent().querySelector(literals.tbody).appendChild(this.movableFrag);\n                        this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody).appendChild(e.frag);\n                    }\n                    else {\n                        this.parent.getMovableVirtualContent().querySelector('.' + literals.table).appendChild(e.tbody);\n                    }\n                    this.parent.contentModule.refreshScrollOffset();\n                    this.updateCurrentViewData();\n                }\n            }\n            else {\n                var table = void 0;\n                if (e.tableName === literals.frozenLeft) {\n                    table = this.parent.getFrozenVirtualContent().querySelector('.' + literals.table);\n                }\n                else if (e.tableName === 'movable') {\n                    table = this.parent.getMovableVirtualContent().querySelector('.' + literals.table);\n                    if (this.parent.getFrozenMode() !== literals.leftRight) {\n                        this.parent.contentModule.refreshScrollOffset();\n                        this.updateCurrentViewData();\n                    }\n                }\n                else {\n                    table = this.parent.element.querySelector('.e-frozen-right-content').querySelector('.' + literals.table);\n                    if (this.parent.getFrozenMode() === literals.leftRight) {\n                        this.parent.contentModule.refreshScrollOffset();\n                        this.updateCurrentViewData();\n                    }\n                }\n                table.appendChild(e.tbody);\n                this.widthService.refreshFrozenScrollbar();\n            }\n        }\n        if (this.isInitialRender && !e.args.isFrozen) {\n            this.isInitialRender = false;\n            this.parent.scrollModule.setHeight();\n        }\n        if (!e.args.isFrozen) {\n            this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n            if (isInfiniteScroll) {\n                if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n                    scrollEle.scrollTop = this.top;\n                }\n                setRowElements(this.parent);\n                this.selectNewRow(e.tbody, e.args.startIndex);\n                this.pressedKey = undefined;\n            }\n            this.restoreInfiniteAdd();\n            this.isScroll = true;\n        }\n        this.isInfiniteScroll = false;\n    };\n    InfiniteScroll.prototype.selectNewRow = function (tbody, startIndex) {\n        var _this = this;\n        var row = this.parent.getRowByIndex(this.rowIndex);\n        if (this.keys.some(function (value) { return value === _this.pressedKey; })) {\n            if (this.pressedKey === 'downArrow' || (this.parent.infiniteScrollSettings.enableCache && this.pressedKey === 'upArrow')) {\n                setTimeout(function () {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var target = row.cells[0];\n                    target.focus({ preventScroll: true });\n                    _this.parent.selectRow(_this.rowIndex);\n                    _this.parent.getContent().firstElementChild.scrollTop += _this.parent.getRowHeight();\n                }, 0);\n            }\n            if (this.pressedKey === 'PageDown') {\n                var row_1 = this.parent.getRowByIndex(startIndex);\n                if (row_1) {\n                    row_1.cells[0].focus();\n                }\n            }\n            if (this.pressedKey === 'PageUp') {\n                tbody.querySelector('.' + literals.row).cells[0].focus();\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n            var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n            if (e.args.direction === 'down') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n                this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n            }\n            if (e.args.direction === 'up') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                else {\n                    this.removeBottomRows(rows, rows.length - 1, e.args);\n                }\n            }\n            this.isScroll = false;\n            this.top = this.calculateScrollTop(e.args);\n        }\n    };\n    InfiniteScroll.prototype.calculateScrollTop = function (args) {\n        var top = 0;\n        var scrollCnt = this.parent.getContent().firstElementChild;\n        if (args.direction === 'down') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.captionRowHeight();\n            }\n            var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n            var captionCount = 0;\n            if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n                captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n            }\n            var value = captionCount ? captionCount\n                : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n            var currentViewRowCount = 0;\n            var i = 0;\n            while (currentViewRowCount < scrollCnt.clientHeight) {\n                i++;\n                currentViewRowCount = i * this.parent.getRowHeight();\n            }\n            i = i - 1;\n            top += (value - i) * this.parent.getRowHeight();\n        }\n        if (args.direction === 'up') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n            }\n            else if (this.isInitialCollapse) {\n                var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n                var count = 0;\n                for (var i = 0; i < groupedData.length; i++) {\n                    if (groupedData[i].isCaptionRow) {\n                        count++;\n                    }\n                }\n                top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n            }\n            else {\n                top += (this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth());\n            }\n        }\n        return top;\n    };\n    InfiniteScroll.prototype.captionRowHeight = function () {\n        var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n        return rows.length * this.parent.getRowHeight();\n    };\n    InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n        var frozeCols = this.parent.isFrozenGrid();\n        var frRows = this.parent.getFrozenMode() === literals.leftRight\n            ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n        for (var i = 0; i <= maxIndx; i++) {\n            if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1\n                && i > (maxIndx - this.parent.frozenRows)) {\n                continue;\n            }\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n            if (frRows) {\n                remove(frRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n        var cnt = 0;\n        var frozeCols = this.parent.isFrozenGrid();\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n        var frRows = this.parent.getFrozenMode() === literals.leftRight ?\n            [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n        var pageSize = this.parent.pageSettings.pageSize;\n        if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n        }\n        if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n        }\n        for (var i = maxIndx; cnt < pageSize; i--) {\n            cnt++;\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n            if (frRows) {\n                remove(frRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n        if (args.direction === 'down') {\n            var lastRow = this.parent.getRows()[this.parent.pageSettings.pageSize];\n            var lastRowIndex = parseInt(lastRow.getAttribute(literals.ariaRowIndex), 10) - 1;\n            var k = 0;\n            for (var i = 0; k < lastRowIndex; i++) {\n                if (!rows[i].classList.contains(literals.row)) {\n                    remove(rows[i]);\n                }\n                else {\n                    k = parseInt(rows[i].getAttribute(literals.ariaRowIndex), 10);\n                }\n            }\n        }\n        if (args.direction === 'up') {\n            var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n            var lastIndex = parseInt(rowElements[rowElements.length - 1].getAttribute(literals.ariaRowIndex), 10);\n            var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n            var startIndex = 0;\n            for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n                startIndex += this.infiniteCache[i].length;\n            }\n            for (var i = startIndex; i < rows.length; i++) {\n                remove(rows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n        if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n            if (this.actions.some(function (value) { return value === args.requestType; }) || isDataModified) {\n                var scrollEle = this.parent.getContent().firstElementChild;\n                this.initialRender = true;\n                scrollEle.scrollTop = 0;\n                this.parent.pageSettings.currentPage = 1;\n                this.infiniteCache = this.infiniteFrozenCache = {};\n                this.infiniteCurrentViewData = {};\n                this.resetContentModuleCache({});\n                this.isRemove = false;\n                this.top = 0;\n                this.isInitialMovableRender = true;\n                this.isInitialCollapse = false;\n                this.parent.contentModule.isRemove = this.isRemove;\n                this.parent.contentModule.isAddRows = this.isRemove;\n                this.parent.contentModule.visibleRows = [];\n                this.parent.contentModule.visibleFrozenRows = [];\n            }\n        }\n    };\n    InfiniteScroll.prototype.setCache = function (e) {\n        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n            var frozeCols = this.parent.isFrozenGrid();\n            var idx = e.args.isFrozen ? 1 : 0;\n            var isEdit = e.args.requestType !== 'infiniteScroll'\n                && (this.requestType === 'delete' || this.requestType === 'add');\n            var currentPage = this.parent.pageSettings.currentPage;\n            if ((frozeCols && this.isInitialMovableRender) || (!frozeCols && !Object.keys(this.infiniteCache).length) || isEdit) {\n                this.isInitialMovableRender = !e.args.isFrozen;\n                this.setInitialCache(e.modelData, e.args, isEdit);\n            }\n            if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n                this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n                this.resetContentModuleCache(this.infiniteCache);\n            }\n            if (frozeCols) {\n                if ((idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]))\n                    || !this.infiniteFrozenCache[currentPage][idx].length) {\n                    this.createFrozenCache(currentPage);\n                    this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n                    if (idx === 1) {\n                        this.resetContentModuleCache(this.infiniteFrozenCache);\n                    }\n                }\n            }\n            if (e.isInfiniteScroll && !this.isRemove) {\n                this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n                this.parent.contentModule.isRemove = this.isRemove;\n            }\n        }\n    };\n    InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n        var frozenCols = this.parent.isFrozenGrid();\n        var idx = args.isFrozen ? 1 : 0;\n        var k = !isEdit ? 1 : this.firstBlock;\n        for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n            var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n            var endIndex = i * this.parent.pageSettings.pageSize;\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n                this.setInitialGroupCache(data, k, startIndex, endIndex);\n            }\n            else {\n                if (isCurrentViewData) {\n                    this.infiniteCurrentViewData[k] = data.slice(startIndex, endIndex);\n                }\n                else {\n                    if (frozenCols) {\n                        this.createFrozenCache(k);\n                        this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n                        this.resetContentModuleCache(this.infiniteFrozenCache);\n                    }\n                    else {\n                        this.infiniteCache[k] = data.slice(startIndex, endIndex);\n                        this.resetContentModuleCache(this.infiniteCache);\n                    }\n                }\n            }\n            k++;\n        }\n    };\n    InfiniteScroll.prototype.createFrozenCache = function (index) {\n        if (!this.infiniteFrozenCache[index]) {\n            this.infiniteFrozenCache[index] = [[], []];\n        }\n    };\n    InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n        var pageData = [];\n        var startIndex = 0;\n        for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n            startIndex += this.infiniteCache[i].length;\n        }\n        var k = sIndex;\n        for (var i = startIndex; i < data.length && k < eIndex; i++) {\n            if (data[i].index < eIndex || data[i].isCaptionRow) {\n                k = data[i].isCaptionRow ? k : data[i].index;\n                pageData.push(data[i]);\n            }\n            if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n                break;\n            }\n        }\n        this.infiniteCache[index] = pageData;\n        this.resetContentModuleCache(this.infiniteCache);\n    };\n    InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n        this.parent.contentModule\n            .infiniteCache = data;\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return InfiniteScroll;\n}());\nexport { InfiniteScroll };\n"]},"metadata":{},"sourceType":"module"}