{"ast":null,"code":"import { getObject, Filter as GridFilter, Grid } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, setValue, getValue } from '@syncfusion/ej2-base';\nimport { getParentData } from '../utils';\n/**\n * TreeGrid Filter module will handle filtering action\n *\n * @hidden\n */\n\nvar Filter =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Filter module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function Filter(parent) {\n    Grid.Inject(GridFilter);\n    this.parent = parent;\n    this.isHierarchyFilter = false;\n    this.filteredResult = [];\n    this.flatFilteredData = [];\n    this.filteredParentRecs = [];\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns Filter module name\n   */\n\n\n  Filter.prototype.getModuleName = function () {\n    return 'filter';\n  };\n  /**\n   * To destroy the Filter module\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Filter.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  Filter.prototype.addEventListener = function () {\n    this.parent.on('updateFilterRecs', this.updatedFilteredRecord, this);\n    this.parent.on('clearFilters', this.clearFilterLevel, this);\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  Filter.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('updateFilterRecs', this.updatedFilteredRecord);\n    this.parent.off('clearFilters', this.clearFilterLevel);\n  };\n  /**\n   * Function to update filtered records\n   *\n   * @param {{data: Object} } dataDetails - Filtered data collection\n   * @param {Object} dataDetails.data - Fliltered data collection\n   * @hidden\n   * @returns {void}\n   */\n\n\n  Filter.prototype.updatedFilteredRecord = function (dataDetails) {\n    setValue('uniqueIDFilterCollection', {}, this.parent);\n    this.flatFilteredData = dataDetails.data;\n    this.filteredParentRecs = [];\n    this.filteredResult = [];\n    this.isHierarchyFilter = false;\n\n    for (var f = 0; f < this.flatFilteredData.length; f++) {\n      var rec = this.flatFilteredData[f];\n      this.addParentRecord(rec);\n      var hierarchyMode = this.parent.grid.searchSettings.key === '' ? this.parent.filterSettings.hierarchyMode : this.parent.searchSettings.hierarchyMode;\n\n      if ((hierarchyMode === 'Child' || hierarchyMode === 'None') && (this.parent.grid.filterSettings.columns.length !== 0 || this.parent.grid.searchSettings.key !== '')) {\n        this.isHierarchyFilter = true;\n      }\n\n      var ischild = getObject('childRecords', rec);\n\n      if (!isNullOrUndefined(ischild) && ischild.length) {\n        setValue('hasFilteredChildRecords', this.checkChildExsist(rec), rec);\n      }\n\n      var parent_1 = getObject('parentItem', rec);\n\n      if (!isNullOrUndefined(parent_1)) {\n        var parRecord = getParentData(this.parent, rec.parentItem.uniqueID, true); //let parRecord: Object = this.flatFilteredData.filter((e: ITreeData) => {\n        //          return e.uniqueID === rec.parentItem.uniqueID; })[0];\n\n        setValue('hasFilteredChildRecords', true, parRecord);\n\n        if (parRecord && parRecord.parentItem) {\n          this.updateParentFilteredRecord(parRecord);\n        }\n      }\n    }\n\n    if (this.flatFilteredData.length > 0 && this.isHierarchyFilter) {\n      this.updateFilterLevel();\n    }\n\n    this.parent.notify('updateAction', {\n      result: this.filteredResult\n    });\n  };\n\n  Filter.prototype.updateParentFilteredRecord = function (record) {\n    var parRecord = getParentData(this.parent, record.parentItem.uniqueID, true);\n    var uniqueIDValue = getValue('uniqueIDFilterCollection', this.parent);\n\n    if (parRecord && Object.prototype.hasOwnProperty.call(uniqueIDValue, parRecord.uniqueID)) {\n      setValue('hasFilteredChildRecords', true, parRecord);\n    }\n\n    if (parRecord && parRecord.parentItem) {\n      this.updateParentFilteredRecord(parRecord);\n    }\n  };\n\n  Filter.prototype.addParentRecord = function (record) {\n    var parent = getParentData(this.parent, record.parentUniqueID); //let parent: Object = this.parent.flatData.filter((e: ITreeData) => {return e.uniqueID === record.parentUniqueID; })[0];\n\n    var hierarchyMode = this.parent.grid.searchSettings.key === '' ? this.parent.filterSettings.hierarchyMode : this.parent.searchSettings.hierarchyMode;\n\n    if (hierarchyMode === 'None' && (this.parent.grid.filterSettings.columns.length !== 0 || this.parent.grid.searchSettings.key !== '')) {\n      if (isNullOrUndefined(parent)) {\n        if (this.flatFilteredData.indexOf(record) !== -1) {\n          if (this.filteredResult.indexOf(record) === -1) {\n            this.filteredResult.push(record);\n            setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n            record.hasFilteredChildRecords = true;\n          }\n\n          return;\n        }\n      } else {\n        this.addParentRecord(parent);\n\n        if (this.flatFilteredData.indexOf(parent) !== -1 || this.filteredResult.indexOf(parent) !== -1) {\n          if (this.filteredResult.indexOf(record) === -1) {\n            this.filteredResult.push(record);\n            setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n          }\n        } else {\n          if (this.filteredResult.indexOf(record) === -1 && this.flatFilteredData.indexOf(record) !== -1) {\n            this.filteredResult.push(record);\n            setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n          }\n        }\n      }\n    } else {\n      if (!isNullOrUndefined(parent)) {\n        var hierarchyMode_1 = this.parent.grid.searchSettings.key === '' ? this.parent.filterSettings.hierarchyMode : this.parent.searchSettings.hierarchyMode;\n\n        if (hierarchyMode_1 === 'Child' && (this.parent.grid.filterSettings.columns.length !== 0 || this.parent.grid.searchSettings.key !== '')) {\n          if (this.flatFilteredData.indexOf(parent) !== -1) {\n            this.addParentRecord(parent);\n          }\n        } else {\n          this.addParentRecord(parent);\n        }\n      }\n\n      if (this.filteredResult.indexOf(record) === -1) {\n        this.filteredResult.push(record);\n        setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n      }\n    }\n  };\n\n  Filter.prototype.checkChildExsist = function (records) {\n    var childRec = getObject('childRecords', records);\n    var isExist = false;\n\n    for (var count = 0; count < childRec.length; count++) {\n      var ischild = childRec[count].childRecords;\n      var hierarchyMode = this.parent.grid.searchSettings.key === '' ? this.parent.filterSettings.hierarchyMode : this.parent.searchSettings.hierarchyMode;\n\n      if ((hierarchyMode === 'Child' || hierarchyMode === 'Both') && (this.parent.grid.filterSettings.columns.length !== 0 || this.parent.grid.searchSettings.key !== '')) {\n        var uniqueIDValue = getValue('uniqueIDFilterCollection', this.parent);\n\n        if (!Object.prototype.hasOwnProperty.call(uniqueIDValue, childRec[count].uniqueID)) {\n          this.filteredResult.push(childRec[count]);\n          setValue('uniqueIDFilterCollection.' + childRec[count].uniqueID, childRec[count], this.parent);\n          isExist = true;\n        }\n      }\n\n      if (hierarchyMode === 'None' && (this.parent.grid.filterSettings.columns.length !== 0 || this.parent.grid.searchSettings.key !== '')) {\n        if (this.flatFilteredData.indexOf(childRec[count]) !== -1) {\n          isExist = true;\n          break;\n        }\n      }\n\n      if (!isNullOrUndefined(ischild) && ischild.length) {\n        isExist = this.checkChildExsist(childRec[count]);\n      }\n\n      if ((hierarchyMode === 'Child' || hierarchyMode === 'Both') && childRec.length) {\n        isExist = true;\n      }\n    }\n\n    return isExist;\n  };\n\n  Filter.prototype.updateFilterLevel = function () {\n    var record = this.filteredResult;\n    var len = this.filteredResult.length;\n\n    for (var c = 0; c < len; c++) {\n      var parent_2 = getParentData(this.parent, record[c].parentUniqueID);\n      var isPrst = record.indexOf(parent_2) !== -1;\n\n      if (isPrst) {\n        var parent_3 = getParentData(this.parent, record[c].parentUniqueID, true);\n        record[c].filterLevel = parent_3.filterLevel + 1;\n      } else {\n        record[c].filterLevel = 0;\n        this.filteredParentRecs.push(record[c]);\n      }\n    }\n  };\n\n  Filter.prototype.clearFilterLevel = function (data) {\n    var count = 0;\n    var flatData = data.flatData;\n    var len = flatData.length;\n    var currentRecord;\n\n    for (count; count < len; count++) {\n      currentRecord = flatData[count];\n      var fLevel = currentRecord.filterLevel;\n\n      if (fLevel || fLevel === 0 || !isNullOrUndefined(currentRecord.hasFilteredChildRecords)) {\n        currentRecord.hasFilteredChildRecords = null;\n        currentRecord.filterLevel = null;\n      }\n    }\n\n    this.filteredResult = [];\n    this.parent.notify('updateResults', {\n      result: flatData,\n      count: flatData.length\n    });\n  };\n\n  return Filter;\n}();\n\nexport { Filter };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/filter.js"],"names":["getObject","Filter","GridFilter","Grid","isNullOrUndefined","setValue","getValue","getParentData","parent","Inject","isHierarchyFilter","filteredResult","flatFilteredData","filteredParentRecs","addEventListener","prototype","getModuleName","destroy","removeEventListener","on","updatedFilteredRecord","clearFilterLevel","isDestroyed","off","dataDetails","data","f","length","rec","addParentRecord","hierarchyMode","grid","searchSettings","key","filterSettings","columns","ischild","checkChildExsist","parent_1","parRecord","parentItem","uniqueID","updateParentFilteredRecord","updateFilterLevel","notify","result","record","uniqueIDValue","Object","hasOwnProperty","call","parentUniqueID","indexOf","push","hasFilteredChildRecords","hierarchyMode_1","records","childRec","isExist","count","childRecords","len","c","parent_2","isPrst","parent_3","filterLevel","flatData","currentRecord","fLevel"],"mappings":"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","sourcesContent":["import { getObject, Filter as GridFilter, Grid } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, setValue, getValue } from '@syncfusion/ej2-base';\nimport { getParentData } from '../utils';\n/**\n * TreeGrid Filter module will handle filtering action\n *\n * @hidden\n */\nvar Filter = /** @class */ (function () {\n    /**\n     * Constructor for Filter module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Filter(parent) {\n        Grid.Inject(GridFilter);\n        this.parent = parent;\n        this.isHierarchyFilter = false;\n        this.filteredResult = [];\n        this.flatFilteredData = [];\n        this.filteredParentRecs = [];\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Filter module name\n     */\n    Filter.prototype.getModuleName = function () {\n        return 'filter';\n    };\n    /**\n     * To destroy the Filter module\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Filter.prototype.addEventListener = function () {\n        this.parent.on('updateFilterRecs', this.updatedFilteredRecord, this);\n        this.parent.on('clearFilters', this.clearFilterLevel, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Filter.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updateFilterRecs', this.updatedFilteredRecord);\n        this.parent.off('clearFilters', this.clearFilterLevel);\n    };\n    /**\n     * Function to update filtered records\n     *\n     * @param {{data: Object} } dataDetails - Filtered data collection\n     * @param {Object} dataDetails.data - Fliltered data collection\n     * @hidden\n     * @returns {void}\n     */\n    Filter.prototype.updatedFilteredRecord = function (dataDetails) {\n        setValue('uniqueIDFilterCollection', {}, this.parent);\n        this.flatFilteredData = dataDetails.data;\n        this.filteredParentRecs = [];\n        this.filteredResult = [];\n        this.isHierarchyFilter = false;\n        for (var f = 0; f < this.flatFilteredData.length; f++) {\n            var rec = this.flatFilteredData[f];\n            this.addParentRecord(rec);\n            var hierarchyMode = this.parent.grid.searchSettings.key === '' ? this.parent.filterSettings.hierarchyMode\n                : this.parent.searchSettings.hierarchyMode;\n            if (((hierarchyMode === 'Child' || hierarchyMode === 'None') &&\n                (this.parent.grid.filterSettings.columns.length !== 0 || this.parent.grid.searchSettings.key !== ''))) {\n                this.isHierarchyFilter = true;\n            }\n            var ischild = getObject('childRecords', rec);\n            if (!isNullOrUndefined(ischild) && ischild.length) {\n                setValue('hasFilteredChildRecords', this.checkChildExsist(rec), rec);\n            }\n            var parent_1 = getObject('parentItem', rec);\n            if (!isNullOrUndefined(parent_1)) {\n                var parRecord = getParentData(this.parent, rec.parentItem.uniqueID, true);\n                //let parRecord: Object = this.flatFilteredData.filter((e: ITreeData) => {\n                //          return e.uniqueID === rec.parentItem.uniqueID; })[0];\n                setValue('hasFilteredChildRecords', true, parRecord);\n                if (parRecord && parRecord.parentItem) {\n                    this.updateParentFilteredRecord(parRecord);\n                }\n            }\n        }\n        if (this.flatFilteredData.length > 0 && this.isHierarchyFilter) {\n            this.updateFilterLevel();\n        }\n        this.parent.notify('updateAction', { result: this.filteredResult });\n    };\n    Filter.prototype.updateParentFilteredRecord = function (record) {\n        var parRecord = getParentData(this.parent, record.parentItem.uniqueID, true);\n        var uniqueIDValue = getValue('uniqueIDFilterCollection', this.parent);\n        if (parRecord && Object.prototype.hasOwnProperty.call(uniqueIDValue, parRecord.uniqueID)) {\n            setValue('hasFilteredChildRecords', true, parRecord);\n        }\n        if (parRecord && parRecord.parentItem) {\n            this.updateParentFilteredRecord(parRecord);\n        }\n    };\n    Filter.prototype.addParentRecord = function (record) {\n        var parent = getParentData(this.parent, record.parentUniqueID);\n        //let parent: Object = this.parent.flatData.filter((e: ITreeData) => {return e.uniqueID === record.parentUniqueID; })[0];\n        var hierarchyMode = this.parent.grid.searchSettings.key === '' ? this.parent.filterSettings.hierarchyMode\n            : this.parent.searchSettings.hierarchyMode;\n        if (hierarchyMode === 'None' && (this.parent.grid.filterSettings.columns.length !== 0\n            || this.parent.grid.searchSettings.key !== '')) {\n            if (isNullOrUndefined(parent)) {\n                if (this.flatFilteredData.indexOf(record) !== -1) {\n                    if (this.filteredResult.indexOf(record) === -1) {\n                        this.filteredResult.push(record);\n                        setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n                        record.hasFilteredChildRecords = true;\n                    }\n                    return;\n                }\n            }\n            else {\n                this.addParentRecord(parent);\n                if (this.flatFilteredData.indexOf(parent) !== -1 || this.filteredResult.indexOf(parent) !== -1) {\n                    if (this.filteredResult.indexOf(record) === -1) {\n                        this.filteredResult.push(record);\n                        setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n                    }\n                }\n                else {\n                    if (this.filteredResult.indexOf(record) === -1 && this.flatFilteredData.indexOf(record) !== -1) {\n                        this.filteredResult.push(record);\n                        setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n                    }\n                }\n            }\n        }\n        else {\n            if (!isNullOrUndefined(parent)) {\n                var hierarchyMode_1 = this.parent.grid.searchSettings.key === '' ?\n                    this.parent.filterSettings.hierarchyMode : this.parent.searchSettings.hierarchyMode;\n                if (hierarchyMode_1 === 'Child' && (this.parent.grid.filterSettings.columns.length !== 0\n                    || this.parent.grid.searchSettings.key !== '')) {\n                    if (this.flatFilteredData.indexOf(parent) !== -1) {\n                        this.addParentRecord(parent);\n                    }\n                }\n                else {\n                    this.addParentRecord(parent);\n                }\n            }\n            if (this.filteredResult.indexOf(record) === -1) {\n                this.filteredResult.push(record);\n                setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n            }\n        }\n    };\n    Filter.prototype.checkChildExsist = function (records) {\n        var childRec = getObject('childRecords', records);\n        var isExist = false;\n        for (var count = 0; count < childRec.length; count++) {\n            var ischild = childRec[count].childRecords;\n            var hierarchyMode = this.parent.grid.searchSettings.key === '' ?\n                this.parent.filterSettings.hierarchyMode : this.parent.searchSettings.hierarchyMode;\n            if (((hierarchyMode === 'Child' || hierarchyMode === 'Both') && (this.parent.grid.filterSettings.columns.length !== 0\n                || this.parent.grid.searchSettings.key !== ''))) {\n                var uniqueIDValue = getValue('uniqueIDFilterCollection', this.parent);\n                if (!Object.prototype.hasOwnProperty.call(uniqueIDValue, childRec[count].uniqueID)) {\n                    this.filteredResult.push(childRec[count]);\n                    setValue('uniqueIDFilterCollection.' + childRec[count].uniqueID, childRec[count], this.parent);\n                    isExist = true;\n                }\n            }\n            if ((hierarchyMode === 'None')\n                && (this.parent.grid.filterSettings.columns.length !== 0 || this.parent.grid.searchSettings.key !== '')) {\n                if (this.flatFilteredData.indexOf(childRec[count]) !== -1) {\n                    isExist = true;\n                    break;\n                }\n            }\n            if (!isNullOrUndefined(ischild) && ischild.length) {\n                isExist = this.checkChildExsist(childRec[count]);\n            }\n            if ((hierarchyMode === 'Child' || hierarchyMode === 'Both') && childRec.length) {\n                isExist = true;\n            }\n        }\n        return isExist;\n    };\n    Filter.prototype.updateFilterLevel = function () {\n        var record = this.filteredResult;\n        var len = this.filteredResult.length;\n        for (var c = 0; c < len; c++) {\n            var parent_2 = getParentData(this.parent, record[c].parentUniqueID);\n            var isPrst = record.indexOf(parent_2) !== -1;\n            if (isPrst) {\n                var parent_3 = getParentData(this.parent, record[c].parentUniqueID, true);\n                record[c].filterLevel = parent_3.filterLevel + 1;\n            }\n            else {\n                record[c].filterLevel = 0;\n                this.filteredParentRecs.push(record[c]);\n            }\n        }\n    };\n    Filter.prototype.clearFilterLevel = function (data) {\n        var count = 0;\n        var flatData = data.flatData;\n        var len = flatData.length;\n        var currentRecord;\n        for (count; count < len; count++) {\n            currentRecord = flatData[count];\n            var fLevel = currentRecord.filterLevel;\n            if (fLevel || fLevel === 0 || !isNullOrUndefined(currentRecord.hasFilteredChildRecords)) {\n                currentRecord.hasFilteredChildRecords = null;\n                currentRecord.filterLevel = null;\n            }\n        }\n        this.filteredResult = [];\n        this.parent.notify('updateResults', { result: flatData, count: flatData.length });\n    };\n    return Filter;\n}());\nexport { Filter };\n"]},"metadata":{},"sourceType":"module"}