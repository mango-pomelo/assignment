{"ast":null,"code":"import { getObject, Grid, Reorder as GridReorder } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid Reorder module\n *\n * @hidden\n */\n\nvar Reorder =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Reorder module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function Reorder(parent) {\n    Grid.Inject(GridReorder);\n    this.parent = parent;\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns Reorder module name\n   */\n\n\n  Reorder.prototype.getModuleName = function () {\n    return 'reorder';\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  Reorder.prototype.addEventListener = function () {\n    this.parent.on('getColumnIndex', this.getTreeColumn, this);\n  };\n\n  Reorder.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('getColumnIndex', this.getTreeColumn);\n  };\n  /**\n   * To destroy the Reorder\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Reorder.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  Reorder.prototype.getTreeColumn = function () {\n    var columnModel = 'columnModel';\n    var treeColumn = this.parent[columnModel][this.parent.treeColumnIndex];\n    var treeIndex;\n    var updatedCols = this.parent.getColumns();\n\n    for (var f = 0; f < updatedCols.length; f++) {\n      var treeColumnfield = getObject('field', treeColumn);\n      var parentColumnfield = getObject('field', updatedCols[f]);\n\n      if (treeColumnfield === parentColumnfield) {\n        treeIndex = f;\n        break;\n      }\n    }\n\n    this.parent.setProperties({\n      treeColumnIndex: treeIndex\n    }, true);\n  };\n\n  return Reorder;\n}();\n\nexport { Reorder };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/reorder.js"],"names":["getObject","Grid","Reorder","GridReorder","parent","Inject","addEventListener","prototype","getModuleName","on","getTreeColumn","removeEventListener","isDestroyed","off","destroy","columnModel","treeColumn","treeColumnIndex","treeIndex","updatedCols","getColumns","f","length","treeColumnfield","parentColumnfield","setProperties"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,OAAO,IAAIC,WAArC,QAAwD,uBAAxD;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,OAAO;AAAG;AAAe,YAAY;AACrC;AACJ;AACA;AACA;AACA;AACI,WAASA,OAAT,CAAiBE,MAAjB,EAAyB;AACrBH,IAAAA,IAAI,CAACI,MAAL,CAAYF,WAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKE,gBAAL;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIJ,EAAAA,OAAO,CAACK,SAAR,CAAkBC,aAAlB,GAAkC,YAAY;AAC1C,WAAO,SAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACIN,EAAAA,OAAO,CAACK,SAAR,CAAkBD,gBAAlB,GAAqC,YAAY;AAC7C,SAAKF,MAAL,CAAYK,EAAZ,CAAe,gBAAf,EAAiC,KAAKC,aAAtC,EAAqD,IAArD;AACH,GAFD;;AAGAR,EAAAA,OAAO,CAACK,SAAR,CAAkBI,mBAAlB,GAAwC,YAAY;AAChD,QAAI,KAAKP,MAAL,CAAYQ,WAAhB,EAA6B;AACzB;AACH;;AACD,SAAKR,MAAL,CAAYS,GAAZ,CAAgB,gBAAhB,EAAkC,KAAKH,aAAvC;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;;;AACIR,EAAAA,OAAO,CAACK,SAAR,CAAkBO,OAAlB,GAA4B,YAAY;AACpC,SAAKH,mBAAL;AACH,GAFD;;AAGAT,EAAAA,OAAO,CAACK,SAAR,CAAkBG,aAAlB,GAAkC,YAAY;AAC1C,QAAIK,WAAW,GAAG,aAAlB;AACA,QAAIC,UAAU,GAAG,KAAKZ,MAAL,CAAYW,WAAZ,EAAyB,KAAKX,MAAL,CAAYa,eAArC,CAAjB;AACA,QAAIC,SAAJ;AACA,QAAIC,WAAW,GAAG,KAAKf,MAAL,CAAYgB,UAAZ,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAIE,eAAe,GAAGvB,SAAS,CAAC,OAAD,EAAUgB,UAAV,CAA/B;AACA,UAAIQ,iBAAiB,GAAGxB,SAAS,CAAC,OAAD,EAAUmB,WAAW,CAACE,CAAD,CAArB,CAAjC;;AACA,UAAIE,eAAe,KAAKC,iBAAxB,EAA2C;AACvCN,QAAAA,SAAS,GAAGG,CAAZ;AACA;AACH;AACJ;;AACD,SAAKjB,MAAL,CAAYqB,aAAZ,CAA0B;AAAER,MAAAA,eAAe,EAAEC;AAAnB,KAA1B,EAA0D,IAA1D;AACH,GAdD;;AAeA,SAAOhB,OAAP;AACH,CA1D4B,EAA7B;;AA2DA,SAASA,OAAT","sourcesContent":["import { getObject, Grid, Reorder as GridReorder } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid Reorder module\n *\n * @hidden\n */\nvar Reorder = /** @class */ (function () {\n    /**\n     * Constructor for Reorder module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Reorder(parent) {\n        Grid.Inject(GridReorder);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Reorder module name\n     */\n    Reorder.prototype.getModuleName = function () {\n        return 'reorder';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Reorder.prototype.addEventListener = function () {\n        this.parent.on('getColumnIndex', this.getTreeColumn, this);\n    };\n    Reorder.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('getColumnIndex', this.getTreeColumn);\n    };\n    /**\n     * To destroy the Reorder\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Reorder.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    Reorder.prototype.getTreeColumn = function () {\n        var columnModel = 'columnModel';\n        var treeColumn = this.parent[columnModel][this.parent.treeColumnIndex];\n        var treeIndex;\n        var updatedCols = this.parent.getColumns();\n        for (var f = 0; f < updatedCols.length; f++) {\n            var treeColumnfield = getObject('field', treeColumn);\n            var parentColumnfield = getObject('field', updatedCols[f]);\n            if (treeColumnfield === parentColumnfield) {\n                treeIndex = f;\n                break;\n            }\n        }\n        this.parent.setProperties({ treeColumnIndex: treeIndex }, true);\n    };\n    return Reorder;\n}());\nexport { Reorder };\n"]},"metadata":{},"sourceType":"module"}