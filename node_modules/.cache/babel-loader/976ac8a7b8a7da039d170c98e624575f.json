{"ast":null,"code":"import { Grid, RowDD as GridDragDrop, parentsUntil } from '@syncfusion/ej2-grids';\nimport { getObject, Scroll } from '@syncfusion/ej2-grids';\nimport { closest, isNullOrUndefined, classList, setValue, extend, getValue, removeClass, addClass } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport * as events from '../base/constant';\nimport { editAction } from './crud-actions';\nimport { getParentData, findChildrenRecords, isRemoteData, isOffline, isCountRequired } from '../utils';\n/**\n * TreeGrid RowDragAndDrop module\n *\n * @hidden\n */\n\nvar RowDD =\n/** @class */\nfunction () {\n  /**\n   * Constructor for render module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function RowDD(parent) {\n    /** @hidden */\n    this.canDrop = true;\n    /** @hidden */\n\n    this.isDraggedWithChild = false;\n    /** @hidden */\n\n    this.isaddtoBottom = false;\n    Grid.Inject(GridDragDrop);\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  RowDD.prototype.getChildrecordsByParentID = function (id) {\n    var treeGridDataSource;\n\n    if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n      treeGridDataSource = this.parent.grid.dataSource.dataSource.json;\n    } else {\n      treeGridDataSource = this.parent.grid.dataSource;\n    }\n\n    var record = treeGridDataSource.filter(function (e) {\n      return e.uniqueID === id;\n    });\n    return record;\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  RowDD.prototype.addEventListener = function () {\n    this.parent.on(events.rowdraging, this.Rowdraging, this);\n    this.parent.on(events.rowDropped, this.rowDropped, this);\n    this.parent.on(events.rowsAdd, this.rowsAdded, this);\n    this.parent.on(events.rowsRemove, this.rowsRemoved, this);\n  };\n  /**\n   * Reorder the rows based on given indexes and position\n   *\n   * @returns {void}\n   * @param {number[]} fromIndexes - source indexes of rows to be re-ordered\n   * @param {number} toIndex - Destination row index\n   * @param {string} position - Drop position as above or below or child\n   */\n\n\n  RowDD.prototype.reorderRows = function (fromIndexes, toIndex, position) {\n    var tObj = this.parent;\n\n    if (fromIndexes[0] !== toIndex && ['above', 'below', 'child'].indexOf(position) !== -1) {\n      if (position === 'above') {\n        this.dropPosition = 'topSegment';\n      }\n\n      if (position === 'below') {\n        this.dropPosition = 'bottomSegment';\n      }\n\n      if (position === 'child') {\n        this.dropPosition = 'middleSegment';\n      }\n\n      var data = [];\n\n      for (var i = 0; i < fromIndexes.length; i++) {\n        data[i] = this.parent.getCurrentViewRecords()[fromIndexes[i]];\n      }\n\n      var isByMethod = true;\n      var args = {\n        data: data,\n        dropIndex: toIndex\n      };\n\n      if (!isCountRequired(this.parent)) {\n        this.dropRows(args, isByMethod);\n      } //this.refreshGridDataSource();\n\n\n      if (tObj.isLocalData) {\n        tObj.flatData = this.orderToIndex(tObj.flatData);\n      }\n\n      this.parent.grid.refresh();\n\n      if (this.parent.enableImmutableMode && this.dropPosition === 'middleSegment') {\n        var index = this.parent.treeColumnIndex + 1;\n        var row = this.parent.getRows()[fromIndexes[0]];\n        var dropData = args.data[0];\n        var totalRecord = [];\n        var rows = [];\n        totalRecord.push(dropData);\n        rows.push(row);\n        var parentUniqueID = 'parentUniqueID';\n        var parentData = getParentData(this.parent, args.data[0][parentUniqueID]);\n        var parentrow = this.parent.getRows()[toIndex];\n        totalRecord.push(parentData);\n        rows.push(parentrow);\n\n        for (var i = 0; i < totalRecord.length; i++) {\n          this.parent.renderModule.cellRender({\n            data: totalRecord[i],\n            cell: rows[i].cells[index],\n            column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n            requestType: 'rowDragAndDrop'\n          });\n        }\n      }\n    } else {\n      return;\n    }\n  };\n\n  RowDD.prototype.orderToIndex = function (currentData) {\n    var _loop_1 = function (i) {\n      currentData[i].index = i;\n\n      if (!isNullOrUndefined(currentData[i].parentItem)) {\n        var updatedParent = currentData.filter(function (data) {\n          return data.uniqueID === currentData[i].parentUniqueID;\n        })[0];\n        currentData[i].parentItem.index = updatedParent.index;\n      }\n    };\n\n    for (var i = 0; i < currentData.length; i++) {\n      _loop_1(i);\n    }\n\n    return currentData;\n  };\n\n  RowDD.prototype.rowsAdded = function (e) {\n    var draggedRecord;\n    var dragRecords = e.records;\n\n    for (var i = e.records.length - 1; i > -1; i--) {\n      draggedRecord = dragRecords[i];\n\n      if (draggedRecord.parentUniqueID) {\n        var record = dragRecords.filter(function (data) {\n          return data.uniqueID === draggedRecord.parentUniqueID;\n        });\n\n        if (record.length) {\n          var index = record[0].childRecords.indexOf(draggedRecord);\n          var parentRecord = record[0];\n\n          if (index !== -1) {\n            if (isNullOrUndefined(this.parent.idMapping)) {\n              parentRecord.childRecords.splice(index, 1);\n\n              if (!parentRecord.childRecords.length) {\n                parentRecord.hasChildRecords = false;\n                parentRecord.hasFilteredChildRecords = false;\n              }\n            }\n\n            this.isDraggedWithChild = true;\n          }\n        }\n      }\n    }\n\n    if (isNullOrUndefined(this.parent.dataSource) || !this.parent.dataSource.length) {\n      var tObj = this.parent;\n      var draggedRecord_1;\n      var dragRecords_1 = e.records;\n      var dragLength = e.records.length;\n\n      for (var i = dragLength - 1; i > -1; i--) {\n        draggedRecord_1 = dragRecords_1[i];\n        var recordIndex1 = 0;\n\n        if (!isNullOrUndefined(tObj.parentIdMapping)) {\n          tObj.childMapping = null;\n        }\n\n        if (!isNullOrUndefined(draggedRecord_1.taskData) && !Object.prototype.hasOwnProperty.call(draggedRecord_1.taskData, tObj.childMapping)) {\n          draggedRecord_1.taskData[tObj.childMapping] = [];\n        }\n\n        if (Object.prototype.hasOwnProperty.call(draggedRecord_1, tObj.childMapping) && draggedRecord_1[tObj.childMapping].length && !this.isDraggedWithChild && !isNullOrUndefined(tObj.parentIdMapping)) {\n          var childData = draggedRecord_1[tObj.childMapping];\n\n          for (var j = 0; j < childData.length; j++) {\n            if (dragRecords_1.indexOf(childData[j]) === -1) {\n              dragRecords_1.splice(j, 0, childData[j]);\n              childData[j].taskData = extend({}, childData[j]);\n              i += 1;\n            }\n          }\n        }\n\n        if (Object.prototype.hasOwnProperty.call(draggedRecord_1, tObj.parentIdMapping) && draggedRecord_1[tObj.parentIdMapping] != null && !this.isDraggedWithChild) {\n          draggedRecord_1.taskData[tObj.parentIdMapping] = null;\n          delete draggedRecord_1.parentItem;\n          delete draggedRecord_1.parentUniqueID;\n        }\n\n        if (isNullOrUndefined(tObj.dataSource)) {\n          tObj.dataSource = [];\n        }\n\n        tObj.dataSource.splice(recordIndex1, 0, draggedRecord_1.taskData);\n      }\n\n      tObj.setProperties({\n        dataSource: tObj.dataSource\n      }, false);\n    } else {\n      for (var i = 0; i < dragRecords.length; i++) {\n        setValue('uniqueIDCollection.' + dragRecords[i].uniqueID, dragRecords[i], this.parent);\n      }\n\n      var args = {\n        data: e.records,\n        dropIndex: e.toIndex\n      };\n\n      if (this.parent.dataSource instanceof DataManager) {\n        this.treeGridData = this.parent.dataSource.dataSource.json;\n        this.treeData = this.parent.dataSource.dataSource.json;\n      } else {\n        this.treeGridData = this.parent.grid.dataSource;\n        this.treeData = this.parent.dataSource;\n      }\n\n      if (isNullOrUndefined(this.dropPosition)) {\n        this.dropPosition = 'bottomSegment'; // eslint-disable-next-line max-len\n\n        args.dropIndex = this.parent.getCurrentViewRecords().length > 1 ? this.parent.getCurrentViewRecords().length - 1 : args.dropIndex;\n        args.data = args.data.map(function (i) {\n          if (i.hasChildRecords && isNullOrUndefined(i.parentItem)) {\n            i.level = 0;\n            return i;\n          } else {\n            delete i.parentItem;\n            delete i.parentUniqueID;\n            i.level = 0;\n            return i;\n          }\n        });\n      }\n\n      this.dropRows(args);\n    }\n  };\n\n  RowDD.prototype.rowsRemoved = function (e) {\n    for (var i = 0; i < e.records.length; i++) {\n      this.draggedRecord = e.records[i];\n\n      if (this.draggedRecord.hasChildRecords || this.draggedRecord.parentItem && this.parent.grid.dataSource.indexOf(this.getChildrecordsByParentID(this.draggedRecord.parentUniqueID)[0]) !== -1 || this.draggedRecord.level === 0) {\n        this.deleteDragRow();\n      }\n    }\n  };\n\n  RowDD.prototype.refreshGridDataSource = function () {\n    var draggedRecord = this.draggedRecord;\n    var droppedRecord = this.droppedRecord;\n    var proxy = this.parent;\n    var tempDataSource;\n    var idx;\n\n    if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n      tempDataSource = proxy.dataSource.dataSource.json;\n    } else {\n      tempDataSource = proxy.dataSource;\n    } // eslint-disable-next-line max-len\n\n\n    if (tempDataSource && !isNullOrUndefined(droppedRecord) && !droppedRecord.parentItem && !isNullOrUndefined(droppedRecord.taskData)) {\n      for (var i = 0; i < Object.keys(tempDataSource).length; i++) {\n        if (tempDataSource[i][this.parent.childMapping] === droppedRecord.taskData[this.parent.childMapping]) {\n          idx = i;\n        }\n      }\n\n      if (this.dropPosition === 'topSegment') {\n        if (!this.parent.idMapping) {\n          tempDataSource.splice(idx, 0, draggedRecord.taskData);\n        }\n      } else if (this.dropPosition === 'bottomSegment') {\n        if (!this.parent.idMapping) {\n          tempDataSource.splice(idx + 1, 0, draggedRecord.taskData);\n        }\n      }\n    } else if (!this.parent.parentIdMapping && !isNullOrUndefined(droppedRecord) && droppedRecord.parentItem) {\n      if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n        var record = this.getChildrecordsByParentID(droppedRecord.parentUniqueID)[0];\n        var childRecords = record.childRecords;\n\n        for (var i = 0; i < childRecords.length; i++) {\n          droppedRecord.parentItem.taskData[this.parent.childMapping][i] = childRecords[i].taskData;\n        }\n      }\n    }\n\n    if (this.parent.parentIdMapping) {\n      if (draggedRecord.parentItem) {\n        if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n          draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n          draggedRecord.taskData[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n        } else {\n          draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.idMapping];\n          draggedRecord.taskData[this.parent.parentIdMapping] = droppedRecord[this.parent.idMapping];\n        }\n      } else {\n        draggedRecord.taskData[this.parent.parentIdMapping] = null;\n        draggedRecord[this.parent.parentIdMapping] = null;\n      }\n    }\n  };\n\n  RowDD.prototype.removeFirstrowBorder = function (element) {\n    var canremove = this.dropPosition === 'bottomSegment';\n\n    if (this.parent.element.getElementsByClassName('e-firstrow-border').length > 0 && element && (element.rowIndex !== 0 || canremove)) {\n      this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();\n    }\n  };\n\n  RowDD.prototype.removeLastrowBorder = function (element) {\n    var isEmptyRow = element && (element.classList.contains('e-emptyrow') || element.classList.contains('e-columnheader'));\n    var islastRowIndex = element && !isEmptyRow && this.parent.getRowByIndex(this.parent.getRows().length - 1).getAttribute('data-uid') !== element.getAttribute('data-uid');\n    var canremove = islastRowIndex || this.dropPosition === 'topSegment';\n\n    if (this.parent.element.getElementsByClassName('e-lastrow-border').length > 0 && element && (islastRowIndex || canremove)) {\n      this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();\n    }\n  };\n\n  RowDD.prototype.updateIcon = function (row, index, args) {\n    var rowEle = args.target ? closest(args.target, 'tr') : null;\n    this.dropPosition = undefined;\n    var rowPositionHeight = 0;\n    this.removeFirstrowBorder(rowEle);\n    this.removeLastrowBorder(rowEle);\n\n    for (var i = 0; i < args.rows.length; i++) {\n      if (!isNullOrUndefined(rowEle) && rowEle.getAttribute('data-uid') === args.rows[i].getAttribute('data-uid') || !parentsUntil(args.target, 'e-gridcontent')) {\n        this.dropPosition = 'Invalid';\n        this.addErrorElem();\n      }\n    } // To get the corresponding drop position related to mouse position\n\n\n    var tObj = this.parent;\n    var rowTop = 0;\n    var roundOff = 0;\n    var toolHeight = tObj.toolbar && tObj.toolbar.length ? document.getElementById(tObj.element.id + '_gridcontrol_toolbarItems').offsetHeight : 0; // tObj.lastRow = tObj.getRowByIndex(tObj.getCurrentViewRecords().length - 1);\n\n    var positionOffSet = this.getOffset(tObj.element); // let contentHeight1: number = (tObj.element.offsetHeight  - (tObj.getContent() as HTMLElement).offsetHeight) + positionOffSet.top;\n\n    var contentHeight = tObj.getHeaderContent().offsetHeight + positionOffSet.top + toolHeight;\n    var scrollTop = tObj.getContent().firstElementChild.scrollTop;\n\n    if (!isNullOrUndefined(rowEle)) {\n      rowPositionHeight = rowEle.offsetTop - scrollTop;\n    } // let scrollTop = (tObj.grid.scrollModule as any).content.scrollTop;\n\n\n    rowTop = rowPositionHeight + contentHeight + roundOff;\n    var rowBottom = rowTop + row[0].offsetHeight;\n    var difference = rowBottom - rowTop;\n    var divide = difference / 3;\n    var topRowSegment = rowTop + divide;\n    var middleRowSegment = topRowSegment + divide;\n    var bottomRowSegment = middleRowSegment + divide;\n    var mouseEvent = getObject('originalEvent.event', args);\n    var posy = mouseEvent.pageY;\n    var isTopSegment = posy <= topRowSegment;\n    var isMiddleRowSegment = posy > topRowSegment && posy <= middleRowSegment;\n    var isBottomRowSegment = posy > middleRowSegment && posy <= bottomRowSegment;\n\n    if (isTopSegment || isMiddleRowSegment || isBottomRowSegment) {\n      if (isTopSegment && this.dropPosition !== 'Invalid') {\n        this.removeChildBorder();\n        this.dropPosition = 'topSegment';\n        this.removetopOrBottomBorder();\n        this.addFirstrowBorder(rowEle);\n        this.removeErrorElem();\n        this.removeLastrowBorder(rowEle);\n        this.topOrBottomBorder(args.target);\n      }\n\n      if (isMiddleRowSegment && this.dropPosition !== 'Invalid') {\n        this.removetopOrBottomBorder();\n        var rowElement = [];\n        var element = closest(args.target, 'tr');\n        rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));\n\n        if (rowElement.length > 0) {\n          this.addRemoveClasses(rowElement, true, 'e-childborder');\n        }\n\n        this.addLastRowborder(rowEle);\n        this.addFirstrowBorder(rowEle);\n        this.dropPosition = 'middleSegment';\n      }\n\n      if (isBottomRowSegment && this.dropPosition !== 'Invalid') {\n        this.removeErrorElem();\n        this.removetopOrBottomBorder();\n        this.removeChildBorder();\n        this.dropPosition = 'bottomSegment';\n        this.addLastRowborder(rowEle);\n        this.removeFirstrowBorder(rowEle);\n        this.topOrBottomBorder(args.target);\n      }\n    }\n\n    return this.dropPosition;\n  };\n\n  RowDD.prototype.removeChildBorder = function () {\n    var borderElem = [];\n    borderElem = [].slice.call(this.parent.element.querySelectorAll('.e-childborder'));\n\n    if (borderElem.length > 0) {\n      this.addRemoveClasses(borderElem, false, 'e-childborder');\n    }\n  };\n\n  RowDD.prototype.addFirstrowBorder = function (targetRow) {\n    var node = this.parent.element;\n    var tObj = this.parent;\n\n    if (targetRow && targetRow.rowIndex === 0 && !targetRow.classList.contains('e-emptyrow')) {\n      var div = this.parent.createElement('div', {\n        className: 'e-firstrow-border'\n      });\n      var gridheaderEle = this.parent.getHeaderContent();\n      var toolbarHeight = 0;\n\n      if (tObj.toolbar) {\n        toolbarHeight = tObj.toolbarModule.getToolbar().offsetHeight;\n      }\n\n      var multiplegrid = !isNullOrUndefined(this.parent.rowDropSettings.targetID);\n\n      if (multiplegrid) {\n        div.style.top = this.parent.grid.element.getElementsByClassName('e-gridheader')[0].offsetHeight + toolbarHeight + 'px';\n      }\n\n      div.style.width = multiplegrid ? node.offsetWidth + 'px' : node.offsetWidth - this.getScrollWidth() + 'px';\n\n      if (!gridheaderEle.querySelectorAll('.e-firstrow-border').length) {\n        gridheaderEle.appendChild(div);\n      }\n    }\n  };\n\n  RowDD.prototype.addLastRowborder = function (trElement) {\n    var isEmptyRow = trElement && (trElement.classList.contains('e-emptyrow') || trElement.classList.contains('e-columnheader'));\n\n    if (trElement && !isEmptyRow && this.parent.getRowByIndex(this.parent.getRows().length - 1).getAttribute('data-uid') === trElement.getAttribute('data-uid')) {\n      var bottomborder = this.parent.createElement('div', {\n        className: 'e-lastrow-border'\n      });\n      var gridcontentEle = this.parent.getContent();\n      bottomborder.style.width = this.parent.element.offsetWidth - this.getScrollWidth() + 'px';\n\n      if (!gridcontentEle.querySelectorAll('.e-lastrow-border').length) {\n        gridcontentEle.classList.add('e-treegrid-relative');\n        gridcontentEle.appendChild(bottomborder);\n        bottomborder.style.bottom = this.getScrollWidth() + 'px';\n      }\n    }\n  };\n\n  RowDD.prototype.getScrollWidth = function () {\n    var scrollElem = this.parent.getContent().firstElementChild;\n    return scrollElem.scrollWidth > scrollElem.offsetWidth ? Scroll.getScrollBarWidth() : 0;\n  };\n\n  RowDD.prototype.addErrorElem = function () {\n    var dragelem = document.getElementsByClassName('e-cloneproperties')[0];\n    var errorelem = dragelem.querySelectorAll('.e-errorelem').length;\n\n    if (!errorelem && !this.parent.rowDropSettings.targetID) {\n      var ele = document.createElement('div');\n      classList(ele, ['e-errorcontainer'], []);\n      classList(ele, ['e-icons', 'e-errorelem'], []);\n      var errorVal = dragelem.querySelector('.errorValue');\n      var content = dragelem.querySelector('.e-rowcell').innerHTML;\n\n      if (errorVal) {\n        content = errorVal.innerHTML;\n        errorVal.parentNode.removeChild(errorVal);\n      }\n\n      dragelem.querySelector('.e-rowcell').innerHTML = '';\n      var spanContent = document.createElement('span');\n      spanContent.className = 'errorValue';\n      spanContent.style.paddingLeft = '16px';\n      spanContent.innerHTML = content;\n      dragelem.querySelector('.e-rowcell').appendChild(ele);\n      dragelem.querySelector('.e-rowcell').appendChild(spanContent);\n    }\n  };\n\n  RowDD.prototype.removeErrorElem = function () {\n    var errorelem = document.querySelector('.e-errorelem');\n\n    if (errorelem) {\n      errorelem.remove();\n    }\n  };\n\n  RowDD.prototype.topOrBottomBorder = function (target) {\n    var rowElement = [];\n    var element = closest(target, 'tr');\n    rowElement = element ? [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse')) : [];\n\n    if (rowElement.length) {\n      if (this.dropPosition === 'topSegment') {\n        this.addRemoveClasses(rowElement, true, 'e-droptop');\n\n        if (this.parent.element.getElementsByClassName('e-lastrow-dragborder').length > 0) {\n          this.parent.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();\n        }\n      }\n\n      if (this.dropPosition === 'bottomSegment') {\n        this.addRemoveClasses(rowElement, true, 'e-dropbottom');\n      }\n    }\n  };\n\n  RowDD.prototype.removetopOrBottomBorder = function () {\n    var border = [];\n    border = [].slice.call(this.parent.element.querySelectorAll('.e-dropbottom, .e-droptop'));\n\n    if (border.length) {\n      this.addRemoveClasses(border, false, 'e-dropbottom');\n      this.addRemoveClasses(border, false, 'e-droptop');\n    }\n  };\n\n  RowDD.prototype.addRemoveClasses = function (cells, add, className) {\n    for (var i = 0, len = cells.length; i < len; i++) {\n      if (add) {\n        cells[i].classList.add(className);\n      } else {\n        cells[i].classList.remove(className);\n      }\n    }\n  };\n\n  RowDD.prototype.getOffset = function (element) {\n    var box = element.getBoundingClientRect();\n    var body = document.body;\n    var docElem = document.documentElement;\n    var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\n    var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\n    var clientTop = docElem.clientTop || body.clientTop || 0;\n    var clientLeft = docElem.clientLeft || body.clientLeft || 0;\n    var top = box.top + scrollTop - clientTop;\n    var left = box.left + scrollLeft - clientLeft;\n    return {\n      top: Math.round(top),\n      left: Math.round(left)\n    };\n  };\n\n  RowDD.prototype.Rowdraging = function (args) {\n    var tObj = this.parent;\n    var cloneElement = this.parent.element.querySelector('.e-cloneproperties');\n    cloneElement.style.cursor = '';\n    var rowEle = args.target ? closest(args.target, 'tr') : null;\n    var rowIdx = rowEle ? rowEle.rowIndex : -1;\n    var dragRecords = [];\n    var droppedRecord = tObj.getCurrentViewRecords()[rowIdx];\n    this.removeErrorElem();\n    this.canDrop = true;\n\n    if (!args.data[0]) {\n      dragRecords.push(args.data);\n    } else {\n      dragRecords = args.data;\n    }\n\n    if (rowIdx !== -1) {\n      this.ensuredropPosition(dragRecords, droppedRecord);\n    } else {\n      this.canDrop = false;\n      this.addErrorElem();\n    }\n\n    if (!tObj.rowDropSettings.targetID && this.canDrop) {\n      tObj.rowDragAndDropModule.updateIcon(args.rows, rowIdx, args);\n    }\n\n    if (tObj.rowDropSettings.targetID) {\n      var dropElement = parentsUntil(args.target, 'e-treegrid');\n\n      if (dropElement && dropElement.id === this.parent.rowDropSettings.targetID) {\n        var srcControl = dropElement.ej2_instances[0];\n        srcControl.rowDragAndDropModule.updateIcon(args.rows, rowIdx, args);\n      }\n    }\n\n    if (args.target && closest(args.target, '#' + tObj.rowDropSettings.targetID)) {\n      var dropElement = parentsUntil(args.target, 'e-treegrid');\n\n      if (!dropElement) {\n        cloneElement.style.cursor = 'default';\n      }\n    }\n  };\n\n  RowDD.prototype.rowDropped = function (args) {\n    var tObj = this.parent;\n    var parentItem = 'parentItem';\n\n    if (!tObj.rowDropSettings.targetID) {\n      if (parentsUntil(args.target, 'e-content')) {\n        if (this.parent.element.querySelector('.e-errorelem')) {\n          this.dropPosition = 'Invalid';\n        }\n\n        setValue('dropPosition', this.dropPosition, args);\n        args.dropIndex = args.dropIndex === args.fromIndex ? this.getTargetIdx(args.target.parentElement) : args.dropIndex;\n        tObj.trigger(events.rowDrop, args);\n\n        if (!args.cancel) {\n          if (!isCountRequired(this.parent)) {\n            this.dropRows(args);\n          }\n\n          if (tObj.isLocalData) {\n            tObj.flatData = this.orderToIndex(tObj.flatData);\n          }\n\n          tObj.grid.refresh();\n\n          if (!isNullOrUndefined(tObj.getHeaderContent().querySelector('.e-firstrow-border'))) {\n            tObj.getHeaderContent().querySelector('.e-firstrow-border').remove();\n          }\n        }\n      }\n    } else {\n      if (args.target && closest(args.target, '#' + tObj.rowDropSettings.targetID) || parentsUntil(args.target, 'e-treegrid') && parentsUntil(args.target, 'e-treegrid').id === tObj.rowDropSettings.targetID) {\n        setValue('dropPosition', this.dropPosition, args);\n        tObj.trigger(events.rowDrop, args);\n\n        if (!args.cancel && tObj.rowDropSettings.targetID) {\n          this.dragDropGrid(args);\n\n          if (tObj.isLocalData) {\n            tObj.flatData = this.orderToIndex(tObj.flatData);\n          }\n        }\n      }\n    }\n\n    this.removetopOrBottomBorder();\n    this.removeChildBorder();\n\n    if (!isNullOrUndefined(this.parent.element.getElementsByClassName('e-firstrow-border')[0])) {\n      this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();\n    } else if (!isNullOrUndefined(this.parent.element.getElementsByClassName('e-lastrow-border')[0])) {\n      this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();\n    }\n\n    if (this.parent.enableImmutableMode && !this.parent.allowPaging && !isNullOrUndefined(args.data[0][parentItem])) {\n      var index = this.parent.treeColumnIndex;\n      index = index + 1;\n      var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n      var rowIndex = this.parent.grid.getRowIndexByPrimaryKey(args.data[0][primaryKeyField]);\n      var row = this.parent.getRows()[rowIndex];\n      var data = args.data[0];\n\n      if (this.dropPosition === 'middleSegment') {\n        var record = [];\n        var rows = [];\n        record.push(data);\n        rows.push(row);\n        var parentUniqueID = 'parentUniqueID';\n        data = getParentData(this.parent, args.data[0][parentUniqueID]);\n        rowIndex = this.parent.grid.getRowIndexByPrimaryKey(data[primaryKeyField]);\n        var parentrow = this.parent.getRows()[rowIndex];\n        record.push(data);\n        rows.push(parentrow);\n\n        for (var i = 0; i < record.length; i++) {\n          this.parent.renderModule.cellRender({\n            data: record[i],\n            cell: rows[i].cells[index],\n            column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n            requestType: 'rowDragAndDrop'\n          });\n        }\n\n        var targetEle = parentrow.getElementsByClassName('e-treegridcollapse')[0];\n\n        if (!isNullOrUndefined(targetEle)) {\n          removeClass([targetEle], 'e-treegridcollapse');\n          addClass([targetEle], 'e-treegridexpand');\n        }\n      } else {\n        this.parent.renderModule.cellRender({\n          data: data,\n          cell: row.cells[index],\n          column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n          requestType: 'rowDragAndDrop'\n        });\n      }\n    }\n  };\n\n  RowDD.prototype.dragDropGrid = function (args) {\n    var tObj = this.parent;\n    var targetRow = closest(args.target, 'tr');\n    var targetIndex = isNaN(this.getTargetIdx(targetRow)) ? 0 : this.getTargetIdx(targetRow);\n    var dropElement = parentsUntil(args.target, 'e-treegrid');\n    var srcControl;\n\n    if (dropElement && dropElement.id === this.parent.rowDropSettings.targetID && !isRemoteData(this.parent) && !isCountRequired(this.parent)) {\n      srcControl = dropElement.ej2_instances[0];\n      var records = tObj.getSelectedRecords();\n      var indexes = [];\n\n      for (var i = 0; i < records.length; i++) {\n        indexes[i] = records[i].index;\n      }\n\n      if (this.parent.idMapping != null && (isNullOrUndefined(this.dropPosition) || this.dropPosition === 'bottomSegment')) {\n        var actualData = [];\n\n        for (var i = 0; i < records.length; i++) {\n          if (records[i].hasChildRecords) {\n            actualData.push(records[i]);\n            var child = records[i].childRecords;\n\n            for (var i_1 = 0; i_1 < child.length; i_1++) {\n              actualData.push(child[i_1]); // push child records to drop the parent record along with its child records\n            }\n\n            records = actualData;\n          }\n        }\n      }\n\n      tObj.notify(events.rowsRemove, {\n        indexes: indexes,\n        records: records\n      });\n      srcControl.notify(events.rowsAdd, {\n        toIndex: targetIndex,\n        records: records\n      });\n      var srcControlFlatData = srcControl.rowDragAndDropModule.treeGridData;\n\n      if (!isNullOrUndefined(srcControlFlatData)) {\n        for (var i = 0; i < srcControlFlatData.length; i++) {\n          srcControlFlatData[i].index = i;\n\n          if (!isNullOrUndefined(srcControlFlatData[i].parentItem)) {\n            var actualIndex = getValue('uniqueIDCollection.' + srcControlFlatData[i].parentUniqueID + '.index', srcControl);\n            srcControlFlatData[i].parentItem.index = actualIndex;\n          }\n        }\n      }\n\n      tObj.grid.refresh();\n      srcControl.grid.refresh();\n\n      if (srcControl.grid.dataSource.length > 1) {\n        srcControl.grid.refresh();\n\n        if (!isNullOrUndefined(srcControl.getHeaderContent().querySelector('.e-firstrow-border'))) {\n          srcControl.getHeaderContent().querySelector('.e-firstrow-border').remove();\n        }\n\n        if (!isNullOrUndefined(srcControl.getContent().querySelector('.e-lastrow-border'))) {\n          srcControl.getContent().querySelector('.e-lastrow-border').remove();\n        }\n      }\n    }\n\n    if (isCountRequired(this.parent)) {\n      srcControl = dropElement.ej2_instances[0];\n      tObj.grid.refresh();\n      srcControl.grid.refresh();\n    }\n  };\n\n  RowDD.prototype.getTargetIdx = function (targetRow) {\n    return targetRow ? parseInt(targetRow.getAttribute('aria-rowindex'), 10) : 0;\n  };\n\n  RowDD.prototype.getParentData = function (record) {\n    var parentItem = record.parentItem;\n\n    if (this.dropPosition === 'bottomSegment') {\n      var selectedRecord = this.parent.getSelectedRecords()[0];\n      this.droppedRecord = getParentData(this.parent, selectedRecord.parentItem.uniqueID);\n    }\n\n    if (this.dropPosition === 'middleSegment') {\n      var level = this.parent.getSelectedRecords()[0].level;\n\n      if (level === parentItem.level) {\n        this.droppedRecord = getParentData(this.parent, parentItem.uniqueID);\n      } else {\n        this.getParentData(parentItem);\n      }\n    }\n  };\n\n  RowDD.prototype.dropRows = function (args, isByMethod) {\n    if (this.dropPosition !== 'Invalid' && !isRemoteData(this.parent)) {\n      var tObj = this.parent;\n      var draggedRecord = void 0;\n      var droppedRecord = void 0;\n\n      if (isNullOrUndefined(args.dropIndex)) {\n        var rowIndex = tObj.getSelectedRowIndexes()[0] - 1;\n        var record = tObj.getCurrentViewRecords()[rowIndex];\n        this.getParentData(record);\n      } else {\n        args.dropIndex = args.dropIndex === args.fromIndex ? this.getTargetIdx(args.target.parentElement) : args.dropIndex;\n        this.droppedRecord = tObj.getCurrentViewRecords()[args.dropIndex];\n      }\n\n      var dragRecords = [];\n      droppedRecord = this.droppedRecord;\n\n      if (!args.data[0]) {\n        dragRecords.push(args.data);\n      } else {\n        dragRecords = args.data;\n      }\n\n      var count = 0;\n      var multiplegrid = this.parent.rowDropSettings.targetID;\n      this.isMultipleGrid = multiplegrid;\n\n      if (!multiplegrid) {\n        this.ensuredropPosition(dragRecords, droppedRecord);\n      } else {\n        this.isaddtoBottom = multiplegrid && this.isDraggedWithChild;\n      }\n\n      var dragLength = dragRecords.length;\n\n      if (!isNullOrUndefined(this.parent.idMapping)) {\n        dragRecords.reverse();\n      }\n\n      for (var i = 0; i < dragLength; i++) {\n        draggedRecord = dragRecords[i];\n        this.draggedRecord = draggedRecord;\n\n        if (this.dropPosition !== 'Invalid') {\n          if (!tObj.rowDropSettings.targetID || isByMethod) {\n            this.deleteDragRow();\n          }\n\n          if (this.draggedRecord === this.droppedRecord) {\n            var correctIndex = this.getTargetIdx(args.target.offsetParent.parentElement);\n\n            if (isNaN(correctIndex)) {\n              correctIndex = this.getTargetIdx(args.target.parentElement);\n            }\n\n            args.dropIndex = correctIndex;\n            droppedRecord = this.droppedRecord = this.parent.getCurrentViewRecords()[args.dropIndex];\n          }\n\n          var recordIndex1 = this.treeGridData.indexOf(droppedRecord);\n          this.dropAtTop(recordIndex1);\n\n          if (this.dropPosition === 'bottomSegment') {\n            if (!droppedRecord.hasChildRecords) {\n              if (this.parent.parentIdMapping) {\n                this.treeData.splice(recordIndex1 + 1, 0, this.draggedRecord.taskData);\n              }\n\n              this.treeGridData.splice(recordIndex1 + 1, 0, this.draggedRecord);\n            } else {\n              count = this.getChildCount(droppedRecord, 0);\n\n              if (this.parent.parentIdMapping) {\n                this.treeData.splice(recordIndex1 + count + 1, 0, this.draggedRecord.taskData);\n              }\n\n              this.treeGridData.splice(recordIndex1 + count + 1, 0, this.draggedRecord);\n            }\n\n            if (isNullOrUndefined(droppedRecord.parentItem)) {\n              delete draggedRecord.parentItem;\n              draggedRecord.level = 0;\n\n              if (this.parent.parentIdMapping) {\n                draggedRecord[this.parent.parentIdMapping] = null;\n              }\n            }\n\n            if (draggedRecord.hasChildRecords) {\n              var level = 1;\n              this.updateChildRecordLevel(draggedRecord, level);\n              this.updateChildRecord(draggedRecord, recordIndex1 + count + 1);\n            }\n\n            if (droppedRecord.parentItem) {\n              var rec = this.getChildrecordsByParentID(droppedRecord.parentUniqueID);\n              var childRecords = rec[0].childRecords;\n              var droppedRecordIndex = childRecords.indexOf(droppedRecord) + 1;\n              childRecords.splice(droppedRecordIndex, 0, draggedRecord);\n\n              if (this.parent.parentIdMapping) {\n                draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n                draggedRecord.parentItem = droppedRecord.parentItem;\n                draggedRecord.level = droppedRecord.level;\n              }\n            }\n          }\n\n          this.dropMiddle(recordIndex1);\n        }\n\n        if (isNullOrUndefined(draggedRecord.parentItem)) {\n          var parentRecords = tObj.parentData;\n          var newParentIndex = parentRecords.indexOf(this.droppedRecord);\n\n          if (this.dropPosition === 'bottomSegment') {\n            parentRecords.splice(newParentIndex + 1, 0, draggedRecord);\n          } else if (this.dropPosition === 'topSegment') {\n            parentRecords.splice(newParentIndex, 0, draggedRecord);\n          }\n        }\n\n        tObj.rowDragAndDropModule.refreshGridDataSource();\n      }\n    }\n  };\n\n  RowDD.prototype.dropMiddle = function (recordIndex) {\n    var tObj = this.parent;\n    var childRecords = findChildrenRecords(this.droppedRecord);\n    var childRecordsLength = isNullOrUndefined(childRecords) || childRecords.length === 0 ? recordIndex + 1 : childRecords.length + recordIndex + 1;\n\n    if (this.dropPosition === 'middleSegment') {\n      if (tObj.parentIdMapping) {\n        this.treeData.splice(childRecordsLength, 0, this.draggedRecord.taskData);\n        this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n      } else {\n        this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n      }\n\n      this.recordLevel();\n\n      if (this.draggedRecord.hasChildRecords) {\n        this.updateChildRecord(this.draggedRecord, childRecordsLength);\n      }\n    }\n  };\n\n  RowDD.prototype.dropAtTop = function (recordIndex1) {\n    var tObj = this.parent;\n\n    if (this.dropPosition === 'topSegment') {\n      if (tObj.parentIdMapping) {\n        this.treeData.splice(recordIndex1, 0, this.draggedRecord.taskData);\n      }\n\n      this.draggedRecord.parentItem = this.treeGridData[recordIndex1].parentItem;\n      this.draggedRecord.parentUniqueID = this.treeGridData[recordIndex1].parentUniqueID;\n      this.draggedRecord.level = this.treeGridData[recordIndex1].level;\n      this.treeGridData.splice(recordIndex1, 0, this.draggedRecord);\n\n      if (this.draggedRecord.hasChildRecords) {\n        var level = 1;\n        this.updateChildRecord(this.draggedRecord, recordIndex1);\n        this.updateChildRecordLevel(this.draggedRecord, level);\n      }\n\n      if (this.droppedRecord.parentItem) {\n        var rec = this.getChildrecordsByParentID(this.droppedRecord.parentUniqueID);\n        var childRecords = rec[0].childRecords;\n        var droppedRecordIndex = childRecords.indexOf(this.droppedRecord);\n        childRecords.splice(droppedRecordIndex, 0, this.draggedRecord);\n      }\n    }\n  };\n\n  RowDD.prototype.recordLevel = function () {\n    var tObj = this.parent;\n    var draggedRecord = this.draggedRecord;\n    var droppedRecord = this.droppedRecord;\n    var childItem = tObj.childMapping;\n\n    if (!droppedRecord.hasChildRecords) {\n      droppedRecord.hasChildRecords = true;\n      droppedRecord.hasFilteredChildRecords = true;\n\n      if (isNullOrUndefined(droppedRecord.childRecords) || droppedRecord.childRecords.length === 0) {\n        droppedRecord.childRecords = [];\n\n        if (!tObj.parentIdMapping && isNullOrUndefined(droppedRecord.taskData[childItem])) {\n          droppedRecord.taskData[childItem] = [];\n        }\n      }\n    }\n\n    if (this.dropPosition === 'middleSegment') {\n      var parentItem = extend({}, droppedRecord);\n      delete parentItem.childRecords;\n      draggedRecord.parentItem = parentItem;\n      draggedRecord.parentUniqueID = droppedRecord.uniqueID;\n      droppedRecord.childRecords.splice(droppedRecord.childRecords.length, 0, draggedRecord);\n\n      if (!isNullOrUndefined(draggedRecord) && !tObj.parentIdMapping && !isNullOrUndefined(droppedRecord.taskData[childItem])) {\n        droppedRecord.taskData[tObj.childMapping].splice(droppedRecord.childRecords.length, 0, draggedRecord.taskData);\n      }\n\n      if (!draggedRecord.hasChildRecords) {\n        draggedRecord.level = droppedRecord.level + 1;\n      } else {\n        var level = 1;\n        draggedRecord.level = droppedRecord.level + 1;\n        this.updateChildRecordLevel(draggedRecord, level);\n      }\n\n      droppedRecord.expanded = true;\n    }\n  };\n\n  RowDD.prototype.deleteDragRow = function () {\n    if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n      this.treeGridData = this.parent.grid.dataSource.dataSource.json;\n      this.treeData = this.parent.dataSource.dataSource.json;\n    } else {\n      this.treeGridData = this.parent.grid.dataSource;\n      this.treeData = this.parent.dataSource;\n    }\n\n    var deletedRow = getParentData(this.parent, this.draggedRecord.uniqueID);\n    this.removeRecords(deletedRow);\n  };\n\n  RowDD.prototype.updateChildRecord = function (record, count) {\n    var currentRecord;\n    var tObj = this.parent;\n    var length = 0;\n\n    if (!record.hasChildRecords) {\n      return 0;\n    }\n\n    length = record.childRecords.length;\n\n    for (var i = 0; i < length; i++) {\n      currentRecord = record.childRecords[i];\n      count++;\n      tObj.flatData.splice(count, 0, currentRecord);\n      setValue('uniqueIDCollection.' + currentRecord.uniqueID, currentRecord, this.parent);\n\n      if (tObj.parentIdMapping) {\n        this.treeData.splice(count, 0, currentRecord.taskData);\n      }\n\n      if (currentRecord.hasChildRecords) {\n        count = this.updateChildRecord(currentRecord, count);\n      }\n    }\n\n    return count;\n  };\n\n  RowDD.prototype.updateChildRecordLevel = function (record, level) {\n    var length = 0;\n    var currentRecord;\n    level++;\n\n    if (!record.hasChildRecords) {\n      return 0;\n    }\n\n    length = record.childRecords.length;\n\n    for (var i = 0; i < length; i++) {\n      currentRecord = record.childRecords[i];\n      var parentData = void 0;\n\n      if (record.parentItem) {\n        parentData = getParentData(this.parent, record.parentItem.uniqueID);\n      }\n\n      if (isNullOrUndefined(parentData) && !isNullOrUndefined(record.parentItem)) {\n        parentData = record.parentItem;\n      }\n\n      currentRecord.level = record.parentItem ? parentData.level + level : record.level + 1;\n\n      if (currentRecord.hasChildRecords) {\n        level--;\n        level = this.updateChildRecordLevel(currentRecord, level);\n      }\n    }\n\n    return level;\n  };\n\n  RowDD.prototype.removeRecords = function (record) {\n    var tObj = this.parent;\n    var dataSource;\n\n    if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n      dataSource = this.parent.dataSource.dataSource.json;\n    } else {\n      dataSource = this.parent.dataSource;\n    }\n\n    var deletedRow = record;\n    var isSelfReference = !isNullOrUndefined(tObj.parentIdMapping);\n    var flatParentData = this.getChildrecordsByParentID(deletedRow.parentUniqueID)[0];\n\n    if (deletedRow) {\n      if (deletedRow.parentItem) {\n        var childRecords = flatParentData ? flatParentData.childRecords : [];\n        var childIndex = 0;\n\n        if (childRecords && childRecords.length > 0) {\n          childIndex = childRecords.indexOf(deletedRow);\n          flatParentData.childRecords.splice(childIndex, 1);\n\n          if (!this.parent.parentIdMapping) {\n            editAction({\n              value: deletedRow,\n              action: 'delete'\n            }, this.parent, isSelfReference, deletedRow.index, deletedRow.index);\n          }\n        }\n      }\n\n      if (tObj.parentIdMapping) {\n        if (deletedRow.hasChildRecords && deletedRow.childRecords.length > 0) {\n          this.removeChildItem(deletedRow);\n        }\n\n        var idx = void 0;\n        var idz = void 0;\n        var treeGridData = dataSource;\n\n        for (var i = 0; i < treeGridData.length; i++) {\n          if (treeGridData[i][this.parent.idMapping] === deletedRow.taskData[this.parent.idMapping]) {\n            idx = i;\n          }\n        }\n\n        for (var i = 0; i < this.treeGridData.length; i++) {\n          if (this.treeGridData[i][this.parent.idMapping] === deletedRow.taskData[this.parent.idMapping]) {\n            idz = i;\n          }\n        }\n\n        if (idx !== -1 || idz !== -1) {\n          dataSource.splice(idx, 1);\n          this.treeGridData.splice(idz, 1);\n        }\n      }\n\n      var recordIndex = this.treeGridData.indexOf(deletedRow);\n\n      if (!tObj.parentIdMapping) {\n        var parentIndex = this.parent.parentData.indexOf(deletedRow);\n\n        if (parentIndex !== -1) {\n          tObj.parentData.splice(parentIndex, 1);\n          dataSource.splice(parentIndex, 1);\n        }\n      }\n\n      if (recordIndex === -1 && !tObj.parentIdMapping) {\n        var primaryKeyField = tObj.getPrimaryKeyFieldNames()[0];\n\n        for (var j = 0; j < this.treeGridData.length; j++) {\n          if (this.treeGridData[j][primaryKeyField] === deletedRow[primaryKeyField]) {\n            recordIndex = j;\n          }\n        }\n      }\n\n      if (!tObj.parentIdMapping) {\n        var deletedRecordCount = this.getChildCount(deletedRow, 0);\n        this.treeGridData.splice(recordIndex, deletedRecordCount + 1);\n      }\n\n      if (deletedRow.parentItem && flatParentData && flatParentData.childRecords && !flatParentData.childRecords.length) {\n        flatParentData.expanded = false;\n        flatParentData.hasChildRecords = false;\n        flatParentData.hasFilteredChildRecords = false;\n      }\n    }\n  };\n\n  RowDD.prototype.removeChildItem = function (record) {\n    var currentRecord;\n    var idx;\n    var idz;\n    var dataSource;\n\n    if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n      dataSource = this.parent.dataSource.dataSource.json;\n    } else {\n      dataSource = this.parent.dataSource;\n    }\n\n    for (var i = 0; i < record.childRecords.length; i++) {\n      currentRecord = record.childRecords[i];\n      var treeGridData = void 0;\n\n      if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n        treeGridData = this.parent.dataSource.dataSource.json;\n      } else {\n        treeGridData = this.parent.dataSource;\n      }\n\n      for (var i_2 = 0; i_2 < treeGridData.length; i_2++) {\n        if (treeGridData[i_2][this.parent.idMapping] === currentRecord.taskData[this.parent.idMapping]) {\n          idx = i_2;\n        }\n      }\n\n      for (var i_3 = 0; i_3 < this.treeGridData.length; i_3++) {\n        if (this.treeGridData[i_3][this.parent.idMapping] === currentRecord.taskData[this.parent.idMapping]) {\n          idz = i_3;\n          break;\n        }\n      }\n\n      if (idx !== -1 || idz !== -1) {\n        dataSource.splice(idx, 1);\n        this.treeGridData.splice(idz, 1);\n      }\n\n      if (currentRecord.hasChildRecords) {\n        this.removeChildItem(currentRecord);\n      }\n    }\n  };\n\n  RowDD.prototype.getChildCount = function (record, count) {\n    var currentRecord;\n\n    if (!record.hasChildRecords) {\n      return 0;\n    }\n\n    for (var i = 0; i < record.childRecords.length; i++) {\n      currentRecord = record.childRecords[i];\n      count++;\n\n      if (currentRecord.hasChildRecords) {\n        count = this.getChildCount(currentRecord, count);\n      }\n    }\n\n    return count;\n  };\n\n  RowDD.prototype.ensuredropPosition = function (draggedRecords, currentRecord) {\n    var _this = this;\n\n    draggedRecords.filter(function (e) {\n      if (e.hasChildRecords && !isNullOrUndefined(e.childRecords)) {\n        var valid = e.childRecords.indexOf(currentRecord);\n\n        if (valid === -1) {\n          _this.ensuredropPosition(e.childRecords, currentRecord);\n        } else {\n          _this.dropPosition = 'Invalid';\n\n          _this.addErrorElem();\n\n          _this.canDrop = false;\n          return;\n        }\n      }\n    });\n  };\n\n  RowDD.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  RowDD.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.rowdraging, this.Rowdraging);\n    this.parent.off(events.rowDropped, this.rowDropped);\n    this.parent.off(events.rowsAdd, this.rowsAdded);\n    this.parent.off(events.rowsRemove, this.rowsRemoved);\n  };\n  /**\n   * hidden\n   */\n\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns RowDragAndDrop module name\n   */\n\n\n  RowDD.prototype.getModuleName = function () {\n    return 'rowDragAndDrop';\n  };\n\n  return RowDD;\n}();\n\nexport { RowDD };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/rowdragdrop.js"],"names":["Grid","RowDD","GridDragDrop","parentsUntil","getObject","Scroll","closest","isNullOrUndefined","classList","setValue","extend","getValue","removeClass","addClass","DataManager","events","editAction","getParentData","findChildrenRecords","isRemoteData","isOffline","isCountRequired","parent","canDrop","isDraggedWithChild","isaddtoBottom","Inject","addEventListener","prototype","getChildrecordsByParentID","id","treeGridDataSource","dataSource","grid","json","record","filter","e","uniqueID","on","rowdraging","Rowdraging","rowDropped","rowsAdd","rowsAdded","rowsRemove","rowsRemoved","reorderRows","fromIndexes","toIndex","position","tObj","indexOf","dropPosition","data","i","length","getCurrentViewRecords","isByMethod","args","dropIndex","dropRows","isLocalData","flatData","orderToIndex","refresh","enableImmutableMode","index","treeColumnIndex","row","getRows","dropData","totalRecord","rows","push","parentUniqueID","parentData","parentrow","renderModule","cellRender","cell","cells","column","getColumns","requestType","currentData","_loop_1","parentItem","updatedParent","draggedRecord","dragRecords","records","childRecords","parentRecord","idMapping","splice","hasChildRecords","hasFilteredChildRecords","draggedRecord_1","dragRecords_1","dragLength","recordIndex1","parentIdMapping","childMapping","taskData","Object","hasOwnProperty","call","childData","j","setProperties","treeGridData","treeData","map","level","deleteDragRow","refreshGridDataSource","droppedRecord","proxy","tempDataSource","idx","keys","removeFirstrowBorder","element","canremove","getElementsByClassName","rowIndex","remove","removeLastrowBorder","isEmptyRow","contains","islastRowIndex","getRowByIndex","getAttribute","updateIcon","rowEle","target","undefined","rowPositionHeight","addErrorElem","rowTop","roundOff","toolHeight","toolbar","document","getElementById","offsetHeight","positionOffSet","getOffset","contentHeight","getHeaderContent","top","scrollTop","getContent","firstElementChild","offsetTop","rowBottom","difference","divide","topRowSegment","middleRowSegment","bottomRowSegment","mouseEvent","posy","pageY","isTopSegment","isMiddleRowSegment","isBottomRowSegment","removeChildBorder","removetopOrBottomBorder","addFirstrowBorder","removeErrorElem","topOrBottomBorder","rowElement","slice","querySelectorAll","addRemoveClasses","addLastRowborder","borderElem","targetRow","node","div","createElement","className","gridheaderEle","toolbarHeight","toolbarModule","getToolbar","multiplegrid","rowDropSettings","targetID","style","width","offsetWidth","getScrollWidth","appendChild","trElement","bottomborder","gridcontentEle","add","bottom","scrollElem","scrollWidth","getScrollBarWidth","dragelem","errorelem","ele","errorVal","querySelector","content","innerHTML","parentNode","removeChild","spanContent","paddingLeft","border","len","box","getBoundingClientRect","body","docElem","documentElement","window","pageYOffset","scrollLeft","pageXOffset","clientTop","clientLeft","left","Math","round","cloneElement","cursor","rowIdx","ensuredropPosition","rowDragAndDropModule","dropElement","srcControl","ej2_instances","fromIndex","getTargetIdx","parentElement","trigger","rowDrop","cancel","dragDropGrid","allowPaging","primaryKeyField","getPrimaryKeyFieldNames","getRowIndexByPrimaryKey","targetEle","targetIndex","isNaN","getSelectedRecords","indexes","actualData","child","i_1","notify","srcControlFlatData","actualIndex","parseInt","selectedRecord","getSelectedRowIndexes","count","isMultipleGrid","reverse","correctIndex","offsetParent","dropAtTop","getChildCount","updateChildRecordLevel","updateChildRecord","rec","droppedRecordIndex","dropMiddle","parentRecords","newParentIndex","recordIndex","childRecordsLength","recordLevel","childItem","expanded","deletedRow","removeRecords","currentRecord","isSelfReference","flatParentData","childIndex","value","action","removeChildItem","idz","parentIndex","deletedRecordCount","i_2","i_3","draggedRecords","_this","valid","destroy","removeEventListener","isDestroyed","off","getModuleName"],"mappings":"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","sourcesContent":["import { Grid, RowDD as GridDragDrop, parentsUntil } from '@syncfusion/ej2-grids';\nimport { getObject, Scroll } from '@syncfusion/ej2-grids';\nimport { closest, isNullOrUndefined, classList, setValue, extend, getValue, removeClass, addClass } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport * as events from '../base/constant';\nimport { editAction } from './crud-actions';\nimport { getParentData, findChildrenRecords, isRemoteData, isOffline, isCountRequired } from '../utils';\n/**\n * TreeGrid RowDragAndDrop module\n *\n * @hidden\n */\nvar RowDD = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function RowDD(parent) {\n        /** @hidden */\n        this.canDrop = true;\n        /** @hidden */\n        this.isDraggedWithChild = false;\n        /** @hidden */\n        this.isaddtoBottom = false;\n        Grid.Inject(GridDragDrop);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    RowDD.prototype.getChildrecordsByParentID = function (id) {\n        var treeGridDataSource;\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            treeGridDataSource = this.parent.grid.dataSource.dataSource.json;\n        }\n        else {\n            treeGridDataSource = this.parent.grid.dataSource;\n        }\n        var record = treeGridDataSource.filter(function (e) {\n            return e.uniqueID === id;\n        });\n        return record;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    RowDD.prototype.addEventListener = function () {\n        this.parent.on(events.rowdraging, this.Rowdraging, this);\n        this.parent.on(events.rowDropped, this.rowDropped, this);\n        this.parent.on(events.rowsAdd, this.rowsAdded, this);\n        this.parent.on(events.rowsRemove, this.rowsRemoved, this);\n    };\n    /**\n     * Reorder the rows based on given indexes and position\n     *\n     * @returns {void}\n     * @param {number[]} fromIndexes - source indexes of rows to be re-ordered\n     * @param {number} toIndex - Destination row index\n     * @param {string} position - Drop position as above or below or child\n     */\n    RowDD.prototype.reorderRows = function (fromIndexes, toIndex, position) {\n        var tObj = this.parent;\n        if (fromIndexes[0] !== toIndex && ['above', 'below', 'child'].indexOf(position) !== -1) {\n            if (position === 'above') {\n                this.dropPosition = 'topSegment';\n            }\n            if (position === 'below') {\n                this.dropPosition = 'bottomSegment';\n            }\n            if (position === 'child') {\n                this.dropPosition = 'middleSegment';\n            }\n            var data = [];\n            for (var i = 0; i < fromIndexes.length; i++) {\n                data[i] = this.parent.getCurrentViewRecords()[fromIndexes[i]];\n            }\n            var isByMethod = true;\n            var args = {\n                data: data,\n                dropIndex: toIndex\n            };\n            if (!isCountRequired(this.parent)) {\n                this.dropRows(args, isByMethod);\n            }\n            //this.refreshGridDataSource();\n            if (tObj.isLocalData) {\n                tObj.flatData = this.orderToIndex(tObj.flatData);\n            }\n            this.parent.grid.refresh();\n            if (this.parent.enableImmutableMode && this.dropPosition === 'middleSegment') {\n                var index = this.parent.treeColumnIndex + 1;\n                var row = this.parent.getRows()[fromIndexes[0]];\n                var dropData = args.data[0];\n                var totalRecord = [];\n                var rows = [];\n                totalRecord.push(dropData);\n                rows.push(row);\n                var parentUniqueID = 'parentUniqueID';\n                var parentData = getParentData(this.parent, args.data[0][parentUniqueID]);\n                var parentrow = this.parent.getRows()[toIndex];\n                totalRecord.push(parentData);\n                rows.push(parentrow);\n                for (var i = 0; i < totalRecord.length; i++) {\n                    this.parent.renderModule.cellRender({\n                        data: totalRecord[i], cell: rows[i].cells[index],\n                        column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n                        requestType: 'rowDragAndDrop'\n                    });\n                }\n            }\n        }\n        else {\n            return;\n        }\n    };\n    RowDD.prototype.orderToIndex = function (currentData) {\n        var _loop_1 = function (i) {\n            currentData[i].index = i;\n            if (!isNullOrUndefined(currentData[i].parentItem)) {\n                var updatedParent = currentData.filter(function (data) {\n                    return data.uniqueID === currentData[i].parentUniqueID;\n                })[0];\n                currentData[i].parentItem.index = updatedParent.index;\n            }\n        };\n        for (var i = 0; i < currentData.length; i++) {\n            _loop_1(i);\n        }\n        return currentData;\n    };\n    RowDD.prototype.rowsAdded = function (e) {\n        var draggedRecord;\n        var dragRecords = e.records;\n        for (var i = e.records.length - 1; i > -1; i--) {\n            draggedRecord = dragRecords[i];\n            if (draggedRecord.parentUniqueID) {\n                var record = dragRecords.filter(function (data) {\n                    return data.uniqueID === draggedRecord.parentUniqueID;\n                });\n                if (record.length) {\n                    var index = record[0].childRecords.indexOf(draggedRecord);\n                    var parentRecord = record[0];\n                    if (index !== -1) {\n                        if (isNullOrUndefined(this.parent.idMapping)) {\n                            parentRecord.childRecords.splice(index, 1);\n                            if (!parentRecord.childRecords.length) {\n                                parentRecord.hasChildRecords = false;\n                                parentRecord.hasFilteredChildRecords = false;\n                            }\n                        }\n                        this.isDraggedWithChild = true;\n                    }\n                }\n            }\n        }\n        if (isNullOrUndefined(this.parent.dataSource) || !this.parent.dataSource.length) {\n            var tObj = this.parent;\n            var draggedRecord_1;\n            var dragRecords_1 = e.records;\n            var dragLength = e.records.length;\n            for (var i = dragLength - 1; i > -1; i--) {\n                draggedRecord_1 = dragRecords_1[i];\n                var recordIndex1 = 0;\n                if (!isNullOrUndefined(tObj.parentIdMapping)) {\n                    tObj.childMapping = null;\n                }\n                if (!isNullOrUndefined(draggedRecord_1.taskData) &&\n                    !Object.prototype.hasOwnProperty.call(draggedRecord_1.taskData, tObj.childMapping)) {\n                    draggedRecord_1.taskData[tObj.childMapping] = [];\n                }\n                if (Object.prototype.hasOwnProperty.call(draggedRecord_1, tObj.childMapping) &&\n                    (draggedRecord_1[tObj.childMapping]).length && !this.isDraggedWithChild &&\n                    !isNullOrUndefined(tObj.parentIdMapping)) {\n                    var childData = (draggedRecord_1[tObj.childMapping]);\n                    for (var j = 0; j < childData.length; j++) {\n                        if (dragRecords_1.indexOf(childData[j]) === -1) {\n                            dragRecords_1.splice(j, 0, childData[j]);\n                            childData[j].taskData = extend({}, childData[j]);\n                            i += 1;\n                        }\n                    }\n                }\n                if (Object.prototype.hasOwnProperty.call(draggedRecord_1, tObj.parentIdMapping) && draggedRecord_1[tObj.parentIdMapping] != null\n                    && !this.isDraggedWithChild) {\n                    draggedRecord_1.taskData[tObj.parentIdMapping] = null;\n                    delete draggedRecord_1.parentItem;\n                    delete draggedRecord_1.parentUniqueID;\n                }\n                if (isNullOrUndefined(tObj.dataSource)) {\n                    tObj.dataSource = [];\n                }\n                tObj.dataSource.splice(recordIndex1, 0, draggedRecord_1.taskData);\n            }\n            tObj.setProperties({ dataSource: tObj.dataSource }, false);\n        }\n        else {\n            for (var i = 0; i < dragRecords.length; i++) {\n                setValue('uniqueIDCollection.' + dragRecords[i].uniqueID, dragRecords[i], this.parent);\n            }\n            var args = { data: e.records, dropIndex: e.toIndex };\n            if (this.parent.dataSource instanceof DataManager) {\n                this.treeGridData = this.parent.dataSource.dataSource.json;\n                this.treeData = this.parent.dataSource.dataSource.json;\n            }\n            else {\n                this.treeGridData = this.parent.grid.dataSource;\n                this.treeData = this.parent.dataSource;\n            }\n            if (isNullOrUndefined(this.dropPosition)) {\n                this.dropPosition = 'bottomSegment';\n                // eslint-disable-next-line max-len\n                args.dropIndex = this.parent.getCurrentViewRecords().length > 1 ? this.parent.getCurrentViewRecords().length - 1 : args.dropIndex;\n                args.data = args.data.map(function (i) {\n                    if (i.hasChildRecords && isNullOrUndefined(i.parentItem)) {\n                        i.level = 0;\n                        return i;\n                    }\n                    else {\n                        delete i.parentItem;\n                        delete i.parentUniqueID;\n                        i.level = 0;\n                        return i;\n                    }\n                });\n            }\n            this.dropRows(args);\n        }\n    };\n    RowDD.prototype.rowsRemoved = function (e) {\n        for (var i = 0; i < e.records.length; i++) {\n            this.draggedRecord = e.records[i];\n            if (this.draggedRecord.hasChildRecords || this.draggedRecord.parentItem &&\n                this.parent.grid.dataSource.\n                    indexOf(this.getChildrecordsByParentID(this.draggedRecord.parentUniqueID)[0]) !== -1 ||\n                this.draggedRecord.level === 0) {\n                this.deleteDragRow();\n            }\n        }\n    };\n    RowDD.prototype.refreshGridDataSource = function () {\n        var draggedRecord = this.draggedRecord;\n        var droppedRecord = this.droppedRecord;\n        var proxy = this.parent;\n        var tempDataSource;\n        var idx;\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            tempDataSource = proxy.dataSource.dataSource.json;\n        }\n        else {\n            tempDataSource = proxy.dataSource;\n        }\n        // eslint-disable-next-line max-len\n        if (tempDataSource && (!isNullOrUndefined(droppedRecord) && !droppedRecord.parentItem) && !isNullOrUndefined(droppedRecord.taskData)) {\n            for (var i = 0; i < Object.keys(tempDataSource).length; i++) {\n                if (tempDataSource[i][this.parent.childMapping] === droppedRecord.taskData[this.parent.childMapping]) {\n                    idx = i;\n                }\n            }\n            if (this.dropPosition === 'topSegment') {\n                if (!this.parent.idMapping) {\n                    tempDataSource.splice(idx, 0, draggedRecord.taskData);\n                }\n            }\n            else if (this.dropPosition === 'bottomSegment') {\n                if (!this.parent.idMapping) {\n                    tempDataSource.splice(idx + 1, 0, draggedRecord.taskData);\n                }\n            }\n        }\n        else if (!this.parent.parentIdMapping && (!isNullOrUndefined(droppedRecord) && droppedRecord.parentItem)) {\n            if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                var record = this.getChildrecordsByParentID(droppedRecord.parentUniqueID)[0];\n                var childRecords = record.childRecords;\n                for (var i = 0; i < childRecords.length; i++) {\n                    droppedRecord.parentItem.taskData[this.parent.childMapping][i] = childRecords[i].taskData;\n                }\n            }\n        }\n        if (this.parent.parentIdMapping) {\n            if (draggedRecord.parentItem) {\n                if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                    draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n                    draggedRecord.taskData[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n                }\n                else {\n                    draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.idMapping];\n                    draggedRecord.taskData[this.parent.parentIdMapping] = droppedRecord[this.parent.idMapping];\n                }\n            }\n            else {\n                draggedRecord.taskData[this.parent.parentIdMapping] = null;\n                draggedRecord[this.parent.parentIdMapping] = null;\n            }\n        }\n    };\n    RowDD.prototype.removeFirstrowBorder = function (element) {\n        var canremove = this.dropPosition === 'bottomSegment';\n        if (this.parent.element.getElementsByClassName('e-firstrow-border').length > 0 && element &&\n            (element.rowIndex !== 0 || canremove)) {\n            this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();\n        }\n    };\n    RowDD.prototype.removeLastrowBorder = function (element) {\n        var isEmptyRow = element && (element.classList.contains('e-emptyrow') || element.classList.contains('e-columnheader'));\n        var islastRowIndex = element && !isEmptyRow &&\n            this.parent.getRowByIndex(this.parent.getRows().length - 1).getAttribute('data-uid') !==\n                element.getAttribute('data-uid');\n        var canremove = islastRowIndex || this.dropPosition === 'topSegment';\n        if (this.parent.element.getElementsByClassName('e-lastrow-border').length > 0 && element && (islastRowIndex || canremove)) {\n            this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();\n        }\n    };\n    RowDD.prototype.updateIcon = function (row, index, args) {\n        var rowEle = args.target ? closest(args.target, 'tr') : null;\n        this.dropPosition = undefined;\n        var rowPositionHeight = 0;\n        this.removeFirstrowBorder(rowEle);\n        this.removeLastrowBorder(rowEle);\n        for (var i = 0; i < args.rows.length; i++) {\n            if (!isNullOrUndefined(rowEle) && rowEle.getAttribute('data-uid') === args.rows[i].getAttribute('data-uid')\n                || !parentsUntil(args.target, 'e-gridcontent')) {\n                this.dropPosition = 'Invalid';\n                this.addErrorElem();\n            }\n        }\n        // To get the corresponding drop position related to mouse position\n        var tObj = this.parent;\n        var rowTop = 0;\n        var roundOff = 0;\n        var toolHeight = tObj.toolbar && tObj.toolbar.length ?\n            document.getElementById(tObj.element.id + '_gridcontrol_toolbarItems').offsetHeight : 0;\n        // tObj.lastRow = tObj.getRowByIndex(tObj.getCurrentViewRecords().length - 1);\n        var positionOffSet = this.getOffset(tObj.element);\n        // let contentHeight1: number = (tObj.element.offsetHeight  - (tObj.getContent() as HTMLElement).offsetHeight) + positionOffSet.top;\n        var contentHeight = tObj.getHeaderContent().offsetHeight + positionOffSet.top + toolHeight;\n        var scrollTop = tObj.getContent().firstElementChild.scrollTop;\n        if (!isNullOrUndefined(rowEle)) {\n            rowPositionHeight = rowEle.offsetTop - scrollTop;\n        }\n        // let scrollTop = (tObj.grid.scrollModule as any).content.scrollTop;\n        rowTop = rowPositionHeight + contentHeight + roundOff;\n        var rowBottom = rowTop + row[0].offsetHeight;\n        var difference = rowBottom - rowTop;\n        var divide = difference / 3;\n        var topRowSegment = rowTop + divide;\n        var middleRowSegment = topRowSegment + divide;\n        var bottomRowSegment = middleRowSegment + divide;\n        var mouseEvent = getObject('originalEvent.event', args);\n        var posy = mouseEvent.pageY;\n        var isTopSegment = posy <= topRowSegment;\n        var isMiddleRowSegment = (posy > topRowSegment && posy <= middleRowSegment);\n        var isBottomRowSegment = (posy > middleRowSegment && posy <= bottomRowSegment);\n        if (isTopSegment || isMiddleRowSegment || isBottomRowSegment) {\n            if (isTopSegment && this.dropPosition !== 'Invalid') {\n                this.removeChildBorder();\n                this.dropPosition = 'topSegment';\n                this.removetopOrBottomBorder();\n                this.addFirstrowBorder(rowEle);\n                this.removeErrorElem();\n                this.removeLastrowBorder(rowEle);\n                this.topOrBottomBorder(args.target);\n            }\n            if (isMiddleRowSegment && this.dropPosition !== 'Invalid') {\n                this.removetopOrBottomBorder();\n                var rowElement = [];\n                var element = closest(args.target, 'tr');\n                rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));\n                if (rowElement.length > 0) {\n                    this.addRemoveClasses(rowElement, true, 'e-childborder');\n                }\n                this.addLastRowborder(rowEle);\n                this.addFirstrowBorder(rowEle);\n                this.dropPosition = 'middleSegment';\n            }\n            if (isBottomRowSegment && this.dropPosition !== 'Invalid') {\n                this.removeErrorElem();\n                this.removetopOrBottomBorder();\n                this.removeChildBorder();\n                this.dropPosition = 'bottomSegment';\n                this.addLastRowborder(rowEle);\n                this.removeFirstrowBorder(rowEle);\n                this.topOrBottomBorder(args.target);\n            }\n        }\n        return this.dropPosition;\n    };\n    RowDD.prototype.removeChildBorder = function () {\n        var borderElem = [];\n        borderElem = [].slice.call(this.parent.element.querySelectorAll('.e-childborder'));\n        if (borderElem.length > 0) {\n            this.addRemoveClasses(borderElem, false, 'e-childborder');\n        }\n    };\n    RowDD.prototype.addFirstrowBorder = function (targetRow) {\n        var node = this.parent.element;\n        var tObj = this.parent;\n        if (targetRow && targetRow.rowIndex === 0 && !targetRow.classList.contains('e-emptyrow')) {\n            var div = this.parent.createElement('div', { className: 'e-firstrow-border' });\n            var gridheaderEle = this.parent.getHeaderContent();\n            var toolbarHeight = 0;\n            if (tObj.toolbar) {\n                toolbarHeight = tObj.toolbarModule.getToolbar().offsetHeight;\n            }\n            var multiplegrid = !isNullOrUndefined(this.parent.rowDropSettings.targetID);\n            if (multiplegrid) {\n                div.style.top = this.parent.grid.element.getElementsByClassName('e-gridheader')[0].offsetHeight\n                    + toolbarHeight + 'px';\n            }\n            div.style.width = multiplegrid ? node.offsetWidth + 'px' :\n                node.offsetWidth - this.getScrollWidth() + 'px';\n            if (!gridheaderEle.querySelectorAll('.e-firstrow-border').length) {\n                gridheaderEle.appendChild(div);\n            }\n        }\n    };\n    RowDD.prototype.addLastRowborder = function (trElement) {\n        var isEmptyRow = trElement && (trElement.classList.contains('e-emptyrow') ||\n            trElement.classList.contains('e-columnheader'));\n        if (trElement && !isEmptyRow && this.parent.getRowByIndex(this.parent.getRows().length - 1).getAttribute('data-uid') ===\n            trElement.getAttribute('data-uid')) {\n            var bottomborder = this.parent.createElement('div', { className: 'e-lastrow-border' });\n            var gridcontentEle = this.parent.getContent();\n            bottomborder.style.width = this.parent.element.offsetWidth - this.getScrollWidth() + 'px';\n            if (!gridcontentEle.querySelectorAll('.e-lastrow-border').length) {\n                gridcontentEle.classList.add('e-treegrid-relative');\n                gridcontentEle.appendChild(bottomborder);\n                bottomborder.style.bottom = this.getScrollWidth() + 'px';\n            }\n        }\n    };\n    RowDD.prototype.getScrollWidth = function () {\n        var scrollElem = this.parent.getContent().firstElementChild;\n        return scrollElem.scrollWidth > scrollElem.offsetWidth ? Scroll.getScrollBarWidth() : 0;\n    };\n    RowDD.prototype.addErrorElem = function () {\n        var dragelem = document.getElementsByClassName('e-cloneproperties')[0];\n        var errorelem = dragelem.querySelectorAll('.e-errorelem').length;\n        if (!errorelem && !this.parent.rowDropSettings.targetID) {\n            var ele = document.createElement('div');\n            classList(ele, ['e-errorcontainer'], []);\n            classList(ele, ['e-icons', 'e-errorelem'], []);\n            var errorVal = dragelem.querySelector('.errorValue');\n            var content = dragelem.querySelector('.e-rowcell').innerHTML;\n            if (errorVal) {\n                content = errorVal.innerHTML;\n                errorVal.parentNode.removeChild(errorVal);\n            }\n            dragelem.querySelector('.e-rowcell').innerHTML = '';\n            var spanContent = document.createElement('span');\n            spanContent.className = 'errorValue';\n            spanContent.style.paddingLeft = '16px';\n            spanContent.innerHTML = content;\n            dragelem.querySelector('.e-rowcell').appendChild(ele);\n            dragelem.querySelector('.e-rowcell').appendChild(spanContent);\n        }\n    };\n    RowDD.prototype.removeErrorElem = function () {\n        var errorelem = document.querySelector('.e-errorelem');\n        if (errorelem) {\n            errorelem.remove();\n        }\n    };\n    RowDD.prototype.topOrBottomBorder = function (target) {\n        var rowElement = [];\n        var element = closest(target, 'tr');\n        rowElement = element ? [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse')) : [];\n        if (rowElement.length) {\n            if (this.dropPosition === 'topSegment') {\n                this.addRemoveClasses(rowElement, true, 'e-droptop');\n                if (this.parent.element.getElementsByClassName('e-lastrow-dragborder').length > 0) {\n                    this.parent.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();\n                }\n            }\n            if (this.dropPosition === 'bottomSegment') {\n                this.addRemoveClasses(rowElement, true, 'e-dropbottom');\n            }\n        }\n    };\n    RowDD.prototype.removetopOrBottomBorder = function () {\n        var border = [];\n        border = [].slice.call(this.parent.element.querySelectorAll('.e-dropbottom, .e-droptop'));\n        if (border.length) {\n            this.addRemoveClasses(border, false, 'e-dropbottom');\n            this.addRemoveClasses(border, false, 'e-droptop');\n        }\n    };\n    RowDD.prototype.addRemoveClasses = function (cells, add, className) {\n        for (var i = 0, len = cells.length; i < len; i++) {\n            if (add) {\n                cells[i].classList.add(className);\n            }\n            else {\n                cells[i].classList.remove(className);\n            }\n        }\n    };\n    RowDD.prototype.getOffset = function (element) {\n        var box = element.getBoundingClientRect();\n        var body = document.body;\n        var docElem = document.documentElement;\n        var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\n        var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\n        var clientTop = docElem.clientTop || body.clientTop || 0;\n        var clientLeft = docElem.clientLeft || body.clientLeft || 0;\n        var top = box.top + scrollTop - clientTop;\n        var left = box.left + scrollLeft - clientLeft;\n        return { top: Math.round(top), left: Math.round(left) };\n    };\n    RowDD.prototype.Rowdraging = function (args) {\n        var tObj = this.parent;\n        var cloneElement = this.parent.element.querySelector('.e-cloneproperties');\n        cloneElement.style.cursor = '';\n        var rowEle = args.target ? closest(args.target, 'tr') : null;\n        var rowIdx = rowEle ? rowEle.rowIndex : -1;\n        var dragRecords = [];\n        var droppedRecord = tObj.getCurrentViewRecords()[rowIdx];\n        this.removeErrorElem();\n        this.canDrop = true;\n        if (!args.data[0]) {\n            dragRecords.push(args.data);\n        }\n        else {\n            dragRecords = args.data;\n        }\n        if (rowIdx !== -1) {\n            this.ensuredropPosition(dragRecords, droppedRecord);\n        }\n        else {\n            this.canDrop = false;\n            this.addErrorElem();\n        }\n        if (!tObj.rowDropSettings.targetID && this.canDrop) {\n            tObj.rowDragAndDropModule.updateIcon(args.rows, rowIdx, args);\n        }\n        if (tObj.rowDropSettings.targetID) {\n            var dropElement = parentsUntil(args.target, 'e-treegrid');\n            if (dropElement && dropElement.id === this.parent.rowDropSettings.targetID) {\n                var srcControl = dropElement.ej2_instances[0];\n                srcControl.rowDragAndDropModule.updateIcon(args.rows, rowIdx, args);\n            }\n        }\n        if (args.target && closest(args.target, '#' + tObj.rowDropSettings.targetID)) {\n            var dropElement = parentsUntil(args.target, 'e-treegrid');\n            if (!dropElement) {\n                cloneElement.style.cursor = 'default';\n            }\n        }\n    };\n    RowDD.prototype.rowDropped = function (args) {\n        var tObj = this.parent;\n        var parentItem = 'parentItem';\n        if (!tObj.rowDropSettings.targetID) {\n            if (parentsUntil(args.target, 'e-content')) {\n                if (this.parent.element.querySelector('.e-errorelem')) {\n                    this.dropPosition = 'Invalid';\n                }\n                setValue('dropPosition', this.dropPosition, args);\n                args.dropIndex = args.dropIndex === args.fromIndex ? this.getTargetIdx(args.target.parentElement) : args.dropIndex;\n                tObj.trigger(events.rowDrop, args);\n                if (!args.cancel) {\n                    if (!isCountRequired(this.parent)) {\n                        this.dropRows(args);\n                    }\n                    if (tObj.isLocalData) {\n                        tObj.flatData = this.orderToIndex(tObj.flatData);\n                    }\n                    tObj.grid.refresh();\n                    if (!isNullOrUndefined(tObj.getHeaderContent().querySelector('.e-firstrow-border'))) {\n                        tObj.getHeaderContent().querySelector('.e-firstrow-border').remove();\n                    }\n                }\n            }\n        }\n        else {\n            if (args.target && closest(args.target, '#' + tObj.rowDropSettings.targetID) || parentsUntil(args.target, 'e-treegrid') &&\n                parentsUntil(args.target, 'e-treegrid').id === tObj.rowDropSettings.targetID) {\n                setValue('dropPosition', this.dropPosition, args);\n                tObj.trigger(events.rowDrop, args);\n                if (!args.cancel && tObj.rowDropSettings.targetID) {\n                    this.dragDropGrid(args);\n                    if (tObj.isLocalData) {\n                        tObj.flatData = this.orderToIndex(tObj.flatData);\n                    }\n                }\n            }\n        }\n        this.removetopOrBottomBorder();\n        this.removeChildBorder();\n        if (!isNullOrUndefined(this.parent.element.getElementsByClassName('e-firstrow-border')[0])) {\n            this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();\n        }\n        else if (!isNullOrUndefined(this.parent.element.getElementsByClassName('e-lastrow-border')[0])) {\n            this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();\n        }\n        if (this.parent.enableImmutableMode && !this.parent.allowPaging && !isNullOrUndefined(args.data[0][parentItem])) {\n            var index = this.parent.treeColumnIndex;\n            index = index + 1;\n            var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var rowIndex = this.parent.grid.getRowIndexByPrimaryKey(args.data[0][primaryKeyField]);\n            var row = this.parent.getRows()[rowIndex];\n            var data = args.data[0];\n            if (this.dropPosition === 'middleSegment') {\n                var record = [];\n                var rows = [];\n                record.push(data);\n                rows.push(row);\n                var parentUniqueID = 'parentUniqueID';\n                data = getParentData(this.parent, args.data[0][parentUniqueID]);\n                rowIndex = this.parent.grid.getRowIndexByPrimaryKey(data[primaryKeyField]);\n                var parentrow = this.parent.getRows()[rowIndex];\n                record.push(data);\n                rows.push(parentrow);\n                for (var i = 0; i < record.length; i++) {\n                    this.parent.renderModule.cellRender({\n                        data: record[i], cell: rows[i].cells[index],\n                        column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n                        requestType: 'rowDragAndDrop'\n                    });\n                }\n                var targetEle = parentrow.getElementsByClassName('e-treegridcollapse')[0];\n                if (!isNullOrUndefined(targetEle)) {\n                    removeClass([targetEle], 'e-treegridcollapse');\n                    addClass([targetEle], 'e-treegridexpand');\n                }\n            }\n            else {\n                this.parent.renderModule.cellRender({\n                    data: data, cell: row.cells[index],\n                    column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n                    requestType: 'rowDragAndDrop'\n                });\n            }\n        }\n    };\n    RowDD.prototype.dragDropGrid = function (args) {\n        var tObj = this.parent;\n        var targetRow = closest(args.target, 'tr');\n        var targetIndex = isNaN(this.getTargetIdx(targetRow)) ? 0 : this.getTargetIdx(targetRow);\n        var dropElement = parentsUntil(args.target, 'e-treegrid');\n        var srcControl;\n        if (dropElement && dropElement.id === this.parent.rowDropSettings.targetID && !isRemoteData(this.parent)\n            && !isCountRequired(this.parent)) {\n            srcControl = dropElement.ej2_instances[0];\n            var records = tObj.getSelectedRecords();\n            var indexes = [];\n            for (var i = 0; i < records.length; i++) {\n                indexes[i] = records[i].index;\n            }\n            if (this.parent.idMapping != null && (isNullOrUndefined(this.dropPosition) || this.dropPosition === 'bottomSegment')) {\n                var actualData = [];\n                for (var i = 0; i < records.length; i++) {\n                    if (records[i].hasChildRecords) {\n                        actualData.push(records[i]);\n                        var child = records[i].childRecords;\n                        for (var i_1 = 0; i_1 < child.length; i_1++) {\n                            actualData.push(child[i_1]); // push child records to drop the parent record along with its child records\n                        }\n                        records = actualData;\n                    }\n                }\n            }\n            tObj.notify(events.rowsRemove, { indexes: indexes, records: records });\n            srcControl.notify(events.rowsAdd, { toIndex: targetIndex, records: records });\n            var srcControlFlatData = srcControl.rowDragAndDropModule.treeGridData;\n            if (!isNullOrUndefined(srcControlFlatData)) {\n                for (var i = 0; i < srcControlFlatData.length; i++) {\n                    srcControlFlatData[i].index = i;\n                    if (!isNullOrUndefined(srcControlFlatData[i].parentItem)) {\n                        var actualIndex = getValue('uniqueIDCollection.' + srcControlFlatData[i].parentUniqueID + '.index', srcControl);\n                        srcControlFlatData[i].parentItem.index = actualIndex;\n                    }\n                }\n            }\n            tObj.grid.refresh();\n            srcControl.grid.refresh();\n            if (srcControl.grid.dataSource.length > 1) {\n                srcControl.grid.refresh();\n                if (!isNullOrUndefined(srcControl.getHeaderContent().querySelector('.e-firstrow-border'))) {\n                    srcControl.getHeaderContent().querySelector('.e-firstrow-border').remove();\n                }\n                if (!isNullOrUndefined(srcControl.getContent().querySelector('.e-lastrow-border'))) {\n                    srcControl.getContent().querySelector('.e-lastrow-border').remove();\n                }\n            }\n        }\n        if (isCountRequired(this.parent)) {\n            srcControl = dropElement.ej2_instances[0];\n            tObj.grid.refresh();\n            srcControl.grid.refresh();\n        }\n    };\n    RowDD.prototype.getTargetIdx = function (targetRow) {\n        return targetRow ? parseInt(targetRow.getAttribute('aria-rowindex'), 10) : 0;\n    };\n    RowDD.prototype.getParentData = function (record) {\n        var parentItem = record.parentItem;\n        if (this.dropPosition === 'bottomSegment') {\n            var selectedRecord = this.parent.getSelectedRecords()[0];\n            this.droppedRecord = getParentData(this.parent, selectedRecord.parentItem.uniqueID);\n        }\n        if (this.dropPosition === 'middleSegment') {\n            var level = this.parent.getSelectedRecords()[0].level;\n            if (level === parentItem.level) {\n                this.droppedRecord = getParentData(this.parent, parentItem.uniqueID);\n            }\n            else {\n                this.getParentData(parentItem);\n            }\n        }\n    };\n    RowDD.prototype.dropRows = function (args, isByMethod) {\n        if (this.dropPosition !== 'Invalid' && !isRemoteData(this.parent)) {\n            var tObj = this.parent;\n            var draggedRecord = void 0;\n            var droppedRecord = void 0;\n            if (isNullOrUndefined(args.dropIndex)) {\n                var rowIndex = tObj.getSelectedRowIndexes()[0] - 1;\n                var record = tObj.getCurrentViewRecords()[rowIndex];\n                this.getParentData(record);\n            }\n            else {\n                args.dropIndex = args.dropIndex === args.fromIndex ? this.getTargetIdx(args.target.parentElement) : args.dropIndex;\n                this.droppedRecord = tObj.getCurrentViewRecords()[args.dropIndex];\n            }\n            var dragRecords = [];\n            droppedRecord = this.droppedRecord;\n            if (!args.data[0]) {\n                dragRecords.push(args.data);\n            }\n            else {\n                dragRecords = args.data;\n            }\n            var count = 0;\n            var multiplegrid = this.parent.rowDropSettings.targetID;\n            this.isMultipleGrid = multiplegrid;\n            if (!multiplegrid) {\n                this.ensuredropPosition(dragRecords, droppedRecord);\n            }\n            else {\n                this.isaddtoBottom = multiplegrid && this.isDraggedWithChild;\n            }\n            var dragLength = dragRecords.length;\n            if (!isNullOrUndefined(this.parent.idMapping)) {\n                dragRecords.reverse();\n            }\n            for (var i = 0; i < dragLength; i++) {\n                draggedRecord = dragRecords[i];\n                this.draggedRecord = draggedRecord;\n                if (this.dropPosition !== 'Invalid') {\n                    if (!tObj.rowDropSettings.targetID || isByMethod) {\n                        this.deleteDragRow();\n                    }\n                    if (this.draggedRecord === this.droppedRecord) {\n                        var correctIndex = this.getTargetIdx(args.target.offsetParent.parentElement);\n                        if (isNaN(correctIndex)) {\n                            correctIndex = this.getTargetIdx(args.target.parentElement);\n                        }\n                        args.dropIndex = correctIndex;\n                        droppedRecord = this.droppedRecord = this.parent.getCurrentViewRecords()[args.dropIndex];\n                    }\n                    var recordIndex1 = this.treeGridData.indexOf(droppedRecord);\n                    this.dropAtTop(recordIndex1);\n                    if (this.dropPosition === 'bottomSegment') {\n                        if (!droppedRecord.hasChildRecords) {\n                            if (this.parent.parentIdMapping) {\n                                this.treeData.splice(recordIndex1 + 1, 0, this.draggedRecord.taskData);\n                            }\n                            this.treeGridData.splice(recordIndex1 + 1, 0, this.draggedRecord);\n                        }\n                        else {\n                            count = this.getChildCount(droppedRecord, 0);\n                            if (this.parent.parentIdMapping) {\n                                this.treeData.splice(recordIndex1 + count + 1, 0, this.draggedRecord.taskData);\n                            }\n                            this.treeGridData.splice(recordIndex1 + count + 1, 0, this.draggedRecord);\n                        }\n                        if (isNullOrUndefined(droppedRecord.parentItem)) {\n                            delete draggedRecord.parentItem;\n                            draggedRecord.level = 0;\n                            if (this.parent.parentIdMapping) {\n                                draggedRecord[this.parent.parentIdMapping] = null;\n                            }\n                        }\n                        if (draggedRecord.hasChildRecords) {\n                            var level = 1;\n                            this.updateChildRecordLevel(draggedRecord, level);\n                            this.updateChildRecord(draggedRecord, recordIndex1 + count + 1);\n                        }\n                        if (droppedRecord.parentItem) {\n                            var rec = this.getChildrecordsByParentID(droppedRecord.parentUniqueID);\n                            var childRecords = rec[0].childRecords;\n                            var droppedRecordIndex = childRecords.indexOf(droppedRecord) + 1;\n                            childRecords.splice(droppedRecordIndex, 0, draggedRecord);\n                            if (this.parent.parentIdMapping) {\n                                draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n                                draggedRecord.parentItem = droppedRecord.parentItem;\n                                draggedRecord.level = droppedRecord.level;\n                            }\n                        }\n                    }\n                    this.dropMiddle(recordIndex1);\n                }\n                if (isNullOrUndefined(draggedRecord.parentItem)) {\n                    var parentRecords = tObj.parentData;\n                    var newParentIndex = parentRecords.indexOf(this.droppedRecord);\n                    if (this.dropPosition === 'bottomSegment') {\n                        parentRecords.splice(newParentIndex + 1, 0, draggedRecord);\n                    }\n                    else if (this.dropPosition === 'topSegment') {\n                        parentRecords.splice(newParentIndex, 0, draggedRecord);\n                    }\n                }\n                tObj.rowDragAndDropModule.refreshGridDataSource();\n            }\n        }\n    };\n    RowDD.prototype.dropMiddle = function (recordIndex) {\n        var tObj = this.parent;\n        var childRecords = findChildrenRecords(this.droppedRecord);\n        var childRecordsLength = (isNullOrUndefined(childRecords) ||\n            childRecords.length === 0) ? recordIndex + 1 :\n            childRecords.length + recordIndex + 1;\n        if (this.dropPosition === 'middleSegment') {\n            if (tObj.parentIdMapping) {\n                this.treeData.splice(childRecordsLength, 0, this.draggedRecord.taskData);\n                this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n            }\n            else {\n                this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n            }\n            this.recordLevel();\n            if (this.draggedRecord.hasChildRecords) {\n                this.updateChildRecord(this.draggedRecord, childRecordsLength);\n            }\n        }\n    };\n    RowDD.prototype.dropAtTop = function (recordIndex1) {\n        var tObj = this.parent;\n        if (this.dropPosition === 'topSegment') {\n            if (tObj.parentIdMapping) {\n                this.treeData.splice(recordIndex1, 0, this.draggedRecord.taskData);\n            }\n            this.draggedRecord.parentItem = this.treeGridData[recordIndex1].parentItem;\n            this.draggedRecord.parentUniqueID = this.treeGridData[recordIndex1].parentUniqueID;\n            this.draggedRecord.level = this.treeGridData[recordIndex1].level;\n            this.treeGridData.splice(recordIndex1, 0, this.draggedRecord);\n            if (this.draggedRecord.hasChildRecords) {\n                var level = 1;\n                this.updateChildRecord(this.draggedRecord, recordIndex1);\n                this.updateChildRecordLevel(this.draggedRecord, level);\n            }\n            if (this.droppedRecord.parentItem) {\n                var rec = this.getChildrecordsByParentID(this.droppedRecord.parentUniqueID);\n                var childRecords = rec[0].childRecords;\n                var droppedRecordIndex = childRecords.indexOf(this.droppedRecord);\n                childRecords.splice(droppedRecordIndex, 0, this.draggedRecord);\n            }\n        }\n    };\n    RowDD.prototype.recordLevel = function () {\n        var tObj = this.parent;\n        var draggedRecord = this.draggedRecord;\n        var droppedRecord = this.droppedRecord;\n        var childItem = tObj.childMapping;\n        if (!droppedRecord.hasChildRecords) {\n            droppedRecord.hasChildRecords = true;\n            droppedRecord.hasFilteredChildRecords = true;\n            if (isNullOrUndefined(droppedRecord.childRecords) || droppedRecord.childRecords.length === 0) {\n                droppedRecord.childRecords = [];\n                if (!tObj.parentIdMapping && isNullOrUndefined(droppedRecord.taskData[childItem])) {\n                    droppedRecord.taskData[childItem] = [];\n                }\n            }\n        }\n        if (this.dropPosition === 'middleSegment') {\n            var parentItem = extend({}, droppedRecord);\n            delete parentItem.childRecords;\n            draggedRecord.parentItem = parentItem;\n            draggedRecord.parentUniqueID = droppedRecord.uniqueID;\n            droppedRecord.childRecords.splice(droppedRecord.childRecords.length, 0, draggedRecord);\n            if (!isNullOrUndefined(draggedRecord) && !tObj.parentIdMapping && !isNullOrUndefined(droppedRecord.taskData[childItem])) {\n                droppedRecord.taskData[tObj.childMapping].splice(droppedRecord.childRecords.length, 0, draggedRecord.taskData);\n            }\n            if (!draggedRecord.hasChildRecords) {\n                draggedRecord.level = droppedRecord.level + 1;\n            }\n            else {\n                var level = 1;\n                draggedRecord.level = droppedRecord.level + 1;\n                this.updateChildRecordLevel(draggedRecord, level);\n            }\n            droppedRecord.expanded = true;\n        }\n    };\n    RowDD.prototype.deleteDragRow = function () {\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            this.treeGridData = this.parent.grid.dataSource.dataSource.json;\n            this.treeData = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            this.treeGridData = this.parent.grid.dataSource;\n            this.treeData = this.parent.dataSource;\n        }\n        var deletedRow = getParentData(this.parent, this.draggedRecord.uniqueID);\n        this.removeRecords(deletedRow);\n    };\n    RowDD.prototype.updateChildRecord = function (record, count) {\n        var currentRecord;\n        var tObj = this.parent;\n        var length = 0;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        length = record.childRecords.length;\n        for (var i = 0; i < length; i++) {\n            currentRecord = record.childRecords[i];\n            count++;\n            tObj.flatData.splice(count, 0, currentRecord);\n            setValue('uniqueIDCollection.' + currentRecord.uniqueID, currentRecord, this.parent);\n            if (tObj.parentIdMapping) {\n                this.treeData.splice(count, 0, currentRecord.taskData);\n            }\n            if (currentRecord.hasChildRecords) {\n                count = this.updateChildRecord(currentRecord, count);\n            }\n        }\n        return count;\n    };\n    RowDD.prototype.updateChildRecordLevel = function (record, level) {\n        var length = 0;\n        var currentRecord;\n        level++;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        length = record.childRecords.length;\n        for (var i = 0; i < length; i++) {\n            currentRecord = record.childRecords[i];\n            var parentData = void 0;\n            if (record.parentItem) {\n                parentData = getParentData(this.parent, record.parentItem.uniqueID);\n            }\n            if (isNullOrUndefined(parentData) && !isNullOrUndefined(record.parentItem)) {\n                parentData = record.parentItem;\n            }\n            currentRecord.level = record.parentItem ? parentData.level + level : record.level + 1;\n            if (currentRecord.hasChildRecords) {\n                level--;\n                level = this.updateChildRecordLevel(currentRecord, level);\n            }\n        }\n        return level;\n    };\n    RowDD.prototype.removeRecords = function (record) {\n        var tObj = this.parent;\n        var dataSource;\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            dataSource = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            dataSource = this.parent.dataSource;\n        }\n        var deletedRow = record;\n        var isSelfReference = !isNullOrUndefined(tObj.parentIdMapping);\n        var flatParentData = this.getChildrecordsByParentID(deletedRow.parentUniqueID)[0];\n        if (deletedRow) {\n            if (deletedRow.parentItem) {\n                var childRecords = flatParentData ? flatParentData.childRecords : [];\n                var childIndex = 0;\n                if (childRecords && childRecords.length > 0) {\n                    childIndex = childRecords.indexOf(deletedRow);\n                    flatParentData.childRecords.splice(childIndex, 1);\n                    if (!this.parent.parentIdMapping) {\n                        editAction({ value: deletedRow, action: 'delete' }, this.parent, isSelfReference, deletedRow.index, deletedRow.index);\n                    }\n                }\n            }\n            if (tObj.parentIdMapping) {\n                if (deletedRow.hasChildRecords && deletedRow.childRecords.length > 0) {\n                    this.removeChildItem(deletedRow);\n                }\n                var idx = void 0;\n                var idz = void 0;\n                var treeGridData = dataSource;\n                for (var i = 0; i < treeGridData.length; i++) {\n                    if (treeGridData[i][this.parent.idMapping] === deletedRow.taskData[this.parent.idMapping]) {\n                        idx = i;\n                    }\n                }\n                for (var i = 0; i < this.treeGridData.length; i++) {\n                    if (this.treeGridData[i][this.parent.idMapping] === deletedRow.taskData[this.parent.idMapping]) {\n                        idz = i;\n                    }\n                }\n                if (idx !== -1 || idz !== -1) {\n                    dataSource.splice(idx, 1);\n                    this.treeGridData.splice(idz, 1);\n                }\n            }\n            var recordIndex = this.treeGridData.indexOf(deletedRow);\n            if (!tObj.parentIdMapping) {\n                var parentIndex = this.parent.parentData.indexOf(deletedRow);\n                if (parentIndex !== -1) {\n                    tObj.parentData.splice(parentIndex, 1);\n                    dataSource.splice(parentIndex, 1);\n                }\n            }\n            if (recordIndex === -1 && !tObj.parentIdMapping) {\n                var primaryKeyField = tObj.getPrimaryKeyFieldNames()[0];\n                for (var j = 0; j < this.treeGridData.length; j++) {\n                    if (this.treeGridData[j][primaryKeyField] === deletedRow[primaryKeyField]) {\n                        recordIndex = j;\n                    }\n                }\n            }\n            if (!tObj.parentIdMapping) {\n                var deletedRecordCount = this.getChildCount(deletedRow, 0);\n                this.treeGridData.splice(recordIndex, deletedRecordCount + 1);\n            }\n            if (deletedRow.parentItem && flatParentData && flatParentData.childRecords && !flatParentData.childRecords.length) {\n                flatParentData.expanded = false;\n                flatParentData.hasChildRecords = false;\n                flatParentData.hasFilteredChildRecords = false;\n            }\n        }\n    };\n    RowDD.prototype.removeChildItem = function (record) {\n        var currentRecord;\n        var idx;\n        var idz;\n        var dataSource;\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            dataSource = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            dataSource = this.parent.dataSource;\n        }\n        for (var i = 0; i < record.childRecords.length; i++) {\n            currentRecord = record.childRecords[i];\n            var treeGridData = void 0;\n            if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n                treeGridData = this.parent.dataSource.dataSource.json;\n            }\n            else {\n                treeGridData = this.parent.dataSource;\n            }\n            for (var i_2 = 0; i_2 < treeGridData.length; i_2++) {\n                if (treeGridData[i_2][this.parent.idMapping] === currentRecord.taskData[this.parent.idMapping]) {\n                    idx = i_2;\n                }\n            }\n            for (var i_3 = 0; i_3 < this.treeGridData.length; i_3++) {\n                if (this.treeGridData[i_3][this.parent.idMapping] === currentRecord.taskData[this.parent.idMapping]) {\n                    idz = i_3;\n                    break;\n                }\n            }\n            if (idx !== -1 || idz !== -1) {\n                dataSource.splice(idx, 1);\n                this.treeGridData.splice(idz, 1);\n            }\n            if (currentRecord.hasChildRecords) {\n                this.removeChildItem(currentRecord);\n            }\n        }\n    };\n    RowDD.prototype.getChildCount = function (record, count) {\n        var currentRecord;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        for (var i = 0; i < record.childRecords.length; i++) {\n            currentRecord = record.childRecords[i];\n            count++;\n            if (currentRecord.hasChildRecords) {\n                count = this.getChildCount(currentRecord, count);\n            }\n        }\n        return count;\n    };\n    RowDD.prototype.ensuredropPosition = function (draggedRecords, currentRecord) {\n        var _this = this;\n        draggedRecords.filter(function (e) {\n            if (e.hasChildRecords && !isNullOrUndefined(e.childRecords)) {\n                var valid = e.childRecords.indexOf(currentRecord);\n                if (valid === -1) {\n                    _this.ensuredropPosition(e.childRecords, currentRecord);\n                }\n                else {\n                    _this.dropPosition = 'Invalid';\n                    _this.addErrorElem();\n                    _this.canDrop = false;\n                    return;\n                }\n            }\n        });\n    };\n    RowDD.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    RowDD.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.rowdraging, this.Rowdraging);\n        this.parent.off(events.rowDropped, this.rowDropped);\n        this.parent.off(events.rowsAdd, this.rowsAdded);\n        this.parent.off(events.rowsRemove, this.rowsRemoved);\n    };\n    /**\n     * hidden\n     */\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns RowDragAndDrop module name\n     */\n    RowDD.prototype.getModuleName = function () {\n        return 'rowDragAndDrop';\n    };\n    return RowDD;\n}());\nexport { RowDD };\n"]},"metadata":{},"sourceType":"module"}