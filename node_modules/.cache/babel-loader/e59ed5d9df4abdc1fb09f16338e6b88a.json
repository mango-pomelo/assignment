{"ast":null,"code":"import { isNullOrUndefined, extend, setValue, getValue, merge } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { findChildrenRecords, getParentData, extendArray } from '../utils';\nimport { getUid } from '@syncfusion/ej2-grids';\nimport { updateParentRow, editAction } from './crud-actions';\n/**\n * `BatchEdit` module is used to handle batch editing actions.\n *\n * @hidden\n */\n\nvar BatchEdit =\n/** @class */\nfunction () {\n  function BatchEdit(parent) {\n    this.batchChildCount = 0;\n    this.addedRecords = 'addedRecords';\n    this.deletedRecords = 'deletedRecords';\n    this.batchAddedRecords = [];\n    this.batchDeletedRecords = [];\n    this.batchAddRowRecord = [];\n    this.parent = parent;\n    this.isSelfReference = !isNullOrUndefined(parent.parentIdMapping);\n    this.batchRecords = [];\n    this.currentViewRecords = [];\n    this.isAdd = false;\n    this.addEventListener();\n  }\n\n  BatchEdit.prototype.addEventListener = function () {\n    this.parent.on(events.cellSaved, this.cellSaved, this);\n    this.parent.on(events.batchAdd, this.batchAdd, this);\n    this.parent.on(events.beforeBatchAdd, this.beforeBatchAdd, this);\n    this.parent.on(events.batchSave, this.batchSave, this);\n    this.parent.on(events.beforeBatchDelete, this.beforeBatchDelete, this);\n    this.parent.on(events.beforeBatchSave, this.beforeBatchSave, this);\n    this.parent.on('batchPageAction', this.batchPageAction, this);\n    this.parent.on('batchCancelAction', this.batchCancelAction, this);\n    this.parent.grid.on('immutable-batch-cancel', this.immutableBatchAction, this);\n    this.parent.grid.on('next-cell-index', this.nextCellIndex, this);\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  BatchEdit.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.cellSaved, this.cellSaved);\n    this.parent.off(events.batchAdd, this.batchAdd);\n    this.parent.off(events.batchSave, this.batchSave);\n    this.parent.off(events.beforeBatchAdd, this.beforeBatchAdd);\n    this.parent.off(events.beforeBatchDelete, this.beforeBatchDelete);\n    this.parent.off(events.beforeBatchSave, this.beforeBatchSave);\n    this.parent.off('batchPageAction', this.batchPageAction);\n    this.parent.off('batchCancelAction', this.batchCancelAction);\n    this.parent.grid.off('immutable-batch-cancel', this.immutableBatchAction);\n    this.parent.grid.off('next-cell-index', this.nextCellIndex);\n  };\n  /**\n   * To destroy the editModule\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  BatchEdit.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  /**\n   * @hidden\n   * @returns {Object[]} Returns modified records in batch editing.\n   */\n\n\n  BatchEdit.prototype.getBatchRecords = function () {\n    return this.batchRecords;\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns index of newly add row\n   */\n\n\n  BatchEdit.prototype.getAddRowIndex = function () {\n    return this.addRowIndex;\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns selected row index\n   */\n\n\n  BatchEdit.prototype.getSelectedIndex = function () {\n    return this.selectedIndex;\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns newly added child count\n   */\n\n\n  BatchEdit.prototype.getBatchChildCount = function () {\n    return this.batchChildCount;\n  };\n\n  BatchEdit.prototype.batchPageAction = function () {\n    var data = this.parent.grid.dataSource instanceof DataManager ? this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource;\n    var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n    var index;\n\n    if (!isNullOrUndefined(this.batchAddedRecords) && this.batchAddedRecords.length) {\n      for (var i = 0; i < this.batchAddedRecords.length; i++) {\n        index = data.map(function (e) {\n          return e[primaryKey];\n        }).indexOf(this.batchAddedRecords[i][primaryKey]);\n        data.splice(index, 1);\n      }\n    }\n\n    this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.batchDeletedRecords = this.currentViewRecords = [];\n  };\n\n  BatchEdit.prototype.cellSaved = function (args) {\n    var actualCellIndex = args.cell.cellIndex;\n    var frozenCols = this.parent.frozenColumns || this.parent.getFrozenColumns();\n\n    if (frozenCols && args.columnObject.index > frozenCols) {\n      actualCellIndex = actualCellIndex + frozenCols;\n    }\n\n    if (actualCellIndex === this.parent.treeColumnIndex) {\n      this.parent.renderModule.cellRender({\n        data: args.rowData,\n        cell: args.cell,\n        column: this.parent.grid.getColumnByIndex(args.cell.cellIndex)\n      });\n    }\n\n    if (this.isAdd && this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n      var data = this.parent.grid.dataSource instanceof DataManager ? this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource;\n      var added = void 0;\n      var level = 'level';\n      var primaryKey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n      var currentDataIndex = void 0;\n      var indexvalue = void 0;\n      var parentItem = 'parentItem';\n      var uniqueID = 'uniqueID';\n      var parentRecord = this.selectedIndex > -1 ? this.batchRecords[this.addRowIndex][parentItem] : null;\n      var idMapping = void 0;\n      var parentUniqueID = void 0;\n      var parentIdMapping = void 0;\n      var rowObjectIndex = this.parent.editSettings.newRowPosition === 'Top' || this.selectedIndex === -1 ? 0 : this.parent.editSettings.newRowPosition === 'Above' ? this.addRowIndex : this.addRowIndex + 1;\n      rowObjectIndex = this.getActualRowObjectIndex(rowObjectIndex);\n\n      if (this.newBatchRowAdded) {\n        if (this.batchRecords.length) {\n          idMapping = this.batchRecords[this.addRowIndex][this.parent.idMapping];\n          parentIdMapping = this.batchRecords[this.addRowIndex][this.parent.parentIdMapping];\n\n          if (this.batchRecords[this.addRowIndex][parentItem]) {\n            parentUniqueID = this.batchRecords[this.addRowIndex][parentItem][uniqueID];\n          }\n        }\n\n        this.batchAddedRecords = extendArray(this.batchAddedRecords);\n        this.batchAddRowRecord = extendArray(this.batchAddRowRecord);\n        this.batchAddRowRecord.push(this.batchRecords[this.addRowIndex]);\n        added = this.parent.grid.getRowsObject()[rowObjectIndex].changes;\n        added.uniqueID = getUid(this.parent.element.id + '_data_');\n        setValue('uniqueIDCollection.' + added.uniqueID, added, this.parent);\n\n        if (!Object.prototype.hasOwnProperty.call(added, 'level')) {\n          this.batchIndex = this.selectedIndex === -1 ? 0 : this.batchIndex;\n\n          if (this.parent.editSettings.newRowPosition === 'Child') {\n            added.primaryParent = parentRecord;\n\n            if (this.selectedIndex > -1) {\n              added.parentItem = extend({}, this.batchRecords[this.addRowIndex]);\n              added.parentUniqueID = added.parentItem.uniqueID;\n              delete added.parentItem.childRecords;\n              delete added.parentItem[this.parent.childMapping];\n              added.level = added.parentItem.level + 1;\n              added.index = this.batchIndex;\n              var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n              var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n              record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n              currentDataIndex = data.map(function (e) {\n                return e[primaryKey_1];\n              }).indexOf(record[primaryKey_1]);\n\n              if (this.isSelfReference) {\n                added[this.parent.parentIdMapping] = idMapping;\n              }\n\n              updateParentRow(primaryKey_1, added.parentItem, 'add', this.parent, this.isSelfReference, added);\n            }\n          } else if ((this.parent.editSettings.newRowPosition === 'Above' || this.parent.editSettings.newRowPosition === 'Below') && !isNullOrUndefined(this.batchRecords[this.addRowIndex])) {\n            added.level = this.batchRecords[this.addRowIndex][level];\n\n            if (added.level && this.selectedIndex > -1) {\n              added.parentItem = parentRecord;\n              added.parentUniqueID = parentUniqueID;\n              delete added.parentItem.childRecords;\n              delete added.parentItem[this.parent.childMapping];\n            }\n\n            added.index = this.parent.editSettings.newRowPosition === 'Below' ? this.batchIndex : this.batchIndex - 1;\n\n            if (this.parent.editSettings.newRowPosition === 'Below' && this.selectedIndex > -1) {\n              var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n              var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n              record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n              currentDataIndex = data.map(function (e) {\n                return e[primaryKey_1];\n              }).indexOf(record[primaryKey_1]);\n            }\n\n            if (this.parent.editSettings.newRowPosition === 'Above' && this.selectedIndex > -1) {\n              var record = this.batchRecords[this.addRowIndex];\n              currentDataIndex = data.map(function (e) {\n                return e[primaryKey_1];\n              }).indexOf(record[primaryKey_1]);\n            }\n\n            if (this.isSelfReference) {\n              added[this.parent.parentIdMapping] = parentIdMapping;\n            }\n          }\n\n          added.index = added.index === -1 ? 0 : added.index;\n          added.hasChildRecords = false;\n          added.childRecords = [];\n          this.batchRecords.splice(added.index, 0, added);\n          this.currentViewRecords.splice(added.index, 0, added);\n\n          if (currentDataIndex) {\n            indexvalue = currentDataIndex;\n          } else {\n            indexvalue = added.index;\n          }\n\n          if (this.parent.editSettings.newRowPosition !== 'Above') {\n            indexvalue = added.index === 0 ? indexvalue : indexvalue + 1;\n          }\n\n          data.splice(indexvalue, 0, added);\n          this.batchAddedRecords.push(added);\n        }\n\n        this.parent.grid.getRowsObject()[rowObjectIndex].data = added;\n        this.newBatchRowAdded = false;\n      }\n\n      if (this.parent.frozenColumns || this.parent.getFrozenColumns() && this.parent.grid.getRowsObject()[rowObjectIndex].edit === 'add') {\n        merge(this.currentViewRecords[rowObjectIndex], this.parent.grid.getRowsObject()[rowObjectIndex].changes);\n      }\n    }\n  };\n\n  BatchEdit.prototype.beforeBatchAdd = function (e) {\n    var isTabLastRow = 'isTabLastRow';\n\n    if (this.parent.editSettings.mode === 'Cell' && this.parent.editModule[isTabLastRow]) {\n      e.cancel = true;\n      this.parent.editModule[isTabLastRow] = false;\n      return;\n    }\n\n    this.selectedIndex = this.parent.grid.selectedRowIndex;\n    this.addRowIndex = this.parent.grid.selectedRowIndex > -1 ? this.parent.grid.selectedRowIndex : 0;\n    this.addRowRecord = this.parent.getSelectedRecords()[0];\n  };\n\n  BatchEdit.prototype.batchAdd = function (e) {\n    if (this.parent.editSettings.newRowPosition !== 'Bottom') {\n      this.isAdd = true;\n      this.newBatchRowAdded = true;\n      var actualIndex = 0;\n\n      if (!this.batchRecords.length) {\n        this.batchAddedRecords = [];\n        this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n      }\n\n      if (this.parent.editSettings.newRowPosition !== 'Top') {\n        var records = this.parent.grid.getCurrentViewRecords();\n\n        if (this.parent.editSettings.mode === 'Batch' && (this.parent.getBatchChanges()[this.addedRecords].length > 1 || this.parent.getBatchChanges()[this.deletedRecords].length)) {\n          records = this.batchRecords;\n        }\n\n        this.updateChildCount(records);\n        this.parent.notify(events.beginAdd, {});\n        this.batchChildCount = 0;\n      }\n\n      this.updateRowIndex(); // update focus module, need to refix this once grid source modified.\n\n      var focusModule = getValue('focusModule', this.parent.grid);\n      var table = this.parent.getContentTable();\n\n      if (this.parent.getBatchChanges()[this.deletedRecords].length && this.parent.editSettings.newRowPosition === 'Above') {\n        actualIndex = e.row.rowIndex;\n        focusModule.getContent().matrix.matrix = this.matrix;\n      } else {\n        actualIndex = table.getElementsByClassName('e-batchrow')[0].rowIndex; // if (this.parent.frozenRows || this.parent.frozenColumns) {\n        //   actualIndex = this.batchIndex;\n        // }\n      }\n\n      focusModule.getContent().matrix.current = [actualIndex, focusModule.getContent().matrix.current[1]];\n    }\n  };\n\n  BatchEdit.prototype.beforeBatchDelete = function () {\n    if (!this.batchRecords.length) {\n      this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n      this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n    }\n\n    var focusModule = getValue('focusModule', this.parent.grid);\n    this.matrix = focusModule.getContent().matrix.matrix;\n    var row = [];\n    var records = [];\n    var primarykey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n    var data = this.parent.grid.getSelectedRecords()[this.parent.grid.getSelectedRecords().length - 1];\n    var childs = findChildrenRecords(data);\n\n    if (childs.length) {\n      for (var i = 0; i < childs.length; i++) {\n        var index = this.parent.grid.getRowIndexByPrimaryKey(childs[i][primarykey]);\n        row.push(this.parent.grid.getRows()[index]);\n\n        if (this.parent.frozenRows || this.parent.frozenColumns || this.parent.getFrozenColumns()) {\n          row.push(this.parent.grid.getMovableRows()[index]);\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(data.parentItem)) {\n      var parentItem = getParentData(this.parent, data.parentItem.uniqueID);\n\n      if (!isNullOrUndefined(parentItem) && parentItem.hasChildRecords) {\n        var childIndex = parentItem.childRecords.indexOf(data);\n        parentItem.childRecords.splice(childIndex, 1);\n      }\n\n      this.batchDeletedRecords = extendArray(this.batchDeletedRecords);\n      this.batchDeletedRecords.push(data);\n    }\n\n    childs.push(data);\n    records = childs;\n\n    for (var i = 0; i < records.length; i++) {\n      var indexvalue = this.batchRecords.map(function (e) {\n        return e[primarykey];\n      }).indexOf(records[i][primarykey]);\n\n      if (indexvalue !== -1) {\n        this.batchRecords.splice(indexvalue, 1);\n      }\n    }\n\n    for (var i = 0; i < row.length; i++) {\n      if (!isNullOrUndefined(row[i])) {\n        this.parent.grid.selectionModule.selectedRecords.push(row[i]);\n      }\n    }\n  };\n\n  BatchEdit.prototype.updateRowIndex = function () {\n    var rows = this.parent.grid.getDataRows();\n\n    for (var i = 0; i < rows.length; i++) {\n      rows[i].setAttribute('aria-rowindex', i.toString());\n    }\n\n    if (this.parent.frozenRows || this.parent.getFrozenColumns() || this.parent.frozenColumns) {\n      var mRows = this.parent.grid.getMovableDataRows();\n\n      for (var i = 0; i < mRows.length; i++) {\n        mRows[i].setAttribute('aria-rowindex', i.toString());\n      }\n    }\n  };\n\n  BatchEdit.prototype.updateChildCount = function (records) {\n    var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n    var addedRecords = 'addedRecords';\n    var parentItem = this.parent.editSettings.newRowPosition === 'Child' ? 'primaryParent' : 'parentItem';\n\n    for (var i = 0; i < this.parent.getBatchChanges()[addedRecords].length; i++) {\n      if (!isNullOrUndefined(this.parent.getBatchChanges()[addedRecords][i][parentItem])) {\n        if (this.parent.getBatchChanges()[addedRecords][i][parentItem][primaryKey] === records[this.addRowIndex][primaryKey]) {\n          this.batchChildCount = this.batchChildCount + 1;\n        }\n      }\n    }\n  };\n\n  BatchEdit.prototype.beforeBatchSave = function (e) {\n    var changeRecords = 'changedRecords';\n    var deleterecords = 'deletedRecords';\n    var changedRecords = e.batchChanges[changeRecords];\n\n    if (e.batchChanges[changeRecords].length) {\n      var columnName = void 0;\n\n      for (var i = 0; i < changedRecords.length; i++) {\n        editAction({\n          value: changedRecords[i],\n          action: 'edit'\n        }, this.parent, this.isSelfReference, this.addRowIndex, this.selectedIndex, columnName);\n      }\n    }\n\n    if (e.batchChanges[deleterecords].length) {\n      var deletedRecords = e.batchChanges[deleterecords];\n      var record = deletedRecords;\n\n      for (var i = 0; i < record.length; i++) {\n        this.deleteUniqueID(record[i].uniqueID);\n        var childs = findChildrenRecords(record[i]);\n\n        for (var c = 0; c < childs.length; c++) {\n          this.deleteUniqueID(childs[c].uniqueID);\n        }\n\n        e.batchChanges[deleterecords] = e.batchChanges[deleterecords].concat(childs);\n      }\n    }\n\n    this.isAdd = false;\n  };\n\n  BatchEdit.prototype.deleteUniqueID = function (value) {\n    var idFilter = 'uniqueIDFilterCollection';\n    delete this.parent[idFilter][value];\n    var id = 'uniqueIDCollection';\n    delete this.parent[id][value];\n  };\n\n  BatchEdit.prototype.batchCancelAction = function () {\n    var targetElement = 'targetElement';\n    var index;\n    var parentItem = 'parentItem';\n    var indexvalue = 'index';\n    var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n    var childRecords = 'childRecords';\n    var data = this.parent.grid.dataSource instanceof DataManager ? this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource;\n    var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n\n    if (!isNullOrUndefined(this.parent[targetElement])) {\n      var row = this.parent[targetElement].closest('tr');\n      this.parent.collapseRow(row);\n      this.parent[targetElement] = null;\n    }\n\n    if (!isNullOrUndefined(this.batchAddedRecords)) {\n      for (var i = 0; i < this.batchAddedRecords.length; i++) {\n        index = data.map(function (e) {\n          return e[primaryKey];\n        }).indexOf(this.batchAddedRecords[i][primaryKey]);\n        data.splice(index, 1);\n\n        if (this.parent.editSettings.newRowPosition === 'Child') {\n          index = currentViewRecords.map(function (e) {\n            return e[primaryKey];\n          }).indexOf(this.batchAddedRecords[i][parentItem] ? this.batchAddedRecords[i][parentItem][primaryKey] : this.batchAddedRecords[i][primaryKey]);\n\n          if (!isNullOrUndefined(currentViewRecords[index])) {\n            var children = currentViewRecords[index][childRecords];\n\n            for (var j = 0; children && j < children.length; j++) {\n              if (children[j][primaryKey] === this.batchAddedRecords[i][primaryKey]) {\n                currentViewRecords[index][childRecords].splice(j, 1);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(this.batchDeletedRecords)) {\n      for (var i = 0; i < this.batchDeletedRecords.length; i++) {\n        if (!isNullOrUndefined(this.batchDeletedRecords[i][parentItem])) {\n          index = currentViewRecords.map(function (e) {\n            return e[primaryKey];\n          }).indexOf(this.batchDeletedRecords[i][parentItem][primaryKey]);\n          var positionIndex = this.batchDeletedRecords[i][indexvalue] === 0 ? this.batchDeletedRecords[i][indexvalue] : this.batchDeletedRecords[i][indexvalue] - 1;\n\n          if (!isNullOrUndefined(currentViewRecords[index])) {\n            currentViewRecords[index][childRecords].splice(positionIndex, 0, this.batchDeletedRecords[i]);\n          }\n        }\n      }\n    }\n\n    this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.currentViewRecords = [];\n    this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n    this.batchIndex = 0;\n    this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n    this.batchDeletedRecords = [];\n    this.parent.grid.renderModule.refresh();\n  };\n\n  BatchEdit.prototype.batchSave = function (args) {\n    if (this.parent.editSettings.mode === 'Batch') {\n      var i = void 0;\n      var batchChanges = Object.hasOwnProperty.call(args, 'updatedRecords') ? args.updatedRecords : this.parent.getBatchChanges();\n      var deletedRecords = 'deletedRecords';\n      var addedRecords = 'addedRecords';\n      var index = 'index';\n      var uniqueID = 'uniqueID';\n      var data = this.parent.grid.dataSource instanceof DataManager ? this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource;\n      var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n      var primarykey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n      var level = 'level';\n      var addRecords = batchChanges[addedRecords];\n      var parentItem = 'parentItem';\n      var selectedIndex = void 0;\n      var addRowIndex = void 0;\n      var columnName = void 0;\n      var addRowRecord = void 0;\n      var childRecords = 'childRecords';\n\n      if (addRecords.length > 1 && this.parent.editSettings.newRowPosition !== 'Bottom') {\n        addRecords.reverse();\n      }\n\n      if (this.parent.editSettings.newRowPosition !== 'Bottom' && !Object.hasOwnProperty.call(args, 'updatedRecords')) {\n        data.splice(data.length - addRecords.length, addRecords.length);\n\n        if (!this.parent.allowPaging) {\n          if (currentViewRecords.length > addRecords.length) {\n            currentViewRecords.splice(currentViewRecords.length - addRecords.length, addRecords.length);\n          }\n        } else {\n          var totalRecords = extendArray(data);\n          var startIndex = totalRecords.map(function (e) {\n            return e[primarykey_1];\n          }).indexOf(currentViewRecords[0][primarykey_1]);\n          var endIndex = startIndex + this.parent.grid.pageSettings.pageSize;\n          currentViewRecords = totalRecords.splice(startIndex, endIndex);\n        }\n      }\n\n      if (this.batchAddRowRecord.length === 0) {\n        this.batchAddRowRecord.push(this.parent.flatData[args.index]);\n      }\n\n      for (i = 0; i < addRecords.length; i++) {\n        var taskData = extend({}, addRecords[i]);\n        delete taskData.parentItem;\n        delete taskData.uniqueID;\n        delete taskData.index;\n        delete taskData.level;\n        delete taskData.hasChildRecords;\n        delete taskData.childRecords;\n        delete taskData.parentUniqueID;\n\n        if (!isNullOrUndefined(taskData.primaryParent)) {\n          delete taskData.primaryParent;\n        }\n\n        addRecords[i].taskData = taskData;\n        addRowRecord = this.batchAddRowRecord[i];\n\n        if (isNullOrUndefined(addRowRecord)) {\n          addRowRecord = this.batchAddRowRecord[i - 1];\n        }\n\n        if (this.isSelfReference) {\n          if (!isNullOrUndefined(addRecords[i].parentItem)) {\n            updateParentRow(primarykey_1, addRecords[i].parentItem, 'add', this.parent, this.isSelfReference, addRecords[i]);\n          }\n        }\n\n        if (!isNullOrUndefined(addRowRecord)) {\n          addRowIndex = addRowRecord.index;\n        }\n\n        if (this.parent.editSettings.newRowPosition !== 'Top' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n          if (isNullOrUndefined(addRecords[i].parentItem) && this.selectedIndex === -1) {\n            selectedIndex = -1;\n            addRowRecord = null;\n          }\n        }\n\n        editAction({\n          value: addRecords[i],\n          action: 'add'\n        }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n        selectedIndex = null;\n\n        if (this.parent.editSettings.newRowPosition === 'Child' && !isNullOrUndefined(addRecords[i][parentItem])) {\n          var indexValue = currentViewRecords.map(function (e) {\n            return e[primarykey_1];\n          }).indexOf(addRecords[i][parentItem][primarykey_1]);\n          var children = currentViewRecords[indexValue][childRecords];\n\n          for (var j = 0; j < children.length; j++) {\n            if (children[j][primarykey_1] === addRecords[i][primarykey_1]) {\n              currentViewRecords[indexValue][childRecords].splice(j, 1);\n            }\n          }\n        }\n      }\n\n      if (batchChanges[deletedRecords].length) {\n        for (i = 0; i < batchChanges[deletedRecords].length; i++) {\n          editAction({\n            value: batchChanges[deletedRecords][i],\n            action: 'delete'\n          }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n        }\n      }\n\n      this.parent.parentData = [];\n\n      for (var i_1 = 0; i_1 < data.length; i_1++) {\n        data[i_1][index] = i_1;\n        setValue('uniqueIDCollection.' + data[i_1][uniqueID] + '.index', i_1, this.parent);\n\n        if (!data[i_1][level]) {\n          this.parent.parentData.push(data[i_1]);\n        }\n      }\n    }\n\n    this.batchAddRowRecord = this.batchAddedRecords = this.batchRecords = this.batchDeletedRecords = this.currentViewRecords = [];\n  };\n\n  BatchEdit.prototype.getActualRowObjectIndex = function (index) {\n    var rows = this.parent.grid.getDataRows();\n\n    if ((this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child') && this.selectedIndex > -1) {\n      if (!isNullOrUndefined(this.batchRecords[this.addRowIndex]) && this.batchRecords[this.addRowIndex].expanded) {\n        if (this.parent.getBatchChanges()[this.addedRecords].length > 1 || this.parent.getBatchChanges()[this.deletedRecords].length) {\n          index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n\n          if (this.parent.editSettings.newRowPosition !== 'Child') {\n            var batchChildCount = this.getBatchChildCount();\n            index = index + batchChildCount;\n          }\n        } else {\n          index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n        }\n      }\n\n      if (index >= rows.length) {\n        index = rows.length - 1;\n      }\n\n      this.updateChildCount(this.parent.grid.getCurrentViewRecords());\n\n      if (this.batchChildCount) {\n        index += this.batchChildCount;\n      }\n\n      this.batchChildCount = 0;\n    }\n\n    return index;\n  };\n\n  BatchEdit.prototype.immutableBatchAction = function (e) {\n    e.args.cancel = true;\n    var changes = this.parent.grid.getBatchChanges();\n    var addedRecords = [];\n    var index = 'index';\n\n    if (Object.keys(changes).length) {\n      addedRecords = changes.addedRecords;\n    }\n\n    for (var i = 0; i < addedRecords.length; i++) {\n      e.rows.splice(addedRecords[i][index], 1);\n    }\n  };\n\n  BatchEdit.prototype.nextCellIndex = function (args) {\n    var index = 'index';\n    var rowIndex = 'rowIndex';\n    args[index] = this.parent.getSelectedRows()[0][rowIndex];\n  };\n\n  return BatchEdit;\n}();\n\nexport { BatchEdit };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/batch-edit.js"],"names":["isNullOrUndefined","extend","setValue","getValue","merge","events","DataManager","findChildrenRecords","getParentData","extendArray","getUid","updateParentRow","editAction","BatchEdit","parent","batchChildCount","addedRecords","deletedRecords","batchAddedRecords","batchDeletedRecords","batchAddRowRecord","isSelfReference","parentIdMapping","batchRecords","currentViewRecords","isAdd","addEventListener","prototype","on","cellSaved","batchAdd","beforeBatchAdd","batchSave","beforeBatchDelete","beforeBatchSave","batchPageAction","batchCancelAction","grid","immutableBatchAction","nextCellIndex","removeEventListener","isDestroyed","off","destroy","getBatchRecords","getAddRowIndex","addRowIndex","getSelectedIndex","selectedIndex","getBatchChildCount","data","dataSource","json","primaryKey","getPrimaryKeyFieldNames","index","length","i","map","e","indexOf","splice","args","actualCellIndex","cell","cellIndex","frozenCols","frozenColumns","getFrozenColumns","columnObject","treeColumnIndex","renderModule","cellRender","rowData","column","getColumnByIndex","editSettings","mode","newRowPosition","added","level","primaryKey_1","currentDataIndex","indexvalue","parentItem","uniqueID","parentRecord","idMapping","parentUniqueID","rowObjectIndex","getActualRowObjectIndex","newBatchRowAdded","push","getRowsObject","changes","element","id","Object","hasOwnProperty","call","batchIndex","primaryParent","childRecords","childMapping","childRecordCount","record","hasChildRecords","edit","isTabLastRow","editModule","cancel","selectedRowIndex","addRowRecord","getSelectedRecords","actualIndex","getCurrentViewRecords","records","getBatchChanges","updateChildCount","notify","beginAdd","updateRowIndex","focusModule","table","getContentTable","row","rowIndex","getContent","matrix","getElementsByClassName","current","primarykey","childs","getRowIndexByPrimaryKey","getRows","frozenRows","getMovableRows","childIndex","selectionModule","selectedRecords","rows","getDataRows","setAttribute","toString","mRows","getMovableDataRows","changeRecords","deleterecords","changedRecords","batchChanges","columnName","value","action","deleteUniqueID","c","concat","idFilter","targetElement","closest","collapseRow","children","j","positionIndex","refresh","updatedRecords","primarykey_1","addRecords","reverse","allowPaging","totalRecords","startIndex","endIndex","pageSettings","pageSize","flatData","taskData","indexValue","parentData","i_1","expanded","keys","getSelectedRows"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, extend, setValue, getValue, merge } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { findChildrenRecords, getParentData, extendArray } from '../utils';\nimport { getUid } from '@syncfusion/ej2-grids';\nimport { updateParentRow, editAction } from './crud-actions';\n/**\n * `BatchEdit` module is used to handle batch editing actions.\n *\n * @hidden\n */\nvar BatchEdit = /** @class */ (function () {\n    function BatchEdit(parent) {\n        this.batchChildCount = 0;\n        this.addedRecords = 'addedRecords';\n        this.deletedRecords = 'deletedRecords';\n        this.batchAddedRecords = [];\n        this.batchDeletedRecords = [];\n        this.batchAddRowRecord = [];\n        this.parent = parent;\n        this.isSelfReference = !isNullOrUndefined(parent.parentIdMapping);\n        this.batchRecords = [];\n        this.currentViewRecords = [];\n        this.isAdd = false;\n        this.addEventListener();\n    }\n    BatchEdit.prototype.addEventListener = function () {\n        this.parent.on(events.cellSaved, this.cellSaved, this);\n        this.parent.on(events.batchAdd, this.batchAdd, this);\n        this.parent.on(events.beforeBatchAdd, this.beforeBatchAdd, this);\n        this.parent.on(events.batchSave, this.batchSave, this);\n        this.parent.on(events.beforeBatchDelete, this.beforeBatchDelete, this);\n        this.parent.on(events.beforeBatchSave, this.beforeBatchSave, this);\n        this.parent.on('batchPageAction', this.batchPageAction, this);\n        this.parent.on('batchCancelAction', this.batchCancelAction, this);\n        this.parent.grid.on('immutable-batch-cancel', this.immutableBatchAction, this);\n        this.parent.grid.on('next-cell-index', this.nextCellIndex, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    BatchEdit.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.cellSaved, this.cellSaved);\n        this.parent.off(events.batchAdd, this.batchAdd);\n        this.parent.off(events.batchSave, this.batchSave);\n        this.parent.off(events.beforeBatchAdd, this.beforeBatchAdd);\n        this.parent.off(events.beforeBatchDelete, this.beforeBatchDelete);\n        this.parent.off(events.beforeBatchSave, this.beforeBatchSave);\n        this.parent.off('batchPageAction', this.batchPageAction);\n        this.parent.off('batchCancelAction', this.batchCancelAction);\n        this.parent.grid.off('immutable-batch-cancel', this.immutableBatchAction);\n        this.parent.grid.off('next-cell-index', this.nextCellIndex);\n    };\n    /**\n     * To destroy the editModule\n     *\n     * @returns {void}\n     * @hidden\n     */\n    BatchEdit.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {Object[]} Returns modified records in batch editing.\n     */\n    BatchEdit.prototype.getBatchRecords = function () {\n        return this.batchRecords;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns index of newly add row\n     */\n    BatchEdit.prototype.getAddRowIndex = function () {\n        return this.addRowIndex;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns selected row index\n     */\n    BatchEdit.prototype.getSelectedIndex = function () {\n        return this.selectedIndex;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns newly added child count\n     */\n    BatchEdit.prototype.getBatchChildCount = function () {\n        return this.batchChildCount;\n    };\n    BatchEdit.prototype.batchPageAction = function () {\n        var data = (this.parent.grid.dataSource instanceof DataManager ?\n            this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n        var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        var index;\n        if (!isNullOrUndefined(this.batchAddedRecords) && this.batchAddedRecords.length) {\n            for (var i = 0; i < this.batchAddedRecords.length; i++) {\n                index = data.map(function (e) { return e[primaryKey]; }).indexOf(this.batchAddedRecords[i][primaryKey]);\n                data.splice(index, 1);\n            }\n        }\n        this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.batchDeletedRecords = this.currentViewRecords = [];\n    };\n    BatchEdit.prototype.cellSaved = function (args) {\n        var actualCellIndex = args.cell.cellIndex;\n        var frozenCols = this.parent.frozenColumns || this.parent.getFrozenColumns();\n        if (frozenCols && args.columnObject.index > frozenCols) {\n            actualCellIndex = actualCellIndex + frozenCols;\n        }\n        if (actualCellIndex === this.parent.treeColumnIndex) {\n            this.parent.renderModule.cellRender({ data: args.rowData, cell: args.cell,\n                column: this.parent.grid.getColumnByIndex(args.cell.cellIndex)\n            });\n        }\n        if (this.isAdd && this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n            var data = (this.parent.grid.dataSource instanceof DataManager ?\n                this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n            var added = void 0;\n            var level = 'level';\n            var primaryKey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            var currentDataIndex = void 0;\n            var indexvalue = void 0;\n            var parentItem = 'parentItem';\n            var uniqueID = 'uniqueID';\n            var parentRecord = this.selectedIndex > -1 ? this.batchRecords[this.addRowIndex][parentItem] : null;\n            var idMapping = void 0;\n            var parentUniqueID = void 0;\n            var parentIdMapping = void 0;\n            var rowObjectIndex = this.parent.editSettings.newRowPosition === 'Top' || this.selectedIndex === -1 ? 0 :\n                this.parent.editSettings.newRowPosition === 'Above' ? this.addRowIndex\n                    : this.addRowIndex + 1;\n            rowObjectIndex = this.getActualRowObjectIndex(rowObjectIndex);\n            if (this.newBatchRowAdded) {\n                if (this.batchRecords.length) {\n                    idMapping = this.batchRecords[this.addRowIndex][this.parent.idMapping];\n                    parentIdMapping = this.batchRecords[this.addRowIndex][this.parent.parentIdMapping];\n                    if (this.batchRecords[this.addRowIndex][parentItem]) {\n                        parentUniqueID = this.batchRecords[this.addRowIndex][parentItem][uniqueID];\n                    }\n                }\n                this.batchAddedRecords = extendArray(this.batchAddedRecords);\n                this.batchAddRowRecord = extendArray(this.batchAddRowRecord);\n                this.batchAddRowRecord.push(this.batchRecords[this.addRowIndex]);\n                added = this.parent.grid.getRowsObject()[rowObjectIndex].changes;\n                added.uniqueID = getUid(this.parent.element.id + '_data_');\n                setValue('uniqueIDCollection.' + added.uniqueID, added, this.parent);\n                if (!Object.prototype.hasOwnProperty.call(added, 'level')) {\n                    this.batchIndex = this.selectedIndex === -1 ? 0 : this.batchIndex;\n                    if (this.parent.editSettings.newRowPosition === 'Child') {\n                        added.primaryParent = parentRecord;\n                        if (this.selectedIndex > -1) {\n                            added.parentItem = extend({}, this.batchRecords[this.addRowIndex]);\n                            added.parentUniqueID = added.parentItem.uniqueID;\n                            delete added.parentItem.childRecords;\n                            delete added.parentItem[this.parent.childMapping];\n                            added.level = added.parentItem.level + 1;\n                            added.index = this.batchIndex;\n                            var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                            var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n                            record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n                            currentDataIndex = data.map(function (e) { return e[primaryKey_1]; }).indexOf(record[primaryKey_1]);\n                            if (this.isSelfReference) {\n                                added[this.parent.parentIdMapping] = idMapping;\n                            }\n                            updateParentRow(primaryKey_1, added.parentItem, 'add', this.parent, this.isSelfReference, added);\n                        }\n                    }\n                    else if ((this.parent.editSettings.newRowPosition === 'Above' || this.parent.editSettings.newRowPosition === 'Below')\n                        && !isNullOrUndefined(this.batchRecords[this.addRowIndex])) {\n                        added.level = this.batchRecords[this.addRowIndex][level];\n                        if (added.level && this.selectedIndex > -1) {\n                            added.parentItem = parentRecord;\n                            added.parentUniqueID = parentUniqueID;\n                            delete added.parentItem.childRecords;\n                            delete added.parentItem[this.parent.childMapping];\n                        }\n                        added.index = this.parent.editSettings.newRowPosition === 'Below' ? this.batchIndex : this.batchIndex - 1;\n                        if (this.parent.editSettings.newRowPosition === 'Below' && this.selectedIndex > -1) {\n                            var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                            var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n                            record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n                            currentDataIndex = data.map(function (e) { return e[primaryKey_1]; }).indexOf(record[primaryKey_1]);\n                        }\n                        if (this.parent.editSettings.newRowPosition === 'Above' && this.selectedIndex > -1) {\n                            var record = this.batchRecords[this.addRowIndex];\n                            currentDataIndex = data.map(function (e) { return e[primaryKey_1]; }).indexOf(record[primaryKey_1]);\n                        }\n                        if (this.isSelfReference) {\n                            added[this.parent.parentIdMapping] = parentIdMapping;\n                        }\n                    }\n                    added.index = added.index === -1 ? 0 : added.index;\n                    added.hasChildRecords = false;\n                    added.childRecords = [];\n                    this.batchRecords.splice(added.index, 0, added);\n                    this.currentViewRecords.splice(added.index, 0, added);\n                    if (currentDataIndex) {\n                        indexvalue = currentDataIndex;\n                    }\n                    else {\n                        indexvalue = added.index;\n                    }\n                    if (this.parent.editSettings.newRowPosition !== 'Above') {\n                        indexvalue = added.index === 0 ? indexvalue : indexvalue + 1;\n                    }\n                    data.splice(indexvalue, 0, added);\n                    this.batchAddedRecords.push(added);\n                }\n                this.parent.grid.getRowsObject()[rowObjectIndex].data = added;\n                this.newBatchRowAdded = false;\n            }\n            if (this.parent.frozenColumns || this.parent.getFrozenColumns()\n                && this.parent.grid.getRowsObject()[rowObjectIndex].edit === 'add') {\n                merge(this.currentViewRecords[rowObjectIndex], this.parent.grid.getRowsObject()[rowObjectIndex].changes);\n            }\n        }\n    };\n    BatchEdit.prototype.beforeBatchAdd = function (e) {\n        var isTabLastRow = 'isTabLastRow';\n        if (this.parent.editSettings.mode === 'Cell' && this.parent.editModule[isTabLastRow]) {\n            e.cancel = true;\n            this.parent.editModule[isTabLastRow] = false;\n            return;\n        }\n        this.selectedIndex = this.parent.grid.selectedRowIndex;\n        this.addRowIndex = this.parent.grid.selectedRowIndex > -1 ? this.parent.grid.selectedRowIndex : 0;\n        this.addRowRecord = this.parent.getSelectedRecords()[0];\n    };\n    BatchEdit.prototype.batchAdd = function (e) {\n        if (this.parent.editSettings.newRowPosition !== 'Bottom') {\n            this.isAdd = true;\n            this.newBatchRowAdded = true;\n            var actualIndex = 0;\n            if (!this.batchRecords.length) {\n                this.batchAddedRecords = [];\n                this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n                this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n            }\n            if (this.parent.editSettings.newRowPosition !== 'Top') {\n                var records = this.parent.grid.getCurrentViewRecords();\n                if (this.parent.editSettings.mode === 'Batch' && (this.parent.getBatchChanges()[this.addedRecords].length > 1\n                    || this.parent.getBatchChanges()[this.deletedRecords].length)) {\n                    records = this.batchRecords;\n                }\n                this.updateChildCount(records);\n                this.parent.notify(events.beginAdd, {});\n                this.batchChildCount = 0;\n            }\n            this.updateRowIndex();\n            // update focus module, need to refix this once grid source modified.\n            var focusModule = getValue('focusModule', this.parent.grid);\n            var table = this.parent.getContentTable();\n            if (this.parent.getBatchChanges()[this.deletedRecords].length && this.parent.editSettings.newRowPosition === 'Above') {\n                actualIndex = e.row.rowIndex;\n                focusModule.getContent().matrix.matrix = this.matrix;\n            }\n            else {\n                actualIndex = table.getElementsByClassName('e-batchrow')[0].rowIndex;\n                // if (this.parent.frozenRows || this.parent.frozenColumns) {\n                //   actualIndex = this.batchIndex;\n                // }\n            }\n            focusModule.getContent().matrix.current = [actualIndex, focusModule.getContent().matrix.current[1]];\n        }\n    };\n    BatchEdit.prototype.beforeBatchDelete = function () {\n        if (!this.batchRecords.length) {\n            this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n            this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        }\n        var focusModule = getValue('focusModule', this.parent.grid);\n        this.matrix = focusModule.getContent().matrix.matrix;\n        var row = [];\n        var records = [];\n        var primarykey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        var data = this.parent.grid.getSelectedRecords()[this.parent.grid.getSelectedRecords().length - 1];\n        var childs = findChildrenRecords(data);\n        if (childs.length) {\n            for (var i = 0; i < childs.length; i++) {\n                var index = this.parent.grid.getRowIndexByPrimaryKey(childs[i][primarykey]);\n                row.push(this.parent.grid.getRows()[index]);\n                if (this.parent.frozenRows || this.parent.frozenColumns || this.parent.getFrozenColumns()) {\n                    row.push(this.parent.grid.getMovableRows()[index]);\n                }\n            }\n        }\n        if (!isNullOrUndefined(data.parentItem)) {\n            var parentItem = getParentData(this.parent, data.parentItem.uniqueID);\n            if (!isNullOrUndefined(parentItem) && parentItem.hasChildRecords) {\n                var childIndex = parentItem.childRecords.indexOf(data);\n                parentItem.childRecords.splice(childIndex, 1);\n            }\n            this.batchDeletedRecords = extendArray(this.batchDeletedRecords);\n            this.batchDeletedRecords.push(data);\n        }\n        childs.push(data);\n        records = childs;\n        for (var i = 0; i < records.length; i++) {\n            var indexvalue = this.batchRecords.map(function (e) { return e[primarykey]; }).indexOf(records[i][primarykey]);\n            if (indexvalue !== -1) {\n                this.batchRecords.splice(indexvalue, 1);\n            }\n        }\n        for (var i = 0; i < row.length; i++) {\n            if (!isNullOrUndefined(row[i])) {\n                this.parent.grid.selectionModule.selectedRecords.push(row[i]);\n            }\n        }\n    };\n    BatchEdit.prototype.updateRowIndex = function () {\n        var rows = this.parent.grid.getDataRows();\n        for (var i = 0; i < rows.length; i++) {\n            rows[i].setAttribute('aria-rowindex', i.toString());\n        }\n        if (this.parent.frozenRows || this.parent.getFrozenColumns() || this.parent.frozenColumns) {\n            var mRows = this.parent.grid.getMovableDataRows();\n            for (var i = 0; i < mRows.length; i++) {\n                mRows[i].setAttribute('aria-rowindex', i.toString());\n            }\n        }\n    };\n    BatchEdit.prototype.updateChildCount = function (records) {\n        var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        var addedRecords = 'addedRecords';\n        var parentItem = this.parent.editSettings.newRowPosition === 'Child' ? 'primaryParent' : 'parentItem';\n        for (var i = 0; i < this.parent.getBatchChanges()[addedRecords].length; i++) {\n            if (!isNullOrUndefined(this.parent.getBatchChanges()[addedRecords][i][parentItem])) {\n                if (this.parent.getBatchChanges()[addedRecords][i][parentItem][primaryKey] === records[this.addRowIndex][primaryKey]) {\n                    this.batchChildCount = this.batchChildCount + 1;\n                }\n            }\n        }\n    };\n    BatchEdit.prototype.beforeBatchSave = function (e) {\n        var changeRecords = 'changedRecords';\n        var deleterecords = 'deletedRecords';\n        var changedRecords = e.batchChanges[changeRecords];\n        if (e.batchChanges[changeRecords].length) {\n            var columnName = void 0;\n            for (var i = 0; i < changedRecords.length; i++) {\n                editAction({ value: changedRecords[i], action: 'edit' }, this.parent, this.isSelfReference, this.addRowIndex, this.selectedIndex, columnName);\n            }\n        }\n        if (e.batchChanges[deleterecords].length) {\n            var deletedRecords = e.batchChanges[deleterecords];\n            var record = deletedRecords;\n            for (var i = 0; i < record.length; i++) {\n                this.deleteUniqueID(record[i].uniqueID);\n                var childs = findChildrenRecords(record[i]);\n                for (var c = 0; c < childs.length; c++) {\n                    this.deleteUniqueID(childs[c].uniqueID);\n                }\n                e.batchChanges[deleterecords] = e.batchChanges[deleterecords].concat(childs);\n            }\n        }\n        this.isAdd = false;\n    };\n    BatchEdit.prototype.deleteUniqueID = function (value) {\n        var idFilter = 'uniqueIDFilterCollection';\n        delete this.parent[idFilter][value];\n        var id = 'uniqueIDCollection';\n        delete this.parent[id][value];\n    };\n    BatchEdit.prototype.batchCancelAction = function () {\n        var targetElement = 'targetElement';\n        var index;\n        var parentItem = 'parentItem';\n        var indexvalue = 'index';\n        var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n        var childRecords = 'childRecords';\n        var data = (this.parent.grid.dataSource instanceof DataManager ?\n            this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n        var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        if (!isNullOrUndefined(this.parent[targetElement])) {\n            var row = this.parent[targetElement].closest('tr');\n            this.parent.collapseRow(row);\n            this.parent[targetElement] = null;\n        }\n        if (!isNullOrUndefined(this.batchAddedRecords)) {\n            for (var i = 0; i < this.batchAddedRecords.length; i++) {\n                index = data.map(function (e) { return e[primaryKey]; }).indexOf(this.batchAddedRecords[i][primaryKey]);\n                data.splice(index, 1);\n                if (this.parent.editSettings.newRowPosition === 'Child') {\n                    index = currentViewRecords.map(function (e) { return e[primaryKey]; })\n                        .indexOf(this.batchAddedRecords[i][parentItem] ? this.batchAddedRecords[i][parentItem][primaryKey]\n                        : this.batchAddedRecords[i][primaryKey]);\n                    if (!isNullOrUndefined(currentViewRecords[index])) {\n                        var children = currentViewRecords[index][childRecords];\n                        for (var j = 0; children && j < children.length; j++) {\n                            if (children[j][primaryKey] === this.batchAddedRecords[i][primaryKey]) {\n                                currentViewRecords[index][childRecords].splice(j, 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (!isNullOrUndefined(this.batchDeletedRecords)) {\n            for (var i = 0; i < this.batchDeletedRecords.length; i++) {\n                if (!isNullOrUndefined(this.batchDeletedRecords[i][parentItem])) {\n                    index = currentViewRecords.map(function (e) { return e[primaryKey]; })\n                        .indexOf(this.batchDeletedRecords[i][parentItem][primaryKey]);\n                    var positionIndex = this.batchDeletedRecords[i][indexvalue] === 0 ? this.batchDeletedRecords[i][indexvalue] :\n                        this.batchDeletedRecords[i][indexvalue] - 1;\n                    if (!isNullOrUndefined(currentViewRecords[index])) {\n                        currentViewRecords[index][childRecords].splice(positionIndex, 0, this.batchDeletedRecords[i]);\n                    }\n                }\n            }\n        }\n        this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.currentViewRecords = [];\n        this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        this.batchIndex = 0;\n        this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        this.batchDeletedRecords = [];\n        this.parent.grid.renderModule.refresh();\n    };\n    BatchEdit.prototype.batchSave = function (args) {\n        if (this.parent.editSettings.mode === 'Batch') {\n            var i = void 0;\n            var batchChanges = Object.hasOwnProperty.call(args, 'updatedRecords') ? args.updatedRecords : this.parent.getBatchChanges();\n            var deletedRecords = 'deletedRecords';\n            var addedRecords = 'addedRecords';\n            var index = 'index';\n            var uniqueID = 'uniqueID';\n            var data = (this.parent.grid.dataSource instanceof DataManager ?\n                this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n            var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n            var primarykey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            var level = 'level';\n            var addRecords = batchChanges[addedRecords];\n            var parentItem = 'parentItem';\n            var selectedIndex = void 0;\n            var addRowIndex = void 0;\n            var columnName = void 0;\n            var addRowRecord = void 0;\n            var childRecords = 'childRecords';\n            if (addRecords.length > 1 && this.parent.editSettings.newRowPosition !== 'Bottom') {\n                addRecords.reverse();\n            }\n            if (this.parent.editSettings.newRowPosition !== 'Bottom' && !Object.hasOwnProperty.call(args, 'updatedRecords')) {\n                data.splice(data.length - addRecords.length, addRecords.length);\n                if (!this.parent.allowPaging) {\n                    if (currentViewRecords.length > addRecords.length) {\n                        currentViewRecords.splice(currentViewRecords.length - addRecords.length, addRecords.length);\n                    }\n                }\n                else {\n                    var totalRecords = extendArray(data);\n                    var startIndex = totalRecords.map(function (e) { return e[primarykey_1]; })\n                        .indexOf(currentViewRecords[0][primarykey_1]);\n                    var endIndex = startIndex + this.parent.grid.pageSettings.pageSize;\n                    currentViewRecords = totalRecords.splice(startIndex, endIndex);\n                }\n            }\n            if (this.batchAddRowRecord.length === 0) {\n                this.batchAddRowRecord.push(this.parent.flatData[args.index]);\n            }\n            for (i = 0; i < addRecords.length; i++) {\n                var taskData = extend({}, addRecords[i]);\n                delete taskData.parentItem;\n                delete taskData.uniqueID;\n                delete taskData.index;\n                delete taskData.level;\n                delete taskData.hasChildRecords;\n                delete taskData.childRecords;\n                delete taskData.parentUniqueID;\n                if (!isNullOrUndefined(taskData.primaryParent)) {\n                    delete taskData.primaryParent;\n                }\n                addRecords[i].taskData = taskData;\n                addRowRecord = this.batchAddRowRecord[i];\n                if (isNullOrUndefined(addRowRecord)) {\n                    addRowRecord = this.batchAddRowRecord[i - 1];\n                }\n                if (this.isSelfReference) {\n                    if (!isNullOrUndefined(addRecords[i].parentItem)) {\n                        updateParentRow(primarykey_1, addRecords[i].parentItem, 'add', this.parent, this.isSelfReference, addRecords[i]);\n                    }\n                }\n                if (!isNullOrUndefined(addRowRecord)) {\n                    addRowIndex = addRowRecord.index;\n                }\n                if (this.parent.editSettings.newRowPosition !== 'Top' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n                    if (isNullOrUndefined(addRecords[i].parentItem) && this.selectedIndex === -1) {\n                        selectedIndex = -1;\n                        addRowRecord = null;\n                    }\n                }\n                editAction({ value: addRecords[i], action: 'add' }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n                selectedIndex = null;\n                if (this.parent.editSettings.newRowPosition === 'Child' && !isNullOrUndefined(addRecords[i][parentItem])) {\n                    var indexValue = currentViewRecords.map(function (e) { return e[primarykey_1]; })\n                        .indexOf(addRecords[i][parentItem][primarykey_1]);\n                    var children = currentViewRecords[indexValue][childRecords];\n                    for (var j = 0; j < children.length; j++) {\n                        if (children[j][primarykey_1] === addRecords[i][primarykey_1]) {\n                            currentViewRecords[indexValue][childRecords].splice(j, 1);\n                        }\n                    }\n                }\n            }\n            if (batchChanges[deletedRecords].length) {\n                for (i = 0; i < batchChanges[deletedRecords].length; i++) {\n                    editAction({ value: batchChanges[deletedRecords][i], action: 'delete' }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n                }\n            }\n            this.parent.parentData = [];\n            for (var i_1 = 0; i_1 < data.length; i_1++) {\n                data[i_1][index] = i_1;\n                setValue('uniqueIDCollection.' + data[i_1][uniqueID] + '.index', i_1, this.parent);\n                if (!data[i_1][level]) {\n                    this.parent.parentData.push(data[i_1]);\n                }\n            }\n        }\n        this.batchAddRowRecord = this.batchAddedRecords = this.batchRecords = this.batchDeletedRecords = this.currentViewRecords = [];\n    };\n    BatchEdit.prototype.getActualRowObjectIndex = function (index) {\n        var rows = this.parent.grid.getDataRows();\n        if ((this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child')\n            && this.selectedIndex > -1) {\n            if (!isNullOrUndefined(this.batchRecords[this.addRowIndex]) && this.batchRecords[this.addRowIndex].expanded) {\n                if (this.parent.getBatchChanges()[this.addedRecords].length > 1\n                    || this.parent.getBatchChanges()[this.deletedRecords].length) {\n                    index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                    if (this.parent.editSettings.newRowPosition !== 'Child') {\n                        var batchChildCount = this.getBatchChildCount();\n                        index = index + batchChildCount;\n                    }\n                }\n                else {\n                    index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                }\n            }\n            if (index >= rows.length) {\n                index = rows.length - 1;\n            }\n            this.updateChildCount(this.parent.grid.getCurrentViewRecords());\n            if (this.batchChildCount) {\n                index += this.batchChildCount;\n            }\n            this.batchChildCount = 0;\n        }\n        return index;\n    };\n    BatchEdit.prototype.immutableBatchAction = function (e) {\n        e.args.cancel = true;\n        var changes = this.parent.grid.getBatchChanges();\n        var addedRecords = [];\n        var index = 'index';\n        if (Object.keys(changes).length) {\n            addedRecords = changes.addedRecords;\n        }\n        for (var i = 0; i < addedRecords.length; i++) {\n            e.rows.splice(addedRecords[i][index], 1);\n        }\n    };\n    BatchEdit.prototype.nextCellIndex = function (args) {\n        var index = 'index';\n        var rowIndex = 'rowIndex';\n        args[index] = this.parent.getSelectedRows()[0][rowIndex];\n    };\n    return BatchEdit;\n}());\nexport { BatchEdit };\n"]},"metadata":{},"sourceType":"module"}