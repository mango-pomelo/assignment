{"ast":null,"code":"import { isNullOrUndefined, removeClass } from '@syncfusion/ej2-base';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { parentsUntil, getObject } from '@syncfusion/ej2-grids';\nimport * as events from '../base/constant';\nimport { getParentData, isRemoteData, isCheckboxcolumn } from '../utils';\n/**\n * TreeGrid Selection module\n *\n * @hidden\n */\n\nvar Selection =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Selection module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function Selection(parent) {\n    this.parent = parent;\n    this.selectedItems = [];\n    this.selectedIndexes = [];\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns Selection module name\n   */\n\n\n  Selection.prototype.getModuleName = function () {\n    return 'selection';\n  };\n\n  Selection.prototype.addEventListener = function () {\n    this.parent.on('dataBoundArg', this.headerCheckbox, this);\n    this.parent.on('columnCheckbox', this.columnCheckbox, this);\n    this.parent.on('updateGridActions', this.updateGridActions, this);\n    this.parent.grid.on('colgroup-refresh', this.headerCheckbox, this);\n    this.parent.on('checkboxSelection', this.checkboxSelection, this);\n  };\n\n  Selection.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('dataBoundArg', this.headerCheckbox);\n    this.parent.off('columnCheckbox', this.columnCheckbox);\n    this.parent.grid.off('colgroup-refresh', this.headerCheckbox);\n    this.parent.off('checkboxSelection', this.checkboxSelection);\n    this.parent.off('updateGridActions', this.updateGridActions);\n  };\n  /**\n   * To destroy the Selection\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Selection.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  Selection.prototype.checkboxSelection = function (args) {\n    var target = getObject('target', args);\n    var checkWrap = parentsUntil(target, 'e-checkbox-wrapper');\n    var checkBox;\n\n    if (checkWrap && checkWrap.querySelectorAll('.e-treecheckselect').length > 0) {\n      checkBox = checkWrap.querySelector('input[type=\"checkbox\"]');\n      var rowIndex = [];\n      rowIndex.push(target.closest('tr').rowIndex);\n      this.selectCheckboxes(rowIndex);\n      this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains('e-check'), target.closest('tr'));\n    } else if (checkWrap && checkWrap.querySelectorAll('.e-treeselectall').length > 0 && this.parent.autoCheckHierarchy) {\n      var checkBoxvalue = !checkWrap.querySelector('.e-frame').classList.contains('e-check') && !checkWrap.querySelector('.e-frame').classList.contains('e-stop');\n      this.headerSelection(checkBoxvalue);\n      checkBox = checkWrap.querySelector('input[type=\"checkbox\"]');\n      this.triggerChkChangeEvent(checkBox, checkBoxvalue, target.closest('tr'));\n    }\n  };\n\n  Selection.prototype.triggerChkChangeEvent = function (checkBox, checkState, rowElement) {\n    var data = this.parent.getCurrentViewRecords()[rowElement.rowIndex];\n    var args = {\n      checked: checkState,\n      target: checkBox,\n      rowElement: rowElement,\n      rowData: checkBox.classList.contains('e-treeselectall') ? this.parent.getCheckedRecords() : data\n    };\n    this.parent.trigger(events.checkboxChange, args);\n  };\n\n  Selection.prototype.getCheckboxcolumnIndex = function () {\n    var mappingUid;\n    var columnIndex;\n    var columns = this.parent.columns;\n\n    for (var col = 0; col < columns.length; col++) {\n      if (columns[col].showCheckbox) {\n        mappingUid = this.parent.columns[col].uid;\n      }\n    }\n\n    var headerCelllength = this.parent.getHeaderContent().querySelectorAll('.e-headercelldiv').length;\n\n    for (var j = 0; j < headerCelllength; j++) {\n      var headercell = this.parent.getHeaderContent().querySelectorAll('.e-headercelldiv')[j];\n\n      if (headercell.getAttribute('e-mappinguid') === mappingUid) {\n        columnIndex = j;\n      }\n    }\n\n    return columnIndex;\n  };\n\n  Selection.prototype.headerCheckbox = function () {\n    this.columnIndex = this.getCheckboxcolumnIndex();\n\n    if (this.columnIndex > -1 && this.parent.getHeaderContent().querySelectorAll('.e-treeselectall').length === 0) {\n      var headerElement = this.parent.getHeaderContent().querySelectorAll('.e-headercelldiv')[this.columnIndex];\n      var value = false;\n      var rowChkBox = this.parent.createElement('input', {\n        className: 'e-treeselectall',\n        attrs: {\n          'type': 'checkbox'\n        }\n      });\n      var checkWrap = createCheckBox(this.parent.createElement, false, {\n        checked: value,\n        label: ' '\n      });\n      checkWrap.classList.add('e-hierarchycheckbox');\n      checkWrap.querySelector('.e-frame').style.width = '18px';\n      checkWrap.insertBefore(rowChkBox.cloneNode(), checkWrap.firstChild);\n\n      if (!isNullOrUndefined(headerElement)) {\n        headerElement.insertBefore(checkWrap, headerElement.firstChild);\n      }\n\n      if (this.parent.autoCheckHierarchy) {\n        this.headerSelection();\n      }\n    } else if (this.columnIndex > -1 && this.parent.getHeaderContent().querySelectorAll('.e-treeselectall').length > 0) {\n      var checkWrap = this.parent.getHeaderContent().querySelectorAll('.e-checkbox-wrapper')[0];\n      var checkBoxvalue = checkWrap.querySelector('.e-frame').classList.contains('e-check');\n\n      if (this.parent.autoCheckHierarchy && checkBoxvalue) {\n        this.headerSelection(checkBoxvalue);\n      }\n    }\n  };\n\n  Selection.prototype.renderColumnCheckbox = function (args) {\n    var rowChkBox = this.parent.createElement('input', {\n      className: 'e-treecheckselect',\n      attrs: {\n        'type': 'checkbox'\n      }\n    });\n    var data = args.data;\n    args.cell.classList.add('e-treegridcheckbox');\n    args.cell.setAttribute('aria-label', 'checkbox');\n    var value = isNullOrUndefined(data.checkboxState) || data.checkboxState === 'uncheck' ? false : true;\n    var checkWrap = createCheckBox(this.parent.createElement, false, {\n      checked: value,\n      label: ' '\n    });\n    checkWrap.classList.add('e-hierarchycheckbox');\n    checkWrap.querySelector('.e-frame').style.width = '18px';\n\n    if (data.checkboxState === 'indeterminate') {\n      var checkbox = checkWrap.querySelectorAll('.e-frame')[0];\n      removeClass([checkbox], ['e-check', 'e-stop', 'e-uncheck']);\n      checkWrap.querySelector('.e-frame').classList.add('e-stop');\n    }\n\n    checkWrap.insertBefore(rowChkBox.cloneNode(), checkWrap.firstChild);\n    return checkWrap;\n  };\n\n  Selection.prototype.columnCheckbox = function (container) {\n    var checkWrap = this.renderColumnCheckbox(container);\n    var containerELe = container.cell.querySelector('.e-treecolumn-container');\n\n    if (!isNullOrUndefined(containerELe)) {\n      if (!container.cell.querySelector('.e-hierarchycheckbox')) {\n        containerELe.insertBefore(checkWrap, containerELe.querySelectorAll('.e-treecell')[0]);\n      }\n    } else {\n      var spanEle = this.parent.createElement('span', {\n        className: 'e-treecheckbox'\n      });\n      var data = container.cell.innerHTML;\n      container.cell.innerHTML = '';\n      spanEle.innerHTML = data;\n      var divEle = this.parent.createElement('div', {\n        className: 'e-treecheckbox-container'\n      });\n      divEle.appendChild(checkWrap);\n      divEle.appendChild(spanEle);\n      container.cell.appendChild(divEle);\n    }\n  };\n\n  Selection.prototype.selectCheckboxes = function (rowIndexes) {\n    for (var i = 0; i < rowIndexes.length; i++) {\n      var record = this.parent.getCurrentViewRecords()[rowIndexes[i]];\n      var flatRecord = getParentData(this.parent, record.uniqueID);\n      record = flatRecord;\n      var checkboxState = record.checkboxState === 'uncheck' ? 'check' : 'uncheck';\n      record.checkboxState = checkboxState;\n      var keys = Object.keys(record);\n\n      for (var j = 0; j < keys.length; j++) {\n        if (Object.prototype.hasOwnProperty.call(flatRecord, keys[j])) {\n          flatRecord[keys[j]] = record[keys[j]];\n        }\n      }\n\n      this.traverSelection(record, checkboxState, false);\n\n      if (this.parent.autoCheckHierarchy) {\n        this.headerSelection();\n      }\n    }\n  };\n\n  Selection.prototype.traverSelection = function (record, checkboxState, ischildItem) {\n    var length = 0;\n    this.updateSelectedItems(record, checkboxState);\n\n    if (!ischildItem && record.parentItem && this.parent.autoCheckHierarchy) {\n      this.updateParentSelection(record.parentItem);\n    }\n\n    if (record.childRecords && this.parent.autoCheckHierarchy) {\n      var childRecords = record.childRecords;\n\n      if (!isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0 && this.parent.autoCheckHierarchy) {\n        childRecords = this.getFilteredChildRecords(childRecords);\n      }\n\n      length = childRecords.length;\n\n      for (var count = 0; count < length; count++) {\n        if (!childRecords[count].isSummaryRow) {\n          if (childRecords[count].hasChildRecords) {\n            this.traverSelection(childRecords[count], checkboxState, true);\n          } else {\n            this.updateSelectedItems(childRecords[count], checkboxState);\n          }\n        }\n      }\n    }\n  };\n\n  Selection.prototype.getFilteredChildRecords = function (childRecords) {\n    var _this = this;\n\n    var filteredChildRecords = childRecords.filter(function (e) {\n      return _this.parent.filterModule.filteredResult.indexOf(e) > -1;\n    });\n    return filteredChildRecords;\n  };\n\n  Selection.prototype.updateParentSelection = function (parentRecord) {\n    var length = 0;\n    var childRecords = [];\n    var record = getParentData(this.parent, parentRecord.uniqueID);\n\n    if (record && record.childRecords) {\n      childRecords = record.childRecords;\n    }\n\n    if (!isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0 && this.parent.autoCheckHierarchy) {\n      childRecords = this.getFilteredChildRecords(childRecords);\n    }\n\n    length = childRecords && childRecords.length;\n    var indeter = 0;\n    var checkChildRecords = 0;\n\n    if (!isNullOrUndefined(record)) {\n      for (var i = 0; i < childRecords.length; i++) {\n        var currentRecord = getParentData(this.parent, childRecords[i].uniqueID);\n        var checkBoxRecord = currentRecord;\n\n        if (!isNullOrUndefined(checkBoxRecord)) {\n          if (checkBoxRecord.checkboxState === 'indeterminate') {\n            indeter++;\n          } else if (checkBoxRecord.checkboxState === 'check') {\n            checkChildRecords++;\n          }\n        }\n      }\n\n      if (indeter > 0 || checkChildRecords > 0 && checkChildRecords !== length) {\n        record.checkboxState = 'indeterminate';\n      } else if (checkChildRecords === 0 && indeter === 0) {\n        record.checkboxState = 'uncheck';\n      } else {\n        record.checkboxState = 'check';\n      }\n\n      this.updateSelectedItems(record, record.checkboxState);\n\n      if (record.parentItem) {\n        this.updateParentSelection(record.parentItem);\n      }\n    }\n  };\n\n  Selection.prototype.headerSelection = function (checkAll) {\n    var _this = this;\n\n    var index = -1;\n    var length = 0;\n    var data = !isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0 ? this.parent.filterModule.filteredResult : this.parent.flatData;\n    data = isRemoteData(this.parent) ? this.parent.getCurrentViewRecords() : data;\n\n    if (!isNullOrUndefined(checkAll)) {\n      for (var i = 0; i < data.length; i++) {\n        if (checkAll) {\n          if (data[i].checkboxState === 'check') {\n            continue;\n          }\n\n          data[i].checkboxState = 'check';\n          this.updateSelectedItems(data[i], data[i].checkboxState);\n        } else {\n          index = this.selectedItems.indexOf(data[i]);\n\n          if (index > -1) {\n            data[i].checkboxState = 'uncheck';\n            this.updateSelectedItems(data[i], data[i].checkboxState);\n\n            if (this.parent.autoCheckHierarchy) {\n              this.updateParentSelection(data[i]);\n            }\n          }\n        }\n      }\n    }\n\n    if (checkAll === false && this.parent.enableVirtualization) {\n      this.selectedItems = [];\n      this.selectedIndexes = [];\n      data.filter(function (rec) {\n        rec.checkboxState = 'uncheck';\n\n        _this.updateSelectedItems(rec, rec.checkboxState);\n      });\n    }\n\n    length = this.selectedItems.length;\n    var checkbox = this.parent.getHeaderContent().querySelectorAll('.e-frame')[0];\n\n    if (length > 0 && data.length > 0) {\n      if (length !== data.length && !checkAll) {\n        removeClass([checkbox], ['e-check']);\n        checkbox.classList.add('e-stop');\n      } else {\n        removeClass([checkbox], ['e-stop']);\n        checkbox.classList.add('e-check');\n      }\n    } else {\n      removeClass([checkbox], ['e-check', 'e-stop']);\n    }\n  };\n\n  Selection.prototype.updateSelectedItems = function (currentRecord, checkState) {\n    var record = this.parent.getCurrentViewRecords().filter(function (e) {\n      return e.uniqueID === currentRecord.uniqueID;\n    });\n    var checkedRecord;\n    var recordIndex = this.parent.getCurrentViewRecords().indexOf(record[0]);\n    var checkboxRecord = getParentData(this.parent, currentRecord.uniqueID);\n    var checkbox;\n\n    if (recordIndex > -1) {\n      var tr = this.parent.getRows()[recordIndex];\n      var movableTr = void 0;\n\n      if (this.parent.frozenRows || this.parent.getFrozenColumns()) {\n        movableTr = this.parent.getMovableDataRows()[recordIndex];\n      }\n\n      checkbox = tr.querySelectorAll('.e-frame')[0] ? tr.querySelectorAll('.e-frame')[0] : movableTr.querySelectorAll('.e-frame')[0];\n\n      if (!isNullOrUndefined(checkbox)) {\n        removeClass([checkbox], ['e-check', 'e-stop', 'e-uncheck']);\n      }\n    }\n\n    checkedRecord = checkboxRecord;\n\n    if (isNullOrUndefined(checkedRecord)) {\n      checkedRecord = currentRecord;\n    }\n\n    checkedRecord.checkboxState = checkState;\n\n    if (checkState === 'check' && isNullOrUndefined(currentRecord.isSummaryRow)) {\n      if (recordIndex !== -1 && this.selectedIndexes.indexOf(recordIndex) === -1) {\n        this.selectedIndexes.push(recordIndex);\n      }\n\n      if (this.selectedItems.indexOf(checkedRecord) === -1 && recordIndex !== -1 && !isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0) {\n        this.selectedItems.push(checkedRecord);\n      }\n\n      if (this.selectedItems.indexOf(checkedRecord) === -1 && !isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length === 0) {\n        this.selectedItems.push(checkedRecord);\n      }\n\n      if (this.selectedItems.indexOf(checkedRecord) === -1 && isNullOrUndefined(this.parent.filterModule)) {\n        this.selectedItems.push(checkedRecord);\n      }\n    } else if ((checkState === 'uncheck' || checkState === 'indeterminate') && isNullOrUndefined(currentRecord.isSummaryRow)) {\n      var index = this.selectedItems.indexOf(checkedRecord);\n\n      if (index !== -1) {\n        this.selectedItems.splice(index, 1);\n      }\n\n      if (this.selectedIndexes.indexOf(recordIndex) !== -1) {\n        var checkedIndex = this.selectedIndexes.indexOf(recordIndex);\n        this.selectedIndexes.splice(checkedIndex, 1);\n      }\n    }\n\n    var checkBoxclass = checkState === 'indeterminate' ? 'e-stop' : 'e-' + checkState;\n\n    if (recordIndex > -1) {\n      if (!isNullOrUndefined(checkbox)) {\n        checkbox.classList.add(checkBoxclass);\n      }\n    }\n  };\n\n  Selection.prototype.updateGridActions = function (args) {\n    var _this = this;\n\n    var requestType = args.requestType;\n    var childData;\n    var childLength;\n\n    if (isCheckboxcolumn(this.parent)) {\n      if (this.parent.autoCheckHierarchy) {\n        if (requestType === 'sorting' || requestType === 'paging') {\n          var rows = this.parent.grid.getRows();\n          childData = this.parent.getCurrentViewRecords();\n          childLength = childData.length;\n          this.selectedIndexes = [];\n\n          for (var i = 0; i < childLength; i++) {\n            if (!rows[i].classList.contains('e-summaryrow')) {\n              this.updateSelectedItems(childData[i], childData[i].checkboxState);\n            }\n          }\n        } else if (requestType === 'delete' || args.action === 'add') {\n          var updatedData = [];\n\n          if (requestType === 'delete') {\n            updatedData = args.data;\n          } else {\n            updatedData.push(args.data);\n          }\n\n          for (var i = 0; i < updatedData.length; i++) {\n            if (requestType === 'delete') {\n              var index = this.parent.flatData.indexOf(updatedData[i]);\n              var checkedIndex = this.selectedIndexes.indexOf(index);\n              this.selectedIndexes.splice(checkedIndex, 1);\n              this.updateSelectedItems(updatedData[i], 'uncheck');\n            }\n\n            if (!isNullOrUndefined(updatedData[i].parentItem)) {\n              this.updateParentSelection(updatedData[i].parentItem);\n            }\n          }\n        } else if (args.requestType === 'add' && this.parent.autoCheckHierarchy) {\n          args.data.checkboxState = 'uncheck';\n        } else if (requestType === 'filtering' || requestType === 'searching' || requestType === 'refresh' && !isRemoteData(this.parent)) {\n          this.selectedItems = [];\n          this.selectedIndexes = [];\n          childData = !isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0 ? this.parent.getCurrentViewRecords() : this.parent.flatData;\n          childData.forEach(function (record) {\n            if (record.hasChildRecords) {\n              _this.updateParentSelection(record);\n            } else {\n              _this.updateSelectedItems(record, record.checkboxState);\n            }\n          });\n          this.headerSelection();\n        }\n      }\n    }\n  };\n\n  Selection.prototype.getCheckedrecords = function () {\n    return this.selectedItems;\n  };\n\n  Selection.prototype.getCheckedRowIndexes = function () {\n    return this.selectedIndexes;\n  };\n\n  return Selection;\n}();\n\nexport { Selection };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/selection.js"],"names":["isNullOrUndefined","removeClass","createCheckBox","parentsUntil","getObject","events","getParentData","isRemoteData","isCheckboxcolumn","Selection","parent","selectedItems","selectedIndexes","addEventListener","prototype","getModuleName","on","headerCheckbox","columnCheckbox","updateGridActions","grid","checkboxSelection","removeEventListener","isDestroyed","off","destroy","args","target","checkWrap","checkBox","querySelectorAll","length","querySelector","rowIndex","push","closest","selectCheckboxes","triggerChkChangeEvent","nextElementSibling","classList","contains","autoCheckHierarchy","checkBoxvalue","headerSelection","checkState","rowElement","data","getCurrentViewRecords","checked","rowData","getCheckedRecords","trigger","checkboxChange","getCheckboxcolumnIndex","mappingUid","columnIndex","columns","col","showCheckbox","uid","headerCelllength","getHeaderContent","j","headercell","getAttribute","headerElement","value","rowChkBox","createElement","className","attrs","label","add","style","width","insertBefore","cloneNode","firstChild","renderColumnCheckbox","cell","setAttribute","checkboxState","checkbox","container","containerELe","spanEle","innerHTML","divEle","appendChild","rowIndexes","i","record","flatRecord","uniqueID","keys","Object","hasOwnProperty","call","traverSelection","ischildItem","updateSelectedItems","parentItem","updateParentSelection","childRecords","filterModule","filteredResult","getFilteredChildRecords","count","isSummaryRow","hasChildRecords","_this","filteredChildRecords","filter","e","indexOf","parentRecord","indeter","checkChildRecords","currentRecord","checkBoxRecord","checkAll","index","flatData","enableVirtualization","rec","checkedRecord","recordIndex","checkboxRecord","tr","getRows","movableTr","frozenRows","getFrozenColumns","getMovableDataRows","splice","checkedIndex","checkBoxclass","requestType","childData","childLength","rows","action","updatedData","forEach","getCheckedrecords","getCheckedRowIndexes"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, removeClass } from '@syncfusion/ej2-base';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { parentsUntil, getObject } from '@syncfusion/ej2-grids';\nimport * as events from '../base/constant';\nimport { getParentData, isRemoteData, isCheckboxcolumn } from '../utils';\n/**\n * TreeGrid Selection module\n *\n * @hidden\n */\nvar Selection = /** @class */ (function () {\n    /**\n     * Constructor for Selection module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Selection(parent) {\n        this.parent = parent;\n        this.selectedItems = [];\n        this.selectedIndexes = [];\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Selection module name\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'selection';\n    };\n    Selection.prototype.addEventListener = function () {\n        this.parent.on('dataBoundArg', this.headerCheckbox, this);\n        this.parent.on('columnCheckbox', this.columnCheckbox, this);\n        this.parent.on('updateGridActions', this.updateGridActions, this);\n        this.parent.grid.on('colgroup-refresh', this.headerCheckbox, this);\n        this.parent.on('checkboxSelection', this.checkboxSelection, this);\n    };\n    Selection.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('dataBoundArg', this.headerCheckbox);\n        this.parent.off('columnCheckbox', this.columnCheckbox);\n        this.parent.grid.off('colgroup-refresh', this.headerCheckbox);\n        this.parent.off('checkboxSelection', this.checkboxSelection);\n        this.parent.off('updateGridActions', this.updateGridActions);\n    };\n    /**\n     * To destroy the Selection\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    Selection.prototype.checkboxSelection = function (args) {\n        var target = getObject('target', args);\n        var checkWrap = parentsUntil(target, 'e-checkbox-wrapper');\n        var checkBox;\n        if (checkWrap && checkWrap.querySelectorAll('.e-treecheckselect').length > 0) {\n            checkBox = checkWrap.querySelector('input[type=\"checkbox\"]');\n            var rowIndex = [];\n            rowIndex.push(target.closest('tr').rowIndex);\n            this.selectCheckboxes(rowIndex);\n            this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains('e-check'), target.closest('tr'));\n        }\n        else if (checkWrap && checkWrap.querySelectorAll('.e-treeselectall').length > 0 && this.parent.autoCheckHierarchy) {\n            var checkBoxvalue = !checkWrap.querySelector('.e-frame').classList.contains('e-check')\n                && !checkWrap.querySelector('.e-frame').classList.contains('e-stop');\n            this.headerSelection(checkBoxvalue);\n            checkBox = checkWrap.querySelector('input[type=\"checkbox\"]');\n            this.triggerChkChangeEvent(checkBox, checkBoxvalue, target.closest('tr'));\n        }\n    };\n    Selection.prototype.triggerChkChangeEvent = function (checkBox, checkState, rowElement) {\n        var data = this.parent.getCurrentViewRecords()[rowElement.rowIndex];\n        var args = { checked: checkState, target: checkBox, rowElement: rowElement,\n            rowData: checkBox.classList.contains('e-treeselectall')\n                ? this.parent.getCheckedRecords() : data };\n        this.parent.trigger(events.checkboxChange, args);\n    };\n    Selection.prototype.getCheckboxcolumnIndex = function () {\n        var mappingUid;\n        var columnIndex;\n        var columns = (this.parent.columns);\n        for (var col = 0; col < columns.length; col++) {\n            if (columns[col].showCheckbox) {\n                mappingUid = this.parent.columns[col].uid;\n            }\n        }\n        var headerCelllength = this.parent.getHeaderContent().querySelectorAll('.e-headercelldiv').length;\n        for (var j = 0; j < headerCelllength; j++) {\n            var headercell = this.parent.getHeaderContent().querySelectorAll('.e-headercelldiv')[j];\n            if (headercell.getAttribute('e-mappinguid') === mappingUid) {\n                columnIndex = j;\n            }\n        }\n        return columnIndex;\n    };\n    Selection.prototype.headerCheckbox = function () {\n        this.columnIndex = this.getCheckboxcolumnIndex();\n        if (this.columnIndex > -1 && this.parent.getHeaderContent().querySelectorAll('.e-treeselectall').length === 0) {\n            var headerElement = this.parent.getHeaderContent().querySelectorAll('.e-headercelldiv')[this.columnIndex];\n            var value = false;\n            var rowChkBox = this.parent.createElement('input', { className: 'e-treeselectall', attrs: { 'type': 'checkbox' } });\n            var checkWrap = createCheckBox(this.parent.createElement, false, { checked: value, label: ' ' });\n            checkWrap.classList.add('e-hierarchycheckbox');\n            checkWrap.querySelector('.e-frame').style.width = '18px';\n            checkWrap.insertBefore(rowChkBox.cloneNode(), checkWrap.firstChild);\n            if (!isNullOrUndefined(headerElement)) {\n                headerElement.insertBefore(checkWrap, headerElement.firstChild);\n            }\n            if (this.parent.autoCheckHierarchy) {\n                this.headerSelection();\n            }\n        }\n        else if (this.columnIndex > -1 && this.parent.getHeaderContent().querySelectorAll('.e-treeselectall').length > 0) {\n            var checkWrap = this.parent.getHeaderContent().querySelectorAll('.e-checkbox-wrapper')[0];\n            var checkBoxvalue = checkWrap.querySelector('.e-frame').classList.contains('e-check');\n            if (this.parent.autoCheckHierarchy && checkBoxvalue) {\n                this.headerSelection(checkBoxvalue);\n            }\n        }\n    };\n    Selection.prototype.renderColumnCheckbox = function (args) {\n        var rowChkBox = this.parent.createElement('input', { className: 'e-treecheckselect', attrs: { 'type': 'checkbox' } });\n        var data = args.data;\n        args.cell.classList.add('e-treegridcheckbox');\n        args.cell.setAttribute('aria-label', 'checkbox');\n        var value = (isNullOrUndefined(data.checkboxState) || data.checkboxState === 'uncheck') ? false : true;\n        var checkWrap = createCheckBox(this.parent.createElement, false, { checked: value, label: ' ' });\n        checkWrap.classList.add('e-hierarchycheckbox');\n        checkWrap.querySelector('.e-frame').style.width = '18px';\n        if (data.checkboxState === 'indeterminate') {\n            var checkbox = checkWrap.querySelectorAll('.e-frame')[0];\n            removeClass([checkbox], ['e-check', 'e-stop', 'e-uncheck']);\n            checkWrap.querySelector('.e-frame').classList.add('e-stop');\n        }\n        checkWrap.insertBefore(rowChkBox.cloneNode(), checkWrap.firstChild);\n        return checkWrap;\n    };\n    Selection.prototype.columnCheckbox = function (container) {\n        var checkWrap = this.renderColumnCheckbox(container);\n        var containerELe = container.cell.querySelector('.e-treecolumn-container');\n        if (!isNullOrUndefined(containerELe)) {\n            if (!container.cell.querySelector('.e-hierarchycheckbox')) {\n                containerELe.insertBefore(checkWrap, containerELe.querySelectorAll('.e-treecell')[0]);\n            }\n        }\n        else {\n            var spanEle = this.parent.createElement('span', { className: 'e-treecheckbox' });\n            var data = container.cell.innerHTML;\n            container.cell.innerHTML = '';\n            spanEle.innerHTML = data;\n            var divEle = this.parent.createElement('div', { className: 'e-treecheckbox-container' });\n            divEle.appendChild(checkWrap);\n            divEle.appendChild(spanEle);\n            container.cell.appendChild(divEle);\n        }\n    };\n    Selection.prototype.selectCheckboxes = function (rowIndexes) {\n        for (var i = 0; i < rowIndexes.length; i++) {\n            var record = this.parent.getCurrentViewRecords()[rowIndexes[i]];\n            var flatRecord = getParentData(this.parent, record.uniqueID);\n            record = flatRecord;\n            var checkboxState = (record.checkboxState === 'uncheck') ? 'check' : 'uncheck';\n            record.checkboxState = checkboxState;\n            var keys = Object.keys(record);\n            for (var j = 0; j < keys.length; j++) {\n                if (Object.prototype.hasOwnProperty.call(flatRecord, keys[j])) {\n                    flatRecord[keys[j]] = record[keys[j]];\n                }\n            }\n            this.traverSelection(record, checkboxState, false);\n            if (this.parent.autoCheckHierarchy) {\n                this.headerSelection();\n            }\n        }\n    };\n    Selection.prototype.traverSelection = function (record, checkboxState, ischildItem) {\n        var length = 0;\n        this.updateSelectedItems(record, checkboxState);\n        if (!ischildItem && record.parentItem && this.parent.autoCheckHierarchy) {\n            this.updateParentSelection(record.parentItem);\n        }\n        if (record.childRecords && this.parent.autoCheckHierarchy) {\n            var childRecords = record.childRecords;\n            if (!isNullOrUndefined(this.parent.filterModule) &&\n                this.parent.filterModule.filteredResult.length > 0 && this.parent.autoCheckHierarchy) {\n                childRecords = this.getFilteredChildRecords(childRecords);\n            }\n            length = childRecords.length;\n            for (var count = 0; count < length; count++) {\n                if (!childRecords[count].isSummaryRow) {\n                    if (childRecords[count].hasChildRecords) {\n                        this.traverSelection(childRecords[count], checkboxState, true);\n                    }\n                    else {\n                        this.updateSelectedItems(childRecords[count], checkboxState);\n                    }\n                }\n            }\n        }\n    };\n    Selection.prototype.getFilteredChildRecords = function (childRecords) {\n        var _this = this;\n        var filteredChildRecords = childRecords.filter(function (e) {\n            return _this.parent.filterModule.filteredResult.indexOf(e) > -1;\n        });\n        return filteredChildRecords;\n    };\n    Selection.prototype.updateParentSelection = function (parentRecord) {\n        var length = 0;\n        var childRecords = [];\n        var record = getParentData(this.parent, parentRecord.uniqueID);\n        if (record && record.childRecords) {\n            childRecords = record.childRecords;\n        }\n        if (!isNullOrUndefined(this.parent.filterModule) &&\n            this.parent.filterModule.filteredResult.length > 0 && this.parent.autoCheckHierarchy) {\n            childRecords = this.getFilteredChildRecords(childRecords);\n        }\n        length = childRecords && childRecords.length;\n        var indeter = 0;\n        var checkChildRecords = 0;\n        if (!isNullOrUndefined(record)) {\n            for (var i = 0; i < childRecords.length; i++) {\n                var currentRecord = getParentData(this.parent, childRecords[i].uniqueID);\n                var checkBoxRecord = currentRecord;\n                if (!isNullOrUndefined(checkBoxRecord)) {\n                    if (checkBoxRecord.checkboxState === 'indeterminate') {\n                        indeter++;\n                    }\n                    else if (checkBoxRecord.checkboxState === 'check') {\n                        checkChildRecords++;\n                    }\n                }\n            }\n            if (indeter > 0 || (checkChildRecords > 0 && checkChildRecords !== length)) {\n                record.checkboxState = 'indeterminate';\n            }\n            else if (checkChildRecords === 0 && indeter === 0) {\n                record.checkboxState = 'uncheck';\n            }\n            else {\n                record.checkboxState = 'check';\n            }\n            this.updateSelectedItems(record, record.checkboxState);\n            if (record.parentItem) {\n                this.updateParentSelection(record.parentItem);\n            }\n        }\n    };\n    Selection.prototype.headerSelection = function (checkAll) {\n        var _this = this;\n        var index = -1;\n        var length = 0;\n        var data = (!isNullOrUndefined(this.parent.filterModule) &&\n            this.parent.filterModule.filteredResult.length > 0) ? this.parent.filterModule.filteredResult :\n            this.parent.flatData;\n        data = isRemoteData(this.parent) ? this.parent.getCurrentViewRecords() : data;\n        if (!isNullOrUndefined(checkAll)) {\n            for (var i = 0; i < data.length; i++) {\n                if (checkAll) {\n                    if (data[i].checkboxState === 'check') {\n                        continue;\n                    }\n                    data[i].checkboxState = 'check';\n                    this.updateSelectedItems(data[i], data[i].checkboxState);\n                }\n                else {\n                    index = this.selectedItems.indexOf(data[i]);\n                    if (index > -1) {\n                        data[i].checkboxState = 'uncheck';\n                        this.updateSelectedItems(data[i], data[i].checkboxState);\n                        if (this.parent.autoCheckHierarchy) {\n                            this.updateParentSelection(data[i]);\n                        }\n                    }\n                }\n            }\n        }\n        if (checkAll === false && this.parent.enableVirtualization) {\n            this.selectedItems = [];\n            this.selectedIndexes = [];\n            data.filter(function (rec) {\n                rec.checkboxState = 'uncheck';\n                _this.updateSelectedItems(rec, rec.checkboxState);\n            });\n        }\n        length = this.selectedItems.length;\n        var checkbox = this.parent.getHeaderContent().querySelectorAll('.e-frame')[0];\n        if (length > 0 && data.length > 0) {\n            if (length !== data.length && !checkAll) {\n                removeClass([checkbox], ['e-check']);\n                checkbox.classList.add('e-stop');\n            }\n            else {\n                removeClass([checkbox], ['e-stop']);\n                checkbox.classList.add('e-check');\n            }\n        }\n        else {\n            removeClass([checkbox], ['e-check', 'e-stop']);\n        }\n    };\n    Selection.prototype.updateSelectedItems = function (currentRecord, checkState) {\n        var record = this.parent.getCurrentViewRecords().filter(function (e) {\n            return e.uniqueID === currentRecord.uniqueID;\n        });\n        var checkedRecord;\n        var recordIndex = this.parent.getCurrentViewRecords().indexOf(record[0]);\n        var checkboxRecord = getParentData(this.parent, currentRecord.uniqueID);\n        var checkbox;\n        if (recordIndex > -1) {\n            var tr = this.parent.getRows()[recordIndex];\n            var movableTr = void 0;\n            if (this.parent.frozenRows || this.parent.getFrozenColumns()) {\n                movableTr = this.parent.getMovableDataRows()[recordIndex];\n            }\n            checkbox = tr.querySelectorAll('.e-frame')[0] ? tr.querySelectorAll('.e-frame')[0]\n                : movableTr.querySelectorAll('.e-frame')[0];\n            if (!isNullOrUndefined(checkbox)) {\n                removeClass([checkbox], ['e-check', 'e-stop', 'e-uncheck']);\n            }\n        }\n        checkedRecord = checkboxRecord;\n        if (isNullOrUndefined(checkedRecord)) {\n            checkedRecord = currentRecord;\n        }\n        checkedRecord.checkboxState = checkState;\n        if (checkState === 'check' && isNullOrUndefined(currentRecord.isSummaryRow)) {\n            if (recordIndex !== -1 && this.selectedIndexes.indexOf(recordIndex) === -1) {\n                this.selectedIndexes.push(recordIndex);\n            }\n            if (this.selectedItems.indexOf(checkedRecord) === -1 && (recordIndex !== -1 &&\n                (!isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0))) {\n                this.selectedItems.push(checkedRecord);\n            }\n            if (this.selectedItems.indexOf(checkedRecord) === -1 && (!isNullOrUndefined(this.parent.filterModule) &&\n                this.parent.filterModule.filteredResult.length === 0)) {\n                this.selectedItems.push(checkedRecord);\n            }\n            if (this.selectedItems.indexOf(checkedRecord) === -1 && isNullOrUndefined(this.parent.filterModule)) {\n                this.selectedItems.push(checkedRecord);\n            }\n        }\n        else if ((checkState === 'uncheck' || checkState === 'indeterminate') && isNullOrUndefined(currentRecord.isSummaryRow)) {\n            var index = this.selectedItems.indexOf(checkedRecord);\n            if (index !== -1) {\n                this.selectedItems.splice(index, 1);\n            }\n            if (this.selectedIndexes.indexOf(recordIndex) !== -1) {\n                var checkedIndex = this.selectedIndexes.indexOf(recordIndex);\n                this.selectedIndexes.splice(checkedIndex, 1);\n            }\n        }\n        var checkBoxclass = checkState === 'indeterminate' ? 'e-stop' : 'e-' + checkState;\n        if (recordIndex > -1) {\n            if (!isNullOrUndefined(checkbox)) {\n                checkbox.classList.add(checkBoxclass);\n            }\n        }\n    };\n    Selection.prototype.updateGridActions = function (args) {\n        var _this = this;\n        var requestType = args.requestType;\n        var childData;\n        var childLength;\n        if (isCheckboxcolumn(this.parent)) {\n            if (this.parent.autoCheckHierarchy) {\n                if ((requestType === 'sorting' || requestType === 'paging')) {\n                    var rows = this.parent.grid.getRows();\n                    childData = this.parent.getCurrentViewRecords();\n                    childLength = childData.length;\n                    this.selectedIndexes = [];\n                    for (var i = 0; i < childLength; i++) {\n                        if (!rows[i].classList.contains('e-summaryrow')) {\n                            this.updateSelectedItems(childData[i], childData[i].checkboxState);\n                        }\n                    }\n                }\n                else if (requestType === 'delete' || args.action === 'add') {\n                    var updatedData = [];\n                    if (requestType === 'delete') {\n                        updatedData = args.data;\n                    }\n                    else {\n                        updatedData.push(args.data);\n                    }\n                    for (var i = 0; i < updatedData.length; i++) {\n                        if (requestType === 'delete') {\n                            var index = this.parent.flatData.indexOf(updatedData[i]);\n                            var checkedIndex = this.selectedIndexes.indexOf(index);\n                            this.selectedIndexes.splice(checkedIndex, 1);\n                            this.updateSelectedItems(updatedData[i], 'uncheck');\n                        }\n                        if (!isNullOrUndefined(updatedData[i].parentItem)) {\n                            this.updateParentSelection(updatedData[i].parentItem);\n                        }\n                    }\n                }\n                else if (args.requestType === 'add' && this.parent.autoCheckHierarchy) {\n                    args.data.checkboxState = 'uncheck';\n                }\n                else if (requestType === 'filtering' || requestType === 'searching' || requestType === 'refresh'\n                    && !isRemoteData(this.parent)) {\n                    this.selectedItems = [];\n                    this.selectedIndexes = [];\n                    childData = (!isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0) ?\n                        this.parent.getCurrentViewRecords() : this.parent.flatData;\n                    childData.forEach(function (record) {\n                        if (record.hasChildRecords) {\n                            _this.updateParentSelection(record);\n                        }\n                        else {\n                            _this.updateSelectedItems(record, record.checkboxState);\n                        }\n                    });\n                    this.headerSelection();\n                }\n            }\n        }\n    };\n    Selection.prototype.getCheckedrecords = function () {\n        return this.selectedItems;\n    };\n    Selection.prototype.getCheckedRowIndexes = function () {\n        return this.selectedIndexes;\n    };\n    return Selection;\n}());\nexport { Selection };\n"]},"metadata":{},"sourceType":"module"}