{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as events from '../base/constant';\nimport { isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { Clipboard as GridClipboard } from '@syncfusion/ej2-grids';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n *\n * @hidden\n */\n\nvar TreeClipboard =\n/** @class */\nfunction (_super) {\n  __extends(TreeClipboard, _super);\n\n  function TreeClipboard(parent) {\n    var _this = _super.call(this, parent.grid) || this;\n\n    _this.treeCopyContent = '';\n    _this.copiedUniqueIdCollection = [];\n    _this.treeGridParent = parent;\n    return _this;\n  }\n\n  TreeClipboard.prototype.setCopyData = function (withHeader) {\n    var copyContent = 'copyContent';\n    var getCopyData = 'getCopyData';\n    var isSelect = 'isSelect';\n    var uniqueID = 'uniqueID';\n    var currentRecords = this.treeGridParent.getCurrentViewRecords();\n\n    if (window.getSelection().toString() === '') {\n      this.clipBoardTextArea.value = this[copyContent] = '';\n      var rows = this.treeGridParent.grid.getRows();\n\n      if (this.treeGridParent.selectionSettings.mode !== 'Cell') {\n        var selectedIndexes = this.treeGridParent.getSelectedRowIndexes().sort(function (a, b) {\n          return a - b;\n        });\n\n        for (var i = 0; i < selectedIndexes.length; i++) {\n          if (i > 0) {\n            this.treeCopyContent += '\\n';\n          }\n\n          if (!rows[selectedIndexes[i]].classList.contains('e-summaryrow')) {\n            var cells = [].slice.call(rows[selectedIndexes[i]].querySelectorAll('.e-rowcell'));\n            var uniqueid = this.treeGridParent.getSelectedRecords()[i][uniqueID];\n\n            if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n              if (this.treeGridParent.copyHierarchyMode === 'Parent' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                this.parentContentData(currentRecords, selectedIndexes[i], rows, withHeader, i);\n              }\n\n              this[getCopyData](cells, false, '\\t', withHeader);\n              this.treeCopyContent += this[copyContent];\n              this.copiedUniqueIdCollection.push(uniqueid);\n              this[copyContent] = '';\n\n              if (this.treeGridParent.copyHierarchyMode === 'Child' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                this.childContentData(currentRecords, selectedIndexes[i], rows, withHeader);\n              }\n            }\n          }\n        }\n\n        if (withHeader) {\n          var headerTextArray = [];\n\n          for (var i = 0; i < this.treeGridParent.getVisibleColumns().length; i++) {\n            headerTextArray[i] = this.treeGridParent.getVisibleColumns()[i].headerText;\n          }\n\n          this[getCopyData](headerTextArray, false, '\\t', withHeader);\n          this.treeCopyContent = this[copyContent] + '\\n' + this.treeCopyContent;\n        }\n\n        var args = {\n          data: this.treeCopyContent,\n          cancel: false\n        };\n        this.treeGridParent.trigger(events.beforeCopy, args);\n\n        if (args.cancel) {\n          return;\n        }\n\n        this.clipBoardTextArea.value = this[copyContent] = args.data;\n\n        if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n          this.clipBoardTextArea.select();\n        } else {\n          this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n        }\n\n        this[isSelect] = true;\n        this.copiedUniqueIdCollection = [];\n        this.treeCopyContent = '';\n      } else {\n        _super.prototype.setCopyData.call(this, withHeader);\n      }\n    }\n  };\n\n  TreeClipboard.prototype.parentContentData = function (currentRecords, selectedIndex, rows, withHeader, index) {\n    var getCopyData = 'getCopyData';\n    var copyContent = 'copyContent';\n    var parentItem = 'parentItem';\n    var uniqueID = 'uniqueID';\n    var level = 'level';\n\n    if (!isNullOrUndefined(currentRecords[selectedIndex][parentItem])) {\n      var treeLevel = currentRecords[selectedIndex][parentItem][level];\n\n      for (var i = 0; i < treeLevel + 1; i++) {\n        for (var j = 0; j < currentRecords.length; j++) {\n          if (!isNullOrUndefined(currentRecords[selectedIndex][parentItem]) && currentRecords[j][uniqueID] === currentRecords[selectedIndex][parentItem][uniqueID]) {\n            selectedIndex = j;\n            var cells = [].slice.call(rows[selectedIndex].querySelectorAll('.e-rowcell'));\n            var uniqueid = currentRecords[j][uniqueID];\n\n            if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n              this[getCopyData](cells, false, '\\t', withHeader);\n\n              if (index > 0) {\n                this.treeCopyContent = this.treeCopyContent + this[copyContent] + '\\n';\n              } else {\n                this.treeCopyContent = this[copyContent] + '\\n' + this.treeCopyContent;\n              }\n\n              this.copiedUniqueIdCollection.push(uniqueid);\n              this[copyContent] = '';\n              break;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  TreeClipboard.prototype.copy = function (withHeader) {\n    _super.prototype.copy.call(this, withHeader);\n  };\n\n  TreeClipboard.prototype.paste = function (data, rowIndex, colIndex) {\n    _super.prototype.paste.call(this, data, rowIndex, colIndex);\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns clipboard module name\n   */\n\n\n  TreeClipboard.prototype.getModuleName = function () {\n    return 'clipboard';\n  };\n  /**\n   * To destroy the clipboard\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  TreeClipboard.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n\n  TreeClipboard.prototype.childContentData = function (currentRecords, selectedIndex, rows, withHeader) {\n    var getCopyData = 'getCopyData';\n    var copyContent = 'copyContent';\n    var childRecords = 'childRecords';\n    var hasChildRecords = 'hasChildRecords';\n    var uniqueID = 'uniqueID';\n\n    if (currentRecords[selectedIndex][hasChildRecords]) {\n      var childData = currentRecords[selectedIndex][childRecords];\n\n      for (var i = 0; i < childData.length; i++) {\n        for (var j = 0; j < currentRecords.length; j++) {\n          if (!isNullOrUndefined(childData[i][uniqueID]) && currentRecords[j][uniqueID] === childData[i][uniqueID]) {\n            if (!isNullOrUndefined(rows[j]) && !rows[j].classList.contains('e-summaryrow')) {\n              var cells = [].slice.call(rows[j].querySelectorAll('.e-rowcell'));\n              var uniqueid = currentRecords[j][uniqueID];\n\n              if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                this[getCopyData](cells, false, '\\t', withHeader);\n                this.treeCopyContent += '\\n' + this[copyContent];\n                this[copyContent] = '';\n                this.copiedUniqueIdCollection.push(uniqueid);\n                this.childContentData(currentRecords, j, rows, withHeader);\n              }\n            }\n\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  return TreeClipboard;\n}(GridClipboard);\n\nexport { TreeClipboard };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/clipboard.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","events","isNullOrUndefined","Browser","Clipboard","GridClipboard","TreeClipboard","_super","parent","_this","call","grid","treeCopyContent","copiedUniqueIdCollection","treeGridParent","setCopyData","withHeader","copyContent","getCopyData","isSelect","uniqueID","currentRecords","getCurrentViewRecords","window","getSelection","toString","clipBoardTextArea","value","rows","getRows","selectionSettings","mode","selectedIndexes","getSelectedRowIndexes","sort","a","i","length","classList","contains","cells","slice","querySelectorAll","uniqueid","getSelectedRecords","indexOf","copyHierarchyMode","parentContentData","push","childContentData","headerTextArray","getVisibleColumns","headerText","args","data","cancel","trigger","beforeCopy","userAgent","match","select","setSelectionRange","selectedIndex","index","parentItem","level","treeLevel","j","copy","paste","rowIndex","colIndex","getModuleName","destroy","childRecords","hasChildRecords","childData"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as events from '../base/constant';\nimport { isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { Clipboard as GridClipboard } from '@syncfusion/ej2-grids';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n *\n * @hidden\n */\nvar TreeClipboard = /** @class */ (function (_super) {\n    __extends(TreeClipboard, _super);\n    function TreeClipboard(parent) {\n        var _this = _super.call(this, parent.grid) || this;\n        _this.treeCopyContent = '';\n        _this.copiedUniqueIdCollection = [];\n        _this.treeGridParent = parent;\n        return _this;\n    }\n    TreeClipboard.prototype.setCopyData = function (withHeader) {\n        var copyContent = 'copyContent';\n        var getCopyData = 'getCopyData';\n        var isSelect = 'isSelect';\n        var uniqueID = 'uniqueID';\n        var currentRecords = this.treeGridParent.getCurrentViewRecords();\n        if (window.getSelection().toString() === '') {\n            this.clipBoardTextArea.value = this[copyContent] = '';\n            var rows = this.treeGridParent.grid.getRows();\n            if (this.treeGridParent.selectionSettings.mode !== 'Cell') {\n                var selectedIndexes = this.treeGridParent.getSelectedRowIndexes().sort(function (a, b) {\n                    return a - b;\n                });\n                for (var i = 0; i < selectedIndexes.length; i++) {\n                    if (i > 0) {\n                        this.treeCopyContent += '\\n';\n                    }\n                    if (!rows[selectedIndexes[i]].classList.contains('e-summaryrow')) {\n                        var cells = [].slice.call(rows[selectedIndexes[i]].querySelectorAll('.e-rowcell'));\n                        var uniqueid = this.treeGridParent.getSelectedRecords()[i][uniqueID];\n                        if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                            if (this.treeGridParent.copyHierarchyMode === 'Parent' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                                this.parentContentData(currentRecords, selectedIndexes[i], rows, withHeader, i);\n                            }\n                            this[getCopyData](cells, false, '\\t', withHeader);\n                            this.treeCopyContent += this[copyContent];\n                            this.copiedUniqueIdCollection.push(uniqueid);\n                            this[copyContent] = '';\n                            if (this.treeGridParent.copyHierarchyMode === 'Child' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                                this.childContentData(currentRecords, selectedIndexes[i], rows, withHeader);\n                            }\n                        }\n                    }\n                }\n                if (withHeader) {\n                    var headerTextArray = [];\n                    for (var i = 0; i < this.treeGridParent.getVisibleColumns().length; i++) {\n                        headerTextArray[i] = this.treeGridParent.getVisibleColumns()[i].headerText;\n                    }\n                    this[getCopyData](headerTextArray, false, '\\t', withHeader);\n                    this.treeCopyContent = this[copyContent] + '\\n' + this.treeCopyContent;\n                }\n                var args = {\n                    data: this.treeCopyContent,\n                    cancel: false\n                };\n                this.treeGridParent.trigger(events.beforeCopy, args);\n                if (args.cancel) {\n                    return;\n                }\n                this.clipBoardTextArea.value = this[copyContent] = args.data;\n                if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n                    this.clipBoardTextArea.select();\n                }\n                else {\n                    this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n                }\n                this[isSelect] = true;\n                this.copiedUniqueIdCollection = [];\n                this.treeCopyContent = '';\n            }\n            else {\n                _super.prototype.setCopyData.call(this, withHeader);\n            }\n        }\n    };\n    TreeClipboard.prototype.parentContentData = function (currentRecords, selectedIndex, rows, withHeader, index) {\n        var getCopyData = 'getCopyData';\n        var copyContent = 'copyContent';\n        var parentItem = 'parentItem';\n        var uniqueID = 'uniqueID';\n        var level = 'level';\n        if (!isNullOrUndefined(currentRecords[selectedIndex][parentItem])) {\n            var treeLevel = currentRecords[selectedIndex][parentItem][level];\n            for (var i = 0; i < treeLevel + 1; i++) {\n                for (var j = 0; j < currentRecords.length; j++) {\n                    if (!isNullOrUndefined(currentRecords[selectedIndex][parentItem]) &&\n                        currentRecords[j][uniqueID] === currentRecords[selectedIndex][parentItem][uniqueID]) {\n                        selectedIndex = j;\n                        var cells = [].slice.call(rows[selectedIndex].querySelectorAll('.e-rowcell'));\n                        var uniqueid = currentRecords[j][uniqueID];\n                        if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                            this[getCopyData](cells, false, '\\t', withHeader);\n                            if (index > 0) {\n                                this.treeCopyContent = this.treeCopyContent + this[copyContent] + '\\n';\n                            }\n                            else {\n                                this.treeCopyContent = this[copyContent] + '\\n' + this.treeCopyContent;\n                            }\n                            this.copiedUniqueIdCollection.push(uniqueid);\n                            this[copyContent] = '';\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    TreeClipboard.prototype.copy = function (withHeader) {\n        _super.prototype.copy.call(this, withHeader);\n    };\n    TreeClipboard.prototype.paste = function (data, rowIndex, colIndex) {\n        _super.prototype.paste.call(this, data, rowIndex, colIndex);\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns clipboard module name\n     */\n    TreeClipboard.prototype.getModuleName = function () {\n        return 'clipboard';\n    };\n    /**\n     * To destroy the clipboard\n     *\n     * @returns {void}\n     * @hidden\n     */\n    TreeClipboard.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    TreeClipboard.prototype.childContentData = function (currentRecords, selectedIndex, rows, withHeader) {\n        var getCopyData = 'getCopyData';\n        var copyContent = 'copyContent';\n        var childRecords = 'childRecords';\n        var hasChildRecords = 'hasChildRecords';\n        var uniqueID = 'uniqueID';\n        if (currentRecords[selectedIndex][hasChildRecords]) {\n            var childData = currentRecords[selectedIndex][childRecords];\n            for (var i = 0; i < childData.length; i++) {\n                for (var j = 0; j < currentRecords.length; j++) {\n                    if (!isNullOrUndefined(childData[i][uniqueID]) && currentRecords[j][uniqueID] === childData[i][uniqueID]) {\n                        if ((!isNullOrUndefined(rows[j])) && !rows[j].classList.contains('e-summaryrow')) {\n                            var cells = [].slice.call(rows[j].querySelectorAll('.e-rowcell'));\n                            var uniqueid = currentRecords[j][uniqueID];\n                            if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                                this[getCopyData](cells, false, '\\t', withHeader);\n                                this.treeCopyContent += ('\\n' + this[copyContent]);\n                                this[copyContent] = '';\n                                this.copiedUniqueIdCollection.push(uniqueid);\n                                this.childContentData(currentRecords, j, rows, withHeader);\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    return TreeClipboard;\n}(GridClipboard));\nexport { TreeClipboard };\n"]},"metadata":{},"sourceType":"module"}