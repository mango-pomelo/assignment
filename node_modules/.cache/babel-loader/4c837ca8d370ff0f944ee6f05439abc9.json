{"ast":null,"code":"import { Droppable } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, remove, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { getUpdateUsingRaf, appendChildren, setDisplayValue } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from './row-renderer';\nimport { CellMergeRender } from './cell-merge-renderer';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupModelGenerator } from '../services/group-model-generator';\nimport { isGroupAdaptive } from '../base/util';\nimport * as literals from '../base/string-literals'; // eslint-disable-next-line valid-jsdoc\n\n/**\n * Content module is used to render grid content\n *\n * @hidden\n */\n\nvar ContentRender =\n/** @class */\nfunction () {\n  /**\n   * Constructor for content renderer module\n   *\n   * @param {IGrid} parent - specifies the Igrid\n   * @param {ServiceLocator} serviceLocator - specifies the service locator\n   */\n  function ContentRender(parent, serviceLocator) {\n    var _this = this;\n\n    this.rows = [];\n    this.freezeRows = [];\n    this.movableRows = [];\n    this.freezeRowElements = [];\n    /** @hidden */\n\n    this.currentInfo = {};\n    /** @hidden */\n\n    this.prevCurrentView = [];\n    this.isLoaded = true;\n    this.viewColIndexes = [];\n\n    this.drop = function (e) {\n      _this.parent.notify(events.columnDrop, {\n        target: e.target,\n        droppedElement: e.droppedElement\n      });\n\n      remove(e.droppedElement);\n    };\n\n    this.infiniteCache = {};\n    this.isRemove = false;\n    this.visibleRows = [];\n    this.visibleFrozenRows = [];\n    this.rightFreezeRows = [];\n    this.isAddRows = false;\n    this.isInfiniteFreeze = false;\n    this.useGroupCache = false;\n    this.mutableData = false;\n\n    this.rafCallback = function (args) {\n      var arg = args;\n      return function () {\n        if (_this.parent.isFrozenGrid() && _this.parent.enableVirtualization) {\n          var mContentRows = [].slice.call(_this.parent.getMovableVirtualContent().getElementsByClassName(literals.row));\n          var fContentRows = [].slice.call(_this.parent.getFrozenVirtualContent().getElementsByClassName(literals.row));\n          _this.isLoaded = !mContentRows ? false : mContentRows.length === fContentRows.length;\n\n          if (_this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && _this.isLoaded) {\n            var mHdr = [].slice.call(_this.parent.getMovableVirtualHeader().getElementsByClassName(literals.row));\n            var fHdr = [].slice.call(_this.parent.getFrozenVirtualHeader().getElementsByClassName(literals.row));\n            _this.isLoaded = mHdr.length === fHdr.length;\n          }\n        }\n\n        _this.ariaService.setBusy(_this.getPanel().querySelector('.' + literals.content), false);\n\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n\n        var rows = _this.rows.slice(0);\n\n        if (_this.parent.isFrozenGrid()) {\n          rows = args.isFrozen ? _this.freezeRows : args.renderFrozenRightContent ? _this.parent.getFrozenRightRowsObject() : _this.movableRows;\n        }\n\n        _this.parent.notify(events.contentReady, {\n          rows: rows,\n          args: arg\n        });\n\n        if (_this.isLoaded) {\n          _this.parent.trigger(events.dataBound, {}, function () {\n            if (_this.parent.allowTextWrap) {\n              _this.parent.notify(events.freezeRender, {\n                case: 'textwrap'\n              });\n            }\n          });\n        }\n\n        if (arg) {\n          var action = (arg.requestType || '').toLowerCase() + '-complete';\n\n          _this.parent.notify(action, arg);\n\n          if (args.requestType === 'batchsave') {\n            args.cancel = false;\n\n            _this.parent.trigger(events.actionComplete, args);\n          }\n        }\n\n        if (_this.isLoaded) {\n          _this.parent.hideSpinner();\n        }\n      };\n    };\n\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.ariaService = this.serviceLocator.getService('ariaService');\n    this.mutableData = this.parent.getDataModule().isRemote();\n    this.generator = this.getModelGenerator();\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization && !this.parent.groupSettings.enableLazyLoading) {\n      this.parent.on(events.columnVisibilityChanged, this.setVisible, this);\n    }\n\n    this.parent.on(events.colGroupRefresh, this.colGroupRefresh, this);\n    this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n    this.parent.on(events.refreshInfiniteModeBlocks, this.refreshContentRows, this);\n    this.parent.on(events.beforeCellFocused, this.beforeCellFocused, this);\n    this.parent.on(events.destroy, this.droppableDestroy, this);\n  }\n\n  ContentRender.prototype.beforeCellFocused = function (e) {\n    if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n      this.pressedKey = e.keyArgs.action;\n    } else {\n      this.pressedKey = undefined;\n    }\n  };\n  /**\n   * The function is used to render grid content div\n   *\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.renderPanel = function () {\n    var gObj = this.parent;\n    var div = this.parent.element.querySelector('.' + literals.gridContent);\n\n    if (div) {\n      this.ariaService.setOptions(this.parent.element.querySelector('.' + literals.content), {\n        busy: false\n      });\n      this.setPanel(div);\n      return;\n    }\n\n    div = this.parent.createElement('div', {\n      className: literals.gridContent\n    });\n    var innerDiv = this.parent.createElement('div', {\n      className: literals.content\n    });\n    this.ariaService.setOptions(innerDiv, {\n      busy: false\n    });\n    div.appendChild(innerDiv);\n    this.setPanel(div);\n    gObj.element.appendChild(div);\n  };\n  /**\n   * The function is used to render grid content table\n   *\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.renderTable = function () {\n    var contentDiv = this.getPanel();\n    var virtualTable = contentDiv.querySelector('.e-virtualtable');\n    var virtualTrack = contentDiv.querySelector('.e-virtualtrack');\n\n    if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {\n      remove(virtualTable);\n      remove(virtualTrack);\n    }\n\n    contentDiv.appendChild(this.createContentTable('_content_table'));\n    this.setTable(contentDiv.querySelector('.' + literals.table));\n    this.ariaService.setOptions(this.getTable(), {\n      multiselectable: this.parent.selectionSettings.type === 'Multiple'\n    });\n    this.initializeContentDrop();\n\n    if (this.parent.frozenRows) {\n      this.parent.getHeaderContent().classList.add('e-frozenhdrcont');\n    }\n  };\n  /**\n   * The function is used to create content table elements\n   *\n   * @param {string} id - specifies the id\n   * @returns {Element} returns the element\n   * @hidden\n   */\n\n\n  ContentRender.prototype.createContentTable = function (id) {\n    var innerDiv = this.getPanel().firstElementChild;\n\n    if (this.getTable()) {\n      remove(this.getTable());\n    }\n\n    var table = innerDiv.querySelector('.' + literals.table) ? innerDiv.querySelector('.' + literals.table) : this.parent.createElement('table', {\n      className: literals.table,\n      attrs: {\n        cellspacing: '0.25px',\n        role: 'grid',\n        id: this.parent.element.id + id\n      }\n    });\n    this.setColGroup(this.parent.getHeaderTable().querySelector(literals.colGroup).cloneNode(true));\n    table.appendChild(this.getColGroup());\n    table.appendChild(this.parent.createElement(literals.tbody));\n    innerDiv.appendChild(table);\n    return innerDiv;\n  };\n  /**\n   * Refresh the content of the Grid.\n   *\n   * @param {NotifyArgs} args - specifies the args\n   * @returns {void}\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  ContentRender.prototype.refreshContentRows = function (args) {\n    var _this = this;\n\n    if (args === void 0) {\n      args = {};\n    }\n\n    var gObj = this.parent;\n\n    if (gObj.currentViewData.length === 0) {\n      return;\n    }\n\n    var dataSource = this.currentMovableRows || gObj.currentViewData;\n    var contentModule = this.parent.contentModule;\n    var isReact = gObj.isReact && !isNullOrUndefined(gObj.rowTemplate);\n    var frag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n\n    if (!this.initialPageRecords) {\n      this.initialPageRecords = extend([], dataSource);\n    }\n\n    var hdrfrag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n    var columns = gObj.getColumns();\n    var tr;\n    var hdrTbody;\n    var frzCols = gObj.getFrozenColumns();\n    var isFrozenGrid = this.parent.isFrozenGrid();\n    var trElement;\n    var row = new RowRenderer(this.serviceLocator, null, this.parent);\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType === 'infiniteScroll';\n    this.rowElements = [];\n    this.rows = [];\n    var fCont = this.getPanel().querySelector('.' + literals.frozenContent);\n    var mCont = this.getPanel().querySelector('.' + literals.movableContent);\n    var cont = this.getPanel().querySelector('.' + literals.content);\n    var tbdy;\n    var tableName;\n\n    if (isGroupAdaptive(gObj)) {\n      if (['sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder'].some(function (value) {\n        return args.requestType === value;\n      })) {\n        this.emptyVcRows();\n      }\n    }\n\n    var modelData;\n\n    if (this.parent.enableVirtualization && this.parent.isFrozenGrid()) {\n      if (this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X') {\n        modelData = this.parent.contentModule.generateRows(dataSource, args);\n        args.renderMovableContent = true;\n      }\n\n      modelData = this.parent.contentModule.generateRows(dataSource, args);\n    } else {\n      modelData = this.checkCache(modelData, args);\n\n      if (!this.isAddRows && !this.useGroupCache) {\n        modelData = this.generator.generateRows(dataSource, args);\n      }\n    }\n\n    this.setGroupCache(modelData, args);\n    this.parent.notify(events.setInfiniteCache, {\n      isInfiniteScroll: isInfiniteScroll,\n      modelData: modelData,\n      args: args\n    });\n    var idx = modelData[0].cells[0].index;\n\n    if (isFrozenGrid) {\n      tableName = contentModule.setTbody(modelData, args);\n      tbdy = contentModule.getTbody(tableName);\n    }\n\n    var isFrozenLeft = this.parent.getFrozenMode() === literals.leftRight && tableName === literals.frozenRight;\n    /* eslint-disable */\n\n    if (args.requestType !== 'infiniteScroll' && this.parent.registeredTemplate && this.parent.registeredTemplate.template && !args.isFrozen && !isFrozenLeft) {\n      var templatetoclear = [];\n\n      for (var i = 0; i < this.parent.registeredTemplate.template.length; i++) {\n        for (var j = 0; j < this.parent.registeredTemplate.template[i].rootNodes.length; j++) {\n          if (isNullOrUndefined(this.parent.registeredTemplate.template[i].rootNodes[j].parentNode)) {\n            templatetoclear.push(this.parent.registeredTemplate.template[i]);\n            /* eslint-enable */\n          }\n        }\n      }\n\n      this.parent.destroyTemplate(['template'], templatetoclear);\n    }\n\n    if (this.parent.isReact && args.requestType !== 'infiniteScroll' && !args.isFrozen) {\n      this.parent.destroyTemplate(['columnTemplate', 'rowTemplate', 'detailTemplate', 'captionTemplate', 'commandsTemplate']);\n      this.parent.renderTemplates();\n    }\n\n    if (this.parent.enableColumnVirtualization) {\n      var cellMerge = new CellMergeRender(this.serviceLocator, this.parent);\n      cellMerge.updateVirtualCells(modelData);\n    }\n\n    if (!isFrozenGrid) {\n      this.tbody = this.getTable().querySelector(literals.tbody);\n    }\n\n    var startIndex = 0;\n    var blockLoad = true;\n\n    if (isGroupAdaptive(gObj) && gObj.vcRows.length) {\n      var top_1 = 'top';\n      var scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top : !isNullOrUndefined(args.scrollTop) ? args.scrollTop[top_1] : 0;\n\n      if (scrollTop !== 0) {\n        var offsets_1 = gObj.vGroupOffsets;\n        var bSize = gObj.pageSettings.pageSize / 2;\n        var values = Object.keys(offsets_1).map(function (key) {\n          return offsets_1[key];\n        });\n\n        for (var m = 0; m < values.length; m++) {\n          if (scrollTop < values[m]) {\n            if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === 'up') {\n              args.virtualInfo.blockIndexes = m === 0 || m === 1 ? [1, 2] : [m, m + 1];\n              startIndex = m === 0 || m === 1 ? 0 : m * bSize;\n              break;\n            } else {\n              args.virtualInfo.blockIndexes = m === 0 || m === 1 ? [1, 2] : [m, m + 1];\n              startIndex = m === 0 || m === 1 ? 0 : m * bSize;\n              break;\n            }\n          }\n        }\n\n        if (Math.round(scrollTop + this.contentPanel.firstElementChild.offsetHeight) >= this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {\n          blockLoad = false;\n        }\n      }\n    }\n\n    var isVFFrozenOnly = gObj.frozenRows && !gObj.isFrozenGrid() && this.parent.enableVirtualization && args.requestType === 'reorder';\n\n    if (gObj.frozenRows && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X' || isVFFrozenOnly) {\n      var bIndex = args.virtualInfo.blockIndexes;\n      var page = args.virtualInfo.page;\n      args.virtualInfo.blockIndexes = [1, 2];\n\n      if (isVFFrozenOnly) {\n        args.virtualInfo.page = 1;\n      }\n\n      var data = isVFFrozenOnly ? this.initialPageRecords : dataSource;\n      var mhdrData = this.vgenerator.generateRows(data, args);\n      mhdrData.splice(this.parent.frozenRows);\n\n      for (var i = 0; i < this.parent.frozenRows; i++) {\n        mhdrData[i].cells.splice(0, this.parent.getFrozenColumns());\n        tr = row.render(mhdrData[i], columns);\n        hdrfrag.appendChild(tr);\n      }\n\n      args.virtualInfo.blockIndexes = bIndex;\n      args.virtualInfo.page = page;\n\n      if (isVFFrozenOnly && args.virtualInfo.page === 1) {\n        modelData.splice(0, this.parent.frozenRows);\n      }\n    }\n\n    this.virtualFrozenHdrRefresh(hdrfrag, modelData, row, args, dataSource, columns);\n\n    for (var i = startIndex, len = modelData.length; i < len; i++) {\n      this.rows.push(modelData[i]);\n\n      if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n        this.setRowsInLazyGroup(modelData[i], i);\n\n        if (isNullOrUndefined(modelData[i].indent)) {\n          continue;\n        }\n      }\n\n      this.setInfiniteVisibleRows(args, modelData[i], tableName);\n\n      if (isGroupAdaptive(gObj) && this.rows.length >= gObj.pageSettings.pageSize && blockLoad) {\n        break;\n      }\n\n      if (!gObj.rowTemplate) {\n        tr = row.render(modelData[i], columns);\n        var isVFreorder = this.ensureFrozenHeaderRender(args);\n\n        if (gObj.frozenRows && i < gObj.frozenRows && !isInfiniteScroll && args.requestType !== 'virtualscroll' && isVFreorder && this.ensureVirtualFrozenHeaderRender(args)) {\n          hdrfrag.appendChild(tr);\n        } else {\n          frag.appendChild(tr);\n        }\n\n        if (modelData[i].isExpand) {\n          gObj.notify(events.expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);\n        }\n      } else {\n        var rowTemplateID = gObj.element.id + 'rowTemplate';\n        var elements = void 0;\n\n        if (gObj.isReact) {\n          var isHeader = gObj.frozenRows && i < gObj.frozenRows;\n          var copied = extend({\n            index: i\n          }, dataSource[i]);\n          gObj.getRowTemplate()(copied, gObj, 'rowTemplate', rowTemplateID, null, null, isHeader ? hdrfrag : frag);\n          gObj.renderTemplates();\n        } else {\n          elements = gObj.getRowTemplate()(extend({\n            index: i\n          }, dataSource[i]), gObj, 'rowTemplate', rowTemplateID);\n        }\n\n        if (!gObj.isReact && elements[0].tagName === 'TBODY') {\n          for (var j = 0; j < elements.length; j++) {\n            var isTR = elements[j].nodeName.toLowerCase() === 'tr';\n\n            if (isTR || elements[j].querySelectorAll && elements[j].querySelectorAll('tr').length) {\n              tr = isTR ? elements[j] : elements[j].querySelector('tr');\n            }\n          }\n\n          if (gObj.frozenRows && i < gObj.frozenRows) {\n            hdrfrag.appendChild(tr);\n          } else {\n            frag.appendChild(tr);\n          }\n        } else {\n          if (gObj.frozenRows && i < gObj.frozenRows) {\n            tr = !gObj.isReact ? appendChildren(hdrfrag, elements) : hdrfrag.lastElementChild;\n          } else {\n            // frag.appendChild(tr);\n            if (!gObj.isReact) {\n              tr = appendChildren(frag, elements);\n            }\n\n            trElement = gObj.isReact ? frag.lastElementChild : tr.lastElementChild;\n          }\n        }\n\n        var arg = {\n          data: modelData[i].data,\n          row: trElement ? trElement : tr\n        };\n        this.parent.trigger(events.rowDataBound, arg);\n      }\n\n      if (modelData[i].isDataRow) {\n        this.rowElements.push(tr);\n      }\n\n      this.ariaService.setOptions(this.getTable(), {\n        colcount: gObj.getColumns().length.toString()\n      });\n    }\n\n    if (isFrozenGrid) {\n      contentModule.splitRows(tableName);\n    }\n\n    if (gObj.frozenRows && args.requestType !== 'virtualscroll' && !isInfiniteScroll && this.ensureVirtualFrozenHeaderRender(args) || args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === 'X') {\n      hdrTbody = isFrozenGrid ? contentModule.getFrozenHeader(tableName) : gObj.getHeaderTable().querySelector(literals.tbody);\n\n      if (isReact) {\n        var parentTable = hdrTbody.parentElement;\n        remove(hdrTbody);\n        parentTable.appendChild(hdrfrag);\n      } else {\n        hdrTbody.innerHTML = '';\n        hdrTbody.appendChild(hdrfrag);\n      }\n    }\n\n    if (!gObj.enableVirtualization && gObj.frozenRows && idx === 0 && cont.offsetHeight === Number(gObj.height)) {\n      cont.style.height = cont.offsetHeight - hdrTbody.offsetHeight + 'px';\n    }\n\n    args.rows = this.rows.slice(0);\n\n    if (isFrozenGrid) {\n      contentModule.setIsFrozen(args, tableName);\n    }\n\n    this.index = idx;\n    getUpdateUsingRaf(function () {\n      _this.parent.notify(events.beforeFragAppend, args);\n\n      var isVFTable = _this.parent.enableVirtualization && _this.parent.isFrozenGrid();\n\n      if (!_this.parent.enableVirtualization && !isInfiniteScroll) {\n        if (_this.parent.isFrozenGrid()) {\n          remove(contentModule.getTbody(tableName));\n          tbdy = _this.parent.createElement(literals.tbody);\n        } else {\n          remove(_this.tbody);\n          _this.tbody = _this.parent.createElement(literals.tbody);\n        }\n      }\n\n      if (isFrozenGrid && !isVFTable && !_this.parent.enableInfiniteScrolling) {\n        _this.appendContent(tbdy, frag, args, tableName);\n      } else {\n        if (gObj.rowTemplate) {\n          updateBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate', gObj);\n        }\n\n        if (isVFTable) {\n          if (args.renderFrozenRightContent) {\n            var frCont = gObj.getContent().querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n\n            _this.appendContent(frCont, frag, args);\n          } else if (!args.renderMovableContent) {\n            _this.appendContent(fCont.querySelector(literals.tbody), frag, args);\n          } else {\n            _this.appendContent(mCont.querySelector(literals.tbody), frag, args);\n\n            args.renderMovableContent = false;\n          }\n\n          if (!_this.parent.getFrozenColumns()) {\n            contentModule.renderNextFrozentPart(args, tableName);\n          }\n        } else {\n          if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && _this.parent.enableInfiniteScrolling) {\n            _this.isAddRows = false;\n\n            _this.parent.notify(events.removeInfiniteRows, {\n              args: args\n            });\n\n            _this.parent.notify(events.appendInfiniteContent, {\n              tbody: tbdy ? tbdy : _this.tbody,\n              frag: frag,\n              args: args,\n              rows: _this.rows,\n              rowElements: _this.rowElements,\n              visibleRows: _this.visibleRows,\n              tableName: tableName\n            });\n\n            if (!frzCols && isFrozenGrid) {\n              if (gObj.getFrozenMode() !== literals.leftRight && (tableName === literals.frozenLeft || tableName === literals.frozenRight) || gObj.getFrozenMode() === literals.leftRight && (tableName === literals.frozenLeft || tableName === 'movable')) {\n                _this.refreshContentRows(extend({}, args));\n              }\n            }\n          } else {\n            _this.useGroupCache = false;\n\n            _this.appendContent(_this.tbody, frag, args);\n          }\n        }\n      }\n\n      if (frzCols) {\n        contentModule.renderNextFrozentPart(args, tableName);\n      }\n\n      frag = null;\n    }, this.rafCallback(extend({}, args)));\n  };\n\n  ContentRender.prototype.emptyVcRows = function () {\n    this.parent.vcRows = [];\n    this.parent.vRows = [];\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  ContentRender.prototype.appendContent = function (tbody, frag, args, tableName) {\n    var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);\n\n    if (isReact) {\n      this.getTable().appendChild(frag);\n    } else {\n      tbody.appendChild(frag);\n      this.getTable().appendChild(tbody);\n    }\n  };\n\n  ContentRender.prototype.setRowsInLazyGroup = function (row, index) {\n    if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n      this.parent.contentModule.maintainRows(row, index);\n    }\n  };\n\n  ContentRender.prototype.setGroupCache = function (data, args) {\n    if (!this.useGroupCache && this.parent.groupSettings.enableLazyLoading) {\n      this.parent.notify(events.setGroupCache, {\n        args: args,\n        data: data\n      });\n    }\n  };\n\n  ContentRender.prototype.ensureFrozenHeaderRender = function (args) {\n    return !(this.parent.enableVirtualization && (args.requestType === 'reorder' || args.requestType === 'refresh') || this.parent.infiniteScrollSettings.enableCache && this.parent.frozenRows && this.parent.infiniteScrollModule.requestType === 'delete' && this.parent.pageSettings.currentPage !== 1);\n  };\n\n  ContentRender.prototype.ensureVirtualFrozenHeaderRender = function (args) {\n    return !(this.parent.enableVirtualization && args.requestType === 'delete');\n  };\n\n  ContentRender.prototype.checkCache = function (modelData, args) {\n    if (this.parent.infiniteScrollSettings.enableCache && args.requestType === 'infiniteScroll') {\n      var index = args.isFrozen ? 1 : 0;\n      var frozenCols = this.parent.isFrozenGrid();\n      this.isAddRows = !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]);\n\n      if (frozenCols && !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n        this.isAddRows = this.infiniteCache[this.parent.pageSettings.currentPage][index].length !== 0;\n      }\n\n      if (this.isAddRows) {\n        var data = !frozenCols ? this.infiniteCache[this.parent.pageSettings.currentPage] : this.infiniteCache[this.parent.pageSettings.currentPage][index];\n        modelData = this.parent.pageSettings.currentPage === 1 ? data.slice(this.parent.frozenRows) : data;\n      }\n\n      return modelData;\n    }\n\n    if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && (args.requestType === 'paging' || args.requestType === 'columnstate' || args.requestType === 'reorder') && this.parent.contentModule.getGroupCache()[this.parent.pageSettings.currentPage]) {\n      this.useGroupCache = true;\n      return this.parent.contentModule.initialGroupRows(args.requestType === 'reorder');\n    }\n\n    return null;\n  };\n\n  ContentRender.prototype.setInfiniteVisibleRows = function (args, data, tableName) {\n    var frozenCols = this.parent.isFrozenGrid();\n\n    if (this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache) {\n      if (frozenCols) {\n        if (tableName === literals.frozenLeft || this.parent.getFrozenMode() === 'Right' && tableName === literals.frozenRight) {\n          this.visibleFrozenRows.push(data);\n        } else if (tableName === 'movable') {\n          this.visibleRows.push(data);\n        } else {\n          this.rightFreezeRows.push(data);\n        }\n      } else if (!this.parent.infiniteScrollSettings.enableCache) {\n        this.visibleRows.push(data);\n      }\n    }\n  };\n\n  ContentRender.prototype.getCurrentBlockInfiniteRecords = function (isFreeze) {\n    var data = [];\n\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      if (!Object.keys(this.infiniteCache).length) {\n        return [];\n      }\n\n      var frozenCols = this.parent.isFrozenGrid();\n      var rows = this.parent.getRows();\n      var index = parseInt(rows[this.parent.frozenRows].getAttribute(literals.ariaRowIndex), 10);\n      var first = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);\n      index = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10);\n      var last = Math.ceil(index / this.parent.pageSettings.pageSize);\n\n      if (frozenCols) {\n        var idx = isFreeze ? 0 : 1;\n\n        for (var i = first; i <= last; i++) {\n          data = !data.length ? this.infiniteCache[i][idx] : data.concat(this.infiniteCache[i][idx]);\n        }\n\n        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n          data = this.infiniteCache[1][idx].slice(0, this.parent.frozenRows).concat(data);\n        }\n      } else {\n        for (var i = first; i <= last; i++) {\n          data = !data.length ? this.infiniteCache[i] : data.concat(this.infiniteCache[i]);\n        }\n\n        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n          data = this.infiniteCache[1].slice(0, this.parent.frozenRows).concat(data);\n        }\n      }\n    }\n\n    return data;\n  };\n\n  ContentRender.prototype.getReorderedVFRows = function (args) {\n    return this.parent.contentModule.getReorderedFrozenRows(args);\n  };\n\n  ContentRender.prototype.getReorderedRows = function (args) {\n    return this.parent.contentModule.getReorderedFrozenRows(args);\n  };\n\n  ContentRender.prototype.virtualFrozenHdrRefresh = function (hdrfrag, modelData, row, args, dataSource, columns) {\n    if (this.parent.frozenRows && this.parent.enableVirtualization && (args.requestType === 'reorder' || args.requestType === 'refresh')) {\n      var tr = void 0;\n      var fhdrData = [];\n\n      if (this.parent.isFrozenGrid()) {\n        this.currentMovableRows = dataSource;\n        fhdrData = this.getReorderedVFRows(args);\n      } else {\n        fhdrData = this.getReorderedRows(args);\n      }\n\n      for (var i = 0; i < fhdrData.length; i++) {\n        tr = row.render(fhdrData[i], columns);\n        hdrfrag.appendChild(tr);\n      }\n\n      if (args.virtualInfo.page === 1) {\n        modelData.splice(0, this.parent.frozenRows);\n      }\n\n      if (args.renderMovableContent) {\n        this.parent.currentViewData = this.currentMovableRows;\n        this.currentMovableRows = null;\n      }\n    }\n  };\n\n  ContentRender.prototype.getInfiniteRows = function () {\n    var rows = [];\n    var frozenCols = this.parent.isFrozenGrid();\n\n    if (this.parent.enableInfiniteScrolling) {\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        var keys = Object.keys(this.infiniteCache);\n\n        for (var i = 0; i < keys.length; i++) {\n          rows = !frozenCols ? rows.concat(this.infiniteCache[keys[i]]) : rows.concat(this.infiniteCache[keys[i]][0]);\n        }\n      } else {\n        rows = frozenCols ? this.visibleFrozenRows : this.visibleRows;\n      }\n    }\n\n    return rows;\n  };\n\n  ContentRender.prototype.getInfiniteMovableRows = function () {\n    var infiniteCacheRows = this.getCurrentBlockInfiniteRecords();\n    var infiniteRows = this.parent.enableInfiniteScrolling ? infiniteCacheRows.length ? infiniteCacheRows : this.visibleRows : [];\n    return infiniteRows;\n  };\n  /**\n   * Get the content div element of grid\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getPanel = function () {\n    return this.contentPanel;\n  };\n  /**\n   * Set the content div element of grid\n   *\n   * @param  {Element} panel - specifies the panel\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.setPanel = function (panel) {\n    this.contentPanel = panel;\n  };\n  /**\n   * Get the content table element of grid\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getTable = function () {\n    return this.contentTable;\n  };\n  /**\n   * Set the content table element of grid\n   *\n   * @param  {Element} table - specifies the table\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.setTable = function (table) {\n    this.contentTable = table;\n  };\n  /**\n   * Get the Movable Row collection in the Freeze pane Grid.\n   *\n   * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n   */\n\n\n  ContentRender.prototype.getRows = function () {\n    var infiniteRows = this.getInfiniteRows();\n    return infiniteRows.length ? infiniteRows : this.parent.getFrozenColumns() ? this.freezeRows : this.rows;\n  };\n  /**\n   * Get the Movable Row collection in the Freeze pane Grid.\n   *\n   * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n   */\n\n\n  ContentRender.prototype.getMovableRows = function () {\n    var infiniteRows = this.getInfiniteMovableRows();\n    return infiniteRows.length ? infiniteRows : this.movableRows;\n  };\n  /**\n   * Get the content table data row elements\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getRowElements = function () {\n    return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;\n  };\n  /**\n   * Get the Freeze pane movable content table data row elements\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getMovableRowElements = function () {\n    return this.rowElements;\n  };\n  /**\n   * Get the content table data row elements\n   *\n   * @param {Element[]} elements - specifies the elements\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.setRowElements = function (elements) {\n    this.rowElements = elements;\n  };\n  /**\n   * Get the header colgroup element\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getColGroup = function () {\n    return this.colgroup;\n  };\n  /**\n   * Set the header colgroup element\n   *\n   * @param {Element} colGroup - specifies the colgroup\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.setColGroup = function (colGroup) {\n    if (!isNullOrUndefined(colGroup)) {\n      colGroup.id = 'content-' + colGroup.id;\n    }\n\n    return this.colgroup = colGroup;\n  };\n  /**\n   * Function to hide content table column based on visible property\n   *\n   * @param {Column[]} columns - specifies the column\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.setVisible = function (columns) {\n    var gObj = this.parent;\n    var isFrozenGrid = this.parent.isFrozenGrid();\n    var frzCols = gObj.getFrozenColumns();\n    var rows = [];\n\n    if (isFrozenGrid) {\n      var fRows = this.freezeRows;\n      var mRows = this.movableRows;\n      var rowLen = fRows.length;\n      var cellLen = void 0;\n      var rightRows = [];\n\n      if (gObj.getFrozenMode() === literals.leftRight) {\n        rightRows = gObj.getFrozenRightRowsObject();\n      }\n\n      for (var i = 0, row = void 0; i < rowLen; i++) {\n        cellLen = mRows[i].cells.length;\n        var rightLen = rightRows.length ? rightRows[i].cells.length : 0;\n        row = fRows[i].clone();\n\n        for (var j = 0; j < cellLen; j++) {\n          row.cells.push(mRows[i].cells[j]);\n        }\n\n        for (var k = 0; k < rightLen; k++) {\n          row.cells.push(rightRows[i].cells[k]);\n        }\n\n        rows.push(row);\n      }\n    } else {\n      rows = this.getRows();\n    }\n\n    var testRow;\n    rows.some(function (r) {\n      if (r.isDataRow) {\n        testRow = r;\n      }\n\n      return r.isDataRow;\n    });\n    var needFullRefresh = true;\n\n    if (!gObj.groupSettings.columns.length && testRow) {\n      needFullRefresh = false;\n    }\n\n    var tr = gObj.getDataRows();\n    var args = {};\n    var infiniteData = this.infiniteRowVisibility();\n    var contentrows = infiniteData ? infiniteData : this.rows.filter(function (row) {\n      return !row.isDetailRow;\n    });\n\n    for (var c = 0, clen = columns.length; c < clen; c++) {\n      var column = columns[c];\n      var idx = this.parent.getNormalizedColumnIndex(column.uid);\n      var colIdx = this.parent.getColumnIndexByUid(column.uid);\n      var displayVal = column.visible === true ? '' : 'none';\n\n      if (idx !== -1 && testRow && idx < testRow.cells.length) {\n        if (isFrozenGrid) {\n          if (column.getFreezeTableName() !== 'movable') {\n            if (column.getFreezeTableName() === literals.frozenRight) {\n              var left = this.parent.getFrozenLeftColumnsCount();\n              var movable = this.parent.getMovableColumnsCount();\n              colIdx = idx = idx - (left + movable);\n              var colG = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(literals.colGroup);\n              setStyleAttribute(colG.childNodes[idx], {\n                'display': displayVal\n              });\n              contentrows = gObj.getFrozenRightRowsObject();\n              tr = gObj.getFrozenRightDataRows();\n            } else {\n              setStyleAttribute(this.getColGroup().childNodes[idx], {\n                'display': displayVal\n              });\n              var infiniteFreezeData = this.infiniteRowVisibility(true);\n              contentrows = infiniteFreezeData ? infiniteFreezeData : this.freezeRows;\n              tr = gObj.getDataRows();\n            }\n          } else {\n            var mTable = gObj.getContent().querySelector('.' + literals.movableContent).querySelector(literals.colGroup);\n            colIdx = idx = idx - frzCols - this.parent.getFrozenLeftColumnsCount();\n            setStyleAttribute(mTable.childNodes[idx], {\n              'display': displayVal\n            });\n            tr = gObj.getMovableDataRows();\n            var infiniteMovableData = this.infiniteRowVisibility();\n            contentrows = infiniteMovableData ? infiniteMovableData : this.movableRows;\n          }\n        } else {\n          setStyleAttribute(this.getColGroup().childNodes[idx], {\n            'display': displayVal\n          });\n        }\n      }\n\n      if (!needFullRefresh) {\n        this.setDisplayNone(tr, colIdx, displayVal, contentrows);\n      }\n\n      if (!this.parent.invokedFromMedia && column.hideAtMedia) {\n        this.parent.updateMediaColumns(column);\n      }\n\n      this.parent.invokedFromMedia = false;\n    }\n\n    if (needFullRefresh) {\n      this.refreshContentRows({\n        requestType: 'refresh'\n      });\n    } else {\n      if (!this.parent.getFrozenColumns()) {\n        this.parent.notify(events.partialRefresh, {\n          rows: contentrows,\n          args: args\n        });\n      } else {\n        this.parent.notify(events.partialRefresh, {\n          rows: this.freezeRows,\n          args: {\n            isFrozen: true,\n            rows: this.freezeRows\n          }\n        });\n        this.parent.notify(events.partialRefresh, {\n          rows: this.movableRows,\n          args: {\n            isFrozen: false,\n            rows: this.movableRows\n          }\n        });\n      }\n    }\n  };\n  /**\n   * @param {Object} tr - specifies the trr\n   * @param {number} idx - specifies the idx\n   * @param {string} displayVal - specifies the displayval\n   * @param {Row<Column>} rows - specifies the rows\n   * @returns {void}\n   * @hidden\n   */\n\n\n  ContentRender.prototype.setDisplayNone = function (tr, idx, displayVal, rows) {\n    setDisplayValue(tr, idx, displayVal, rows, this.parent, this.parent.isRowDragable());\n    this.parent.notify(events.infiniteShowHide, {\n      visible: displayVal,\n      index: idx,\n      isFreeze: this.isInfiniteFreeze\n    });\n  };\n\n  ContentRender.prototype.infiniteRowVisibility = function (isFreeze) {\n    var infiniteData;\n\n    if (this.parent.enableInfiniteScrolling) {\n      this.isInfiniteFreeze = isFreeze;\n\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        infiniteData = isFreeze ? this.getCurrentBlockInfiniteRecords(true) : this.getCurrentBlockInfiniteRecords();\n      } else {\n        infiniteData = isFreeze ? this.visibleFrozenRows : this.visibleRows;\n      }\n    }\n\n    return infiniteData;\n  };\n\n  ContentRender.prototype.colGroupRefresh = function () {\n    if (this.getColGroup()) {\n      var colGroup = void 0;\n\n      if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns() && this.parent.contentModule.isXaxis()) {\n        colGroup = this.parent.getMovableVirtualHeader().querySelector(literals.colGroup).cloneNode(true);\n      } else {\n        colGroup = this.getHeaderColGroup();\n      }\n\n      this.getTable().replaceChild(colGroup, this.getColGroup());\n      this.setColGroup(colGroup);\n    }\n  };\n\n  ContentRender.prototype.getHeaderColGroup = function () {\n    return this.parent.element.querySelector('.' + literals.gridHeader).querySelector(literals.colGroup).cloneNode(true);\n  };\n\n  ContentRender.prototype.initializeContentDrop = function () {\n    var gObj = this.parent;\n    this.droppable = new Droppable(gObj.element, {\n      accept: '.e-dragclone',\n      drop: this.drop\n    });\n  };\n\n  ContentRender.prototype.droppableDestroy = function () {\n    if (this.droppable && !this.droppable.isDestroyed) {\n      this.droppable.destroy();\n    }\n  };\n\n  ContentRender.prototype.canSkip = function (column, row, index) {\n    /**\n     * Skip the toggle visiblity operation when one of the following success\n     * 1. Grid has empty records\n     * 2. column visible property is unchanged\n     * 3. cell`s isVisible property is same as column`s visible property.\n     */\n    return isNullOrUndefined(row) || //(1)\n    isNullOrUndefined(column.visible) || //(2)\n    row.cells[index].visible === column.visible; //(3)\n  };\n\n  ContentRender.prototype.getModelGenerator = function () {\n    return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n  };\n\n  ContentRender.prototype.renderEmpty = function (tbody) {\n    this.getTable().appendChild(tbody);\n\n    if (this.parent.frozenRows) {\n      this.parent.getHeaderContent().querySelector(literals.tbody).innerHTML = '';\n    }\n  };\n\n  ContentRender.prototype.setSelection = function (uid, set, clearAll) {\n    this.parent.notify(events.setFreezeSelection, {\n      uid: uid,\n      set: set,\n      clearAll: clearAll\n    });\n    var isFrozen = this.parent.isFrozenGrid();\n\n    if (isFrozen && this.parent.enableVirtualization) {\n      return;\n    }\n\n    if (isFrozen) {\n      var rows = this.getMovableRows().filter(function (row) {\n        return clearAll || uid === row.uid;\n      });\n\n      for (var i = 0; i < rows.length; i++) {\n        rows[i].isSelected = set;\n      }\n    }\n\n    var row = this.getRows().filter(function (row) {\n      return clearAll || uid === row.uid;\n    });\n\n    for (var j = 0; j < row.length; j++) {\n      row[j].isSelected = set;\n      var cells = row[j].cells;\n\n      for (var k = 0; k < cells.length; k++) {\n        cells[k].isSelected = set;\n      }\n    }\n  };\n\n  ContentRender.prototype.getRowByIndex = function (index) {\n    index = this.getInfiniteRowIndex(index);\n    return this.parent.getDataRows()[index];\n  };\n\n  ContentRender.prototype.getInfiniteRowIndex = function (index) {\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      var fRows = this.parent.frozenRows;\n      var idx = fRows > index ? 0 : fRows;\n      var firstRowIndex = parseInt(this.parent.getRows()[idx].getAttribute(literals.ariaRowIndex), 10);\n      index = fRows > index ? index : index - firstRowIndex + fRows;\n    }\n\n    return index;\n  };\n\n  ContentRender.prototype.getVirtualRowIndex = function (index) {\n    return index;\n  };\n\n  ContentRender.prototype.getMovableRowByIndex = function (index) {\n    index = this.getInfiniteRowIndex(index);\n    return this.parent.getMovableDataRows()[index];\n  };\n\n  ContentRender.prototype.enableAfterRender = function (e) {\n    if (e.module === 'group' && e.enable) {\n      this.generator = this.getModelGenerator();\n    }\n  };\n\n  ContentRender.prototype.setRowObjects = function (rows) {\n    this.rows = rows;\n  };\n  /**\n   * @param {NotifyArgs} args - specifies the args\n   * @returns {void}\n   * @hidden\n   */\n\n\n  ContentRender.prototype.immutableModeRendering = function (args) {\n    var _this = this;\n\n    if (args === void 0) {\n      args = {};\n    }\n\n    var gObj = this.parent;\n    gObj.hideSpinner();\n    var key = gObj.getPrimaryKeyFieldNames()[0];\n    var oldKeys = {};\n    var newKeys = {};\n    var newRowObjs = [];\n    var oldIndexes = {};\n    var oldRowObjs = gObj.getRowsObject().slice();\n    var batchChangeKeys = this.getBatchEditedRecords(key, oldRowObjs);\n    var newIndexes = {};\n    var hasBatch = Object.keys(batchChangeKeys).length !== 0;\n\n    if (gObj.getContent().querySelector('.e-emptyrow') || args.requestType === 'reorder' || this.parent.groupSettings.columns.length) {\n      this.refreshContentRows(args);\n    } else {\n      if (gObj.currentViewData.length === 0) {\n        return;\n      }\n\n      var oldRowElements = {};\n      var tbody = gObj.createElement(literals.tbody);\n      var dataSource = gObj.currentViewData;\n      var trs = [].slice.call(this.getTable().querySelector(literals.tbody).children);\n\n      if (this.prevCurrentView.length) {\n        var prevLen = this.prevCurrentView.length;\n        var currentLen = dataSource.length;\n\n        if (prevLen === currentLen) {\n          for (var i = 0; i < currentLen; i++) {\n            if (this.parent.editSettings.mode === 'Batch' && trs[i].classList.contains('e-insertedrow')) {\n              trs.splice(i, 1);\n              --i;\n              continue;\n            }\n\n            newKeys[dataSource[i][key]] = oldKeys[this.prevCurrentView[i][key]] = i;\n            newIndexes[i] = dataSource[i][key];\n            oldRowElements[oldRowObjs[i].uid] = trs[i];\n            oldIndexes[i] = this.prevCurrentView[i][key];\n          }\n        } else {\n          for (var i = 0; i < currentLen; i++) {\n            newKeys[dataSource[i][key]] = i;\n            newIndexes[i] = dataSource[i][key];\n          }\n\n          for (var i = 0; i < prevLen; i++) {\n            if (this.parent.editSettings.mode === 'Batch' && trs[i].classList.contains('e-insertedrow')) {\n              trs.splice(i, 1);\n              --i;\n              continue;\n            }\n\n            oldRowElements[oldRowObjs[i].uid] = trs[i];\n            oldKeys[this.prevCurrentView[i][key]] = i;\n            oldIndexes[i] = this.prevCurrentView[i][key];\n          }\n        }\n      }\n\n      for (var i = 0; i < dataSource.length; i++) {\n        var oldIndex = oldKeys[dataSource[i][key]];\n\n        if (!isNullOrUndefined(oldIndex)) {\n          var isEqual = false;\n\n          if (this.mutableData) {\n            isEqual = this.objectEqualityChecker(this.prevCurrentView[oldIndex], dataSource[i]);\n          }\n\n          var tr = oldRowElements[oldRowObjs[oldIndex].uid];\n          newRowObjs.push(oldRowObjs[oldIndex]);\n\n          if (this.rowElements[oldIndex] && this.rowElements[oldIndex].getAttribute('data-uid') === newRowObjs[i].uid && (hasBatch && isNullOrUndefined(batchChangeKeys[newIndexes[i]]) || !hasBatch && (isEqual || this.prevCurrentView[oldIndex] === dataSource[i]))) {\n            if (oldIndex !== i) {\n              this.refreshImmutableContent(i, tr, newRowObjs[i]);\n            }\n\n            tbody.appendChild(tr);\n            continue;\n          }\n\n          if (hasBatch && !isNullOrUndefined(batchChangeKeys[newIndexes[i]]) || !this.mutableData && dataSource[i] !== this.prevCurrentView[oldIndex] || this.mutableData && !isEqual) {\n            oldRowObjs[oldIndex].setRowValue(dataSource[i]);\n          }\n\n          tbody.appendChild(tr);\n          this.refreshImmutableContent(i, tr, newRowObjs[i]);\n        } else {\n          var row = new RowRenderer(this.serviceLocator, null, gObj);\n          var modelData = this.generator.generateRows([dataSource[i]]);\n          newRowObjs.push(modelData[0]);\n          var tr = row.render(modelData[0], gObj.getColumns());\n          tbody.appendChild(tr);\n          this.refreshImmutableContent(i, tr, newRowObjs[i]);\n        }\n      }\n\n      this.rows = newRowObjs;\n      this.rowElements = [].slice.call(tbody.children);\n      remove(this.getTable().querySelector(literals.tbody));\n      this.getTable().appendChild(tbody);\n      this.parent.trigger(events.dataBound, {}, function () {\n        if (_this.parent.allowTextWrap) {\n          _this.parent.notify(events.freezeRender, {\n            case: 'textwrap'\n          });\n        }\n      });\n\n      if (args) {\n        var action = (args.requestType || '').toLowerCase() + '-complete';\n        this.parent.notify(action, args);\n      }\n    }\n  };\n\n  ContentRender.prototype.objectEqualityChecker = function (old, next) {\n    var keys = Object.keys(old);\n    var isEqual = true;\n\n    for (var i = 0; i < keys.length; i++) {\n      if (old[keys[i]] !== next[keys[i]]) {\n        var isDate = old[keys[i]] instanceof Date && next[keys[i]] instanceof Date;\n\n        if (!isDate || old[keys[i]].getTime() !== next[keys[i]].getTime()) {\n          isEqual = false;\n          break;\n        }\n      }\n    }\n\n    return isEqual;\n  };\n\n  ContentRender.prototype.getBatchEditedRecords = function (primaryKey, rows) {\n    var keys = {};\n    var changes = this.parent.getBatchChanges();\n    var changedRecords = [];\n    var addedRecords = [];\n\n    if (Object.keys(changes).length) {\n      changedRecords = changes.changedRecords;\n      addedRecords = changes.addedRecords;\n    }\n\n    var args = {\n      cancel: false\n    };\n    this.parent.notify(events.immutableBatchCancel, {\n      rows: rows,\n      args: args\n    });\n\n    if (addedRecords.length) {\n      if (this.parent.editSettings.newRowPosition === 'Bottom') {\n        rows.splice(rows.length - 1, addedRecords.length);\n      } else {\n        if (!args.cancel) {\n          rows.splice(0, addedRecords.length);\n        }\n      }\n    }\n\n    for (var i = 0; i < changedRecords.length; i++) {\n      keys[changedRecords[i][primaryKey]] = i;\n    }\n\n    return keys;\n  };\n\n  ContentRender.prototype.refreshImmutableContent = function (index, tr, row) {\n    row.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n\n    if (row.isAltRow) {\n      tr.classList.add('e-altrow');\n    } else {\n      tr.classList.remove('e-altrow');\n    }\n\n    row.index = index;\n    row.edit = undefined;\n    row.isDirty = false;\n    tr.setAttribute(literals.ariaRowIndex, index.toString());\n    this.updateCellIndex(tr, index);\n  };\n\n  ContentRender.prototype.updateCellIndex = function (rowEle, index) {\n    for (var i = 0; i < rowEle.cells.length; i++) {\n      rowEle.cells[i].setAttribute('index', index.toString());\n    }\n  };\n\n  return ContentRender;\n}();\n\nexport { ContentRender };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-grids/src/grid/renderer/content-renderer.js"],"names":["Droppable","isNullOrUndefined","extend","setStyleAttribute","remove","updateBlazorTemplate","getUpdateUsingRaf","appendChildren","setDisplayValue","events","RowRenderer","CellMergeRender","RowModelGenerator","GroupModelGenerator","isGroupAdaptive","literals","ContentRender","parent","serviceLocator","_this","rows","freezeRows","movableRows","freezeRowElements","currentInfo","prevCurrentView","isLoaded","viewColIndexes","drop","e","notify","columnDrop","target","droppedElement","infiniteCache","isRemove","visibleRows","visibleFrozenRows","rightFreezeRows","isAddRows","isInfiniteFreeze","useGroupCache","mutableData","rafCallback","args","arg","isFrozenGrid","enableVirtualization","mContentRows","slice","call","getMovableVirtualContent","getElementsByClassName","row","fContentRows","getFrozenVirtualContent","length","enableColumnVirtualization","requestType","mHdr","getMovableVirtualHeader","fHdr","getFrozenVirtualHeader","ariaService","setBusy","getPanel","querySelector","content","isDestroyed","isFrozen","renderFrozenRightContent","getFrozenRightRowsObject","contentReady","trigger","dataBound","allowTextWrap","freezeRender","case","action","toLowerCase","cancel","actionComplete","hideSpinner","getService","getDataModule","isRemote","generator","getModelGenerator","groupSettings","enableLazyLoading","on","columnVisibilityChanged","setVisible","colGroupRefresh","uiUpdate","enableAfterRender","refreshInfiniteModeBlocks","refreshContentRows","beforeCellFocused","destroy","droppableDestroy","prototype","byKey","keyArgs","pressedKey","undefined","renderPanel","gObj","div","element","gridContent","setOptions","busy","setPanel","createElement","className","innerDiv","appendChild","renderTable","contentDiv","virtualTable","virtualTrack","createContentTable","setTable","table","getTable","multiselectable","selectionSettings","type","initializeContentDrop","frozenRows","getHeaderContent","classList","add","id","firstElementChild","attrs","cellspacing","role","setColGroup","getHeaderTable","colGroup","cloneNode","getColGroup","tbody","currentViewData","dataSource","currentMovableRows","contentModule","isReact","rowTemplate","frag","document","createDocumentFragment","initialPageRecords","hdrfrag","columns","getColumns","tr","hdrTbody","frzCols","getFrozenColumns","trElement","isInfiniteScroll","enableInfiniteScrolling","rowElements","fCont","frozenContent","mCont","movableContent","cont","tbdy","tableName","some","value","emptyVcRows","modelData","virtualInfo","sentinelInfo","axis","generateRows","renderMovableContent","checkCache","setGroupCache","setInfiniteCache","idx","cells","index","setTbody","getTbody","isFrozenLeft","getFrozenMode","leftRight","frozenRight","registeredTemplate","template","templatetoclear","i","j","rootNodes","parentNode","push","destroyTemplate","renderTemplates","cellMerge","updateVirtualCells","startIndex","blockLoad","vcRows","top_1","scrollTop","offsets","top","offsets_1","vGroupOffsets","bSize","pageSettings","pageSize","values","Object","keys","map","key","m","direction","blockIndexes","Math","round","contentPanel","offsetHeight","scrollHeight","rowObject","isVFFrozenOnly","bIndex","page","data","mhdrData","vgenerator","splice","render","virtualFrozenHdrRefresh","len","setRowsInLazyGroup","indent","setInfiniteVisibleRows","isVFreorder","ensureFrozenHeaderRender","ensureVirtualFrozenHeaderRender","isExpand","expandChildGrid","rowTemplateID","elements","isHeader","copied","getRowTemplate","tagName","isTR","nodeName","querySelectorAll","lastElementChild","rowDataBound","isDataRow","colcount","toString","splitRows","getFrozenHeader","parentTable","parentElement","innerHTML","Number","height","style","setIsFrozen","beforeFragAppend","isVFTable","appendContent","frCont","getContent","renderNextFrozentPart","infiniteScrollModule","removeInfiniteRows","appendInfiniteContent","frozenLeft","vRows","maintainRows","infiniteScrollSettings","enableCache","currentPage","frozenCols","getGroupCache","initialGroupRows","getCurrentBlockInfiniteRecords","isFreeze","getRows","parseInt","getAttribute","ariaRowIndex","first","ceil","last","concat","getReorderedVFRows","getReorderedFrozenRows","getReorderedRows","fhdrData","getInfiniteRows","getInfiniteMovableRows","infiniteCacheRows","infiniteRows","panel","contentTable","getMovableRows","getRowElements","getMovableRowElements","setRowElements","colgroup","fRows","mRows","rowLen","cellLen","rightRows","rightLen","clone","k","testRow","r","needFullRefresh","getDataRows","infiniteData","infiniteRowVisibility","contentrows","filter","isDetailRow","c","clen","column","getNormalizedColumnIndex","uid","colIdx","getColumnIndexByUid","displayVal","visible","getFreezeTableName","left","getFrozenLeftColumnsCount","movable","getMovableColumnsCount","colG","childNodes","getFrozenRightDataRows","infiniteFreezeData","mTable","getMovableDataRows","infiniteMovableData","setDisplayNone","invokedFromMedia","hideAtMedia","updateMediaColumns","partialRefresh","isRowDragable","infiniteShowHide","isXaxis","getHeaderColGroup","replaceChild","gridHeader","droppable","accept","canSkip","allowGrouping","renderEmpty","setSelection","set","clearAll","setFreezeSelection","isSelected","getRowByIndex","getInfiniteRowIndex","firstRowIndex","getVirtualRowIndex","getMovableRowByIndex","module","enable","setRowObjects","immutableModeRendering","getPrimaryKeyFieldNames","oldKeys","newKeys","newRowObjs","oldIndexes","oldRowObjs","getRowsObject","batchChangeKeys","getBatchEditedRecords","newIndexes","hasBatch","oldRowElements","trs","children","prevLen","currentLen","editSettings","mode","contains","oldIndex","isEqual","objectEqualityChecker","refreshImmutableContent","setRowValue","old","next","isDate","Date","getTime","primaryKey","changes","getBatchChanges","changedRecords","addedRecords","immutableBatchCancel","newRowPosition","isAltRow","enableAltRow","edit","isDirty","setAttribute","updateCellIndex","rowEle"],"mappings":"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","sourcesContent":["import { Droppable } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, remove, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { getUpdateUsingRaf, appendChildren, setDisplayValue } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from './row-renderer';\nimport { CellMergeRender } from './cell-merge-renderer';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupModelGenerator } from '../services/group-model-generator';\nimport { isGroupAdaptive } from '../base/util';\nimport * as literals from '../base/string-literals';\n// eslint-disable-next-line valid-jsdoc\n/**\n * Content module is used to render grid content\n *\n * @hidden\n */\nvar ContentRender = /** @class */ (function () {\n    /**\n     * Constructor for content renderer module\n     *\n     * @param {IGrid} parent - specifies the Igrid\n     * @param {ServiceLocator} serviceLocator - specifies the service locator\n     */\n    function ContentRender(parent, serviceLocator) {\n        var _this = this;\n        this.rows = [];\n        this.freezeRows = [];\n        this.movableRows = [];\n        this.freezeRowElements = [];\n        /** @hidden */\n        this.currentInfo = {};\n        /** @hidden */\n        this.prevCurrentView = [];\n        this.isLoaded = true;\n        this.viewColIndexes = [];\n        this.drop = function (e) {\n            _this.parent.notify(events.columnDrop, { target: e.target, droppedElement: e.droppedElement });\n            remove(e.droppedElement);\n        };\n        this.infiniteCache = {};\n        this.isRemove = false;\n        this.visibleRows = [];\n        this.visibleFrozenRows = [];\n        this.rightFreezeRows = [];\n        this.isAddRows = false;\n        this.isInfiniteFreeze = false;\n        this.useGroupCache = false;\n        this.mutableData = false;\n        this.rafCallback = function (args) {\n            var arg = args;\n            return function () {\n                if (_this.parent.isFrozenGrid() && _this.parent.enableVirtualization) {\n                    var mContentRows = [].slice.call(_this.parent.getMovableVirtualContent().getElementsByClassName(literals.row));\n                    var fContentRows = [].slice.call(_this.parent.getFrozenVirtualContent().getElementsByClassName(literals.row));\n                    _this.isLoaded = !mContentRows ? false : mContentRows.length === fContentRows.length;\n                    if (_this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && _this.isLoaded) {\n                        var mHdr = [].slice.call(_this.parent.getMovableVirtualHeader().getElementsByClassName(literals.row));\n                        var fHdr = [].slice.call(_this.parent.getFrozenVirtualHeader().getElementsByClassName(literals.row));\n                        _this.isLoaded = mHdr.length === fHdr.length;\n                    }\n                }\n                _this.ariaService.setBusy(_this.getPanel().querySelector('.' + literals.content), false);\n                if (_this.parent.isDestroyed) {\n                    return;\n                }\n                var rows = _this.rows.slice(0);\n                if (_this.parent.isFrozenGrid()) {\n                    rows = args.isFrozen ? _this.freezeRows : args.renderFrozenRightContent ? _this.parent.getFrozenRightRowsObject()\n                        : _this.movableRows;\n                }\n                _this.parent.notify(events.contentReady, { rows: rows, args: arg });\n                if (_this.isLoaded) {\n                    _this.parent.trigger(events.dataBound, {}, function () {\n                        if (_this.parent.allowTextWrap) {\n                            _this.parent.notify(events.freezeRender, { case: 'textwrap' });\n                        }\n                    });\n                }\n                if (arg) {\n                    var action = (arg.requestType || '').toLowerCase() + '-complete';\n                    _this.parent.notify(action, arg);\n                    if (args.requestType === 'batchsave') {\n                        args.cancel = false;\n                        _this.parent.trigger(events.actionComplete, args);\n                    }\n                }\n                if (_this.isLoaded) {\n                    _this.parent.hideSpinner();\n                }\n            };\n        };\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.ariaService = this.serviceLocator.getService('ariaService');\n        this.mutableData = this.parent.getDataModule().isRemote();\n        this.generator = this.getModelGenerator();\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization\n            && !this.parent.groupSettings.enableLazyLoading) {\n            this.parent.on(events.columnVisibilityChanged, this.setVisible, this);\n        }\n        this.parent.on(events.colGroupRefresh, this.colGroupRefresh, this);\n        this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n        this.parent.on(events.refreshInfiniteModeBlocks, this.refreshContentRows, this);\n        this.parent.on(events.beforeCellFocused, this.beforeCellFocused, this);\n        this.parent.on(events.destroy, this.droppableDestroy, this);\n    }\n    ContentRender.prototype.beforeCellFocused = function (e) {\n        if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n            this.pressedKey = e.keyArgs.action;\n        }\n        else {\n            this.pressedKey = undefined;\n        }\n    };\n    /**\n     * The function is used to render grid content div\n     *\n     * @returns {void}\n     */\n    ContentRender.prototype.renderPanel = function () {\n        var gObj = this.parent;\n        var div = this.parent.element.querySelector('.' + literals.gridContent);\n        if (div) {\n            this.ariaService.setOptions(this.parent.element.querySelector('.' + literals.content), { busy: false });\n            this.setPanel(div);\n            return;\n        }\n        div = this.parent.createElement('div', { className: literals.gridContent });\n        var innerDiv = this.parent.createElement('div', {\n            className: literals.content\n        });\n        this.ariaService.setOptions(innerDiv, { busy: false });\n        div.appendChild(innerDiv);\n        this.setPanel(div);\n        gObj.element.appendChild(div);\n    };\n    /**\n     * The function is used to render grid content table\n     *\n     * @returns {void}\n     */\n    ContentRender.prototype.renderTable = function () {\n        var contentDiv = this.getPanel();\n        var virtualTable = contentDiv.querySelector('.e-virtualtable');\n        var virtualTrack = contentDiv.querySelector('.e-virtualtrack');\n        if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {\n            remove(virtualTable);\n            remove(virtualTrack);\n        }\n        contentDiv.appendChild(this.createContentTable('_content_table'));\n        this.setTable(contentDiv.querySelector('.' + literals.table));\n        this.ariaService.setOptions(this.getTable(), {\n            multiselectable: this.parent.selectionSettings.type === 'Multiple'\n        });\n        this.initializeContentDrop();\n        if (this.parent.frozenRows) {\n            this.parent.getHeaderContent().classList.add('e-frozenhdrcont');\n        }\n    };\n    /**\n     * The function is used to create content table elements\n     *\n     * @param {string} id - specifies the id\n     * @returns {Element} returns the element\n     * @hidden\n     */\n    ContentRender.prototype.createContentTable = function (id) {\n        var innerDiv = this.getPanel().firstElementChild;\n        if (this.getTable()) {\n            remove(this.getTable());\n        }\n        var table = innerDiv.querySelector('.' + literals.table) ? innerDiv.querySelector('.' + literals.table) :\n            this.parent.createElement('table', {\n                className: literals.table, attrs: {\n                    cellspacing: '0.25px', role: 'grid',\n                    id: this.parent.element.id + id\n                }\n            });\n        this.setColGroup(this.parent.getHeaderTable().querySelector(literals.colGroup).cloneNode(true));\n        table.appendChild(this.getColGroup());\n        table.appendChild(this.parent.createElement(literals.tbody));\n        innerDiv.appendChild(table);\n        return innerDiv;\n    };\n    /**\n     * Refresh the content of the Grid.\n     *\n     * @param {NotifyArgs} args - specifies the args\n     * @returns {void}\n     */\n    // tslint:disable-next-line:max-func-body-length\n    ContentRender.prototype.refreshContentRows = function (args) {\n        var _this = this;\n        if (args === void 0) { args = {}; }\n        var gObj = this.parent;\n        if (gObj.currentViewData.length === 0) {\n            return;\n        }\n        var dataSource = this.currentMovableRows || gObj.currentViewData;\n        var contentModule = this.parent.contentModule;\n        var isReact = gObj.isReact && !isNullOrUndefined(gObj.rowTemplate);\n        var frag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n        if (!this.initialPageRecords) {\n            this.initialPageRecords = extend([], dataSource);\n        }\n        var hdrfrag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n        var columns = gObj.getColumns();\n        var tr;\n        var hdrTbody;\n        var frzCols = gObj.getFrozenColumns();\n        var isFrozenGrid = this.parent.isFrozenGrid();\n        var trElement;\n        var row = new RowRenderer(this.serviceLocator, null, this.parent);\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling\n            && args.requestType === 'infiniteScroll';\n        this.rowElements = [];\n        this.rows = [];\n        var fCont = this.getPanel().querySelector('.' + literals.frozenContent);\n        var mCont = this.getPanel().querySelector('.' + literals.movableContent);\n        var cont = this.getPanel().querySelector('.' + literals.content);\n        var tbdy;\n        var tableName;\n        if (isGroupAdaptive(gObj)) {\n            if (['sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder']\n                .some(function (value) { return args.requestType === value; })) {\n                this.emptyVcRows();\n            }\n        }\n        var modelData;\n        if (this.parent.enableVirtualization && this.parent.isFrozenGrid()) {\n            if (this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll'\n                && args.virtualInfo.sentinelInfo.axis === 'X') {\n                modelData = this.parent.contentModule.generateRows(dataSource, args);\n                args.renderMovableContent = true;\n            }\n            modelData = this.parent.contentModule.generateRows(dataSource, args);\n        }\n        else {\n            modelData = this.checkCache(modelData, args);\n            if (!this.isAddRows && !this.useGroupCache) {\n                modelData = this.generator.generateRows(dataSource, args);\n            }\n        }\n        this.setGroupCache(modelData, args);\n        this.parent.notify(events.setInfiniteCache, { isInfiniteScroll: isInfiniteScroll, modelData: modelData, args: args });\n        var idx = modelData[0].cells[0].index;\n        if (isFrozenGrid) {\n            tableName = contentModule.setTbody(modelData, args);\n            tbdy = contentModule.getTbody(tableName);\n        }\n        var isFrozenLeft = this.parent.getFrozenMode() === literals.leftRight && tableName === literals.frozenRight;\n        /* eslint-disable */\n        if (args.requestType !== 'infiniteScroll' && this.parent.registeredTemplate\n            && this.parent.registeredTemplate.template && !args.isFrozen && !isFrozenLeft) {\n            var templatetoclear = [];\n            for (var i = 0; i < this.parent.registeredTemplate.template.length; i++) {\n                for (var j = 0; j < this.parent.registeredTemplate.template[i].rootNodes.length; j++) {\n                    if (isNullOrUndefined(this.parent.registeredTemplate.template[i].rootNodes[j].parentNode)) {\n                        templatetoclear.push(this.parent.registeredTemplate.template[i]);\n                        /* eslint-enable */\n                    }\n                }\n            }\n            this.parent.destroyTemplate(['template'], templatetoclear);\n        }\n        if (this.parent.isReact && args.requestType !== 'infiniteScroll' && !args.isFrozen) {\n            this.parent.destroyTemplate(['columnTemplate', 'rowTemplate', 'detailTemplate', 'captionTemplate', 'commandsTemplate']);\n            this.parent.renderTemplates();\n        }\n        if (this.parent.enableColumnVirtualization) {\n            var cellMerge = new CellMergeRender(this.serviceLocator, this.parent);\n            cellMerge.updateVirtualCells(modelData);\n        }\n        if (!isFrozenGrid) {\n            this.tbody = this.getTable().querySelector(literals.tbody);\n        }\n        var startIndex = 0;\n        var blockLoad = true;\n        if (isGroupAdaptive(gObj) && gObj.vcRows.length) {\n            var top_1 = 'top';\n            var scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top :\n                (!isNullOrUndefined(args.scrollTop) ? args.scrollTop[top_1] : 0);\n            if (scrollTop !== 0) {\n                var offsets_1 = gObj.vGroupOffsets;\n                var bSize = gObj.pageSettings.pageSize / 2;\n                var values = Object.keys(offsets_1).map(function (key) { return offsets_1[key]; });\n                for (var m = 0; m < values.length; m++) {\n                    if (scrollTop < values[m]) {\n                        if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === 'up') {\n                            args.virtualInfo.blockIndexes = m === 0 || m === 1 ? [1, 2] : [m, m + 1];\n                            startIndex = m === 0 || m === 1 ? 0 : (m * bSize);\n                            break;\n                        }\n                        else {\n                            args.virtualInfo.blockIndexes = m === 0 || m === 1 ? [1, 2] : [m, m + 1];\n                            startIndex = m === 0 || m === 1 ? 0 : (m) * bSize;\n                            break;\n                        }\n                    }\n                }\n                if (Math.round(scrollTop + this.contentPanel.firstElementChild.offsetHeight) >=\n                    this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {\n                    blockLoad = false;\n                }\n            }\n        }\n        var isVFFrozenOnly = gObj.frozenRows && !gObj.isFrozenGrid() && this.parent.enableVirtualization\n            && args.requestType === 'reorder';\n        if ((gObj.frozenRows && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X') || isVFFrozenOnly) {\n            var bIndex = args.virtualInfo.blockIndexes;\n            var page = args.virtualInfo.page;\n            args.virtualInfo.blockIndexes = [1, 2];\n            if (isVFFrozenOnly) {\n                args.virtualInfo.page = 1;\n            }\n            var data = isVFFrozenOnly ? this.initialPageRecords : dataSource;\n            var mhdrData = this.vgenerator\n                .generateRows(data, args);\n            mhdrData.splice(this.parent.frozenRows);\n            for (var i = 0; i < this.parent.frozenRows; i++) {\n                mhdrData[i].cells.splice(0, this.parent.getFrozenColumns());\n                tr = row.render(mhdrData[i], columns);\n                hdrfrag.appendChild(tr);\n            }\n            args.virtualInfo.blockIndexes = bIndex;\n            args.virtualInfo.page = page;\n            if (isVFFrozenOnly && args.virtualInfo.page === 1) {\n                modelData.splice(0, this.parent.frozenRows);\n            }\n        }\n        this.virtualFrozenHdrRefresh(hdrfrag, modelData, row, args, dataSource, columns);\n        for (var i = startIndex, len = modelData.length; i < len; i++) {\n            this.rows.push(modelData[i]);\n            if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n                this.setRowsInLazyGroup(modelData[i], i);\n                if (isNullOrUndefined(modelData[i].indent)) {\n                    continue;\n                }\n            }\n            this.setInfiniteVisibleRows(args, modelData[i], tableName);\n            if (isGroupAdaptive(gObj) && this.rows.length >= (gObj.pageSettings.pageSize) && blockLoad) {\n                break;\n            }\n            if (!gObj.rowTemplate) {\n                tr = row.render(modelData[i], columns);\n                var isVFreorder = this.ensureFrozenHeaderRender(args);\n                if (gObj.frozenRows && i < gObj.frozenRows && !isInfiniteScroll && args.requestType !== 'virtualscroll' && isVFreorder\n                    && this.ensureVirtualFrozenHeaderRender(args)) {\n                    hdrfrag.appendChild(tr);\n                }\n                else {\n                    frag.appendChild(tr);\n                }\n                if (modelData[i].isExpand) {\n                    gObj.notify(events.expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);\n                }\n            }\n            else {\n                var rowTemplateID = gObj.element.id + 'rowTemplate';\n                var elements = void 0;\n                if (gObj.isReact) {\n                    var isHeader = gObj.frozenRows && i < gObj.frozenRows;\n                    var copied = extend({ index: i }, dataSource[i]);\n                    gObj.getRowTemplate()(copied, gObj, 'rowTemplate', rowTemplateID, null, null, isHeader ? hdrfrag : frag);\n                    gObj.renderTemplates();\n                }\n                else {\n                    elements = gObj.getRowTemplate()(extend({ index: i }, dataSource[i]), gObj, 'rowTemplate', rowTemplateID);\n                }\n                if (!gObj.isReact && elements[0].tagName === 'TBODY') {\n                    for (var j = 0; j < elements.length; j++) {\n                        var isTR = elements[j].nodeName.toLowerCase() === 'tr';\n                        if (isTR || (elements[j].querySelectorAll && elements[j].querySelectorAll('tr').length)) {\n                            tr = isTR ? elements[j] : elements[j].querySelector('tr');\n                        }\n                    }\n                    if (gObj.frozenRows && i < gObj.frozenRows) {\n                        hdrfrag.appendChild(tr);\n                    }\n                    else {\n                        frag.appendChild(tr);\n                    }\n                }\n                else {\n                    if (gObj.frozenRows && i < gObj.frozenRows) {\n                        tr = !gObj.isReact ? appendChildren(hdrfrag, elements) : hdrfrag.lastElementChild;\n                    }\n                    else {\n                        // frag.appendChild(tr);\n                        if (!gObj.isReact) {\n                            tr = appendChildren(frag, elements);\n                        }\n                        trElement = gObj.isReact ? frag.lastElementChild : tr.lastElementChild;\n                    }\n                }\n                var arg = { data: modelData[i].data, row: trElement ? trElement : tr };\n                this.parent.trigger(events.rowDataBound, arg);\n            }\n            if (modelData[i].isDataRow) {\n                this.rowElements.push(tr);\n            }\n            this.ariaService.setOptions(this.getTable(), { colcount: gObj.getColumns().length.toString() });\n        }\n        if (isFrozenGrid) {\n            contentModule.splitRows(tableName);\n        }\n        if ((gObj.frozenRows && args.requestType !== 'virtualscroll' && !isInfiniteScroll && this.ensureVirtualFrozenHeaderRender(args))\n            || (args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === 'X')) {\n            hdrTbody = isFrozenGrid ? contentModule.getFrozenHeader(tableName) : gObj.getHeaderTable().querySelector(literals.tbody);\n            if (isReact) {\n                var parentTable = hdrTbody.parentElement;\n                remove(hdrTbody);\n                parentTable.appendChild(hdrfrag);\n            }\n            else {\n                hdrTbody.innerHTML = '';\n                hdrTbody.appendChild(hdrfrag);\n            }\n        }\n        if (!gObj.enableVirtualization && gObj.frozenRows && idx === 0 && cont.offsetHeight === Number(gObj.height)) {\n            cont.style.height = (cont.offsetHeight - hdrTbody.offsetHeight) + 'px';\n        }\n        args.rows = this.rows.slice(0);\n        if (isFrozenGrid) {\n            contentModule.setIsFrozen(args, tableName);\n        }\n        this.index = idx;\n        getUpdateUsingRaf(function () {\n            _this.parent.notify(events.beforeFragAppend, args);\n            var isVFTable = _this.parent.enableVirtualization && _this.parent.isFrozenGrid();\n            if (!_this.parent.enableVirtualization && !isInfiniteScroll) {\n                if (_this.parent.isFrozenGrid()) {\n                    remove(contentModule.getTbody(tableName));\n                    tbdy = _this.parent.createElement(literals.tbody);\n                }\n                else {\n                    remove(_this.tbody);\n                    _this.tbody = _this.parent.createElement(literals.tbody);\n                }\n            }\n            if (isFrozenGrid && !isVFTable && !_this.parent.enableInfiniteScrolling) {\n                _this.appendContent(tbdy, frag, args, tableName);\n            }\n            else {\n                if (gObj.rowTemplate) {\n                    updateBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate', gObj);\n                }\n                if (isVFTable) {\n                    if (args.renderFrozenRightContent) {\n                        var frCont = gObj.getContent().querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n                        _this.appendContent(frCont, frag, args);\n                    }\n                    else if (!args.renderMovableContent) {\n                        _this.appendContent(fCont.querySelector(literals.tbody), frag, args);\n                    }\n                    else {\n                        _this.appendContent(mCont.querySelector(literals.tbody), frag, args);\n                        args.renderMovableContent = false;\n                    }\n                    if (!_this.parent.getFrozenColumns()) {\n                        contentModule.renderNextFrozentPart(args, tableName);\n                    }\n                }\n                else {\n                    if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && _this.parent.enableInfiniteScrolling) {\n                        _this.isAddRows = false;\n                        _this.parent.notify(events.removeInfiniteRows, { args: args });\n                        _this.parent.notify(events.appendInfiniteContent, {\n                            tbody: tbdy ? tbdy : _this.tbody, frag: frag, args: args, rows: _this.rows,\n                            rowElements: _this.rowElements, visibleRows: _this.visibleRows,\n                            tableName: tableName\n                        });\n                        if (!frzCols && isFrozenGrid) {\n                            if ((gObj.getFrozenMode() !== literals.leftRight\n                                && (tableName === literals.frozenLeft || tableName === literals.frozenRight))\n                                || (gObj.getFrozenMode() === literals.leftRight\n                                    && (tableName === literals.frozenLeft || tableName === 'movable'))) {\n                                _this.refreshContentRows(extend({}, args));\n                            }\n                        }\n                    }\n                    else {\n                        _this.useGroupCache = false;\n                        _this.appendContent(_this.tbody, frag, args);\n                    }\n                }\n            }\n            if (frzCols) {\n                contentModule.renderNextFrozentPart(args, tableName);\n            }\n            frag = null;\n        }, this.rafCallback(extend({}, args)));\n    };\n    ContentRender.prototype.emptyVcRows = function () {\n        this.parent.vcRows = [];\n        this.parent.vRows = [];\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ContentRender.prototype.appendContent = function (tbody, frag, args, tableName) {\n        var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);\n        if (isReact) {\n            this.getTable().appendChild(frag);\n        }\n        else {\n            tbody.appendChild(frag);\n            this.getTable().appendChild(tbody);\n        }\n    };\n    ContentRender.prototype.setRowsInLazyGroup = function (row, index) {\n        if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n            this.parent.contentModule.maintainRows(row, index);\n        }\n    };\n    ContentRender.prototype.setGroupCache = function (data, args) {\n        if (!this.useGroupCache && this.parent.groupSettings.enableLazyLoading) {\n            this.parent.notify(events.setGroupCache, { args: args, data: data });\n        }\n    };\n    ContentRender.prototype.ensureFrozenHeaderRender = function (args) {\n        return !((this.parent.enableVirtualization\n            && (args.requestType === 'reorder' || args.requestType === 'refresh')) || (this.parent.infiniteScrollSettings.enableCache\n            && this.parent.frozenRows && this.parent.infiniteScrollModule.requestType === 'delete'\n            && this.parent.pageSettings.currentPage !== 1));\n    };\n    ContentRender.prototype.ensureVirtualFrozenHeaderRender = function (args) {\n        return !(this.parent.enableVirtualization && args.requestType === 'delete');\n    };\n    ContentRender.prototype.checkCache = function (modelData, args) {\n        if (this.parent.infiniteScrollSettings.enableCache && args.requestType === 'infiniteScroll') {\n            var index = args.isFrozen ? 1 : 0;\n            var frozenCols = this.parent.isFrozenGrid();\n            this.isAddRows = !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]);\n            if (frozenCols && !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n                this.isAddRows = this.infiniteCache[this.parent.pageSettings.currentPage][index].length !== 0;\n            }\n            if (this.isAddRows) {\n                var data = !frozenCols ? this.infiniteCache[this.parent.pageSettings.currentPage]\n                    : this.infiniteCache[this.parent.pageSettings.currentPage][index];\n                modelData = this.parent.pageSettings.currentPage === 1 ? data.slice(this.parent.frozenRows) : data;\n            }\n            return modelData;\n        }\n        if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length &&\n            (args.requestType === 'paging' || args.requestType === 'columnstate' || args.requestType === 'reorder')\n            && this.parent.contentModule.getGroupCache()[this.parent.pageSettings.currentPage]) {\n            this.useGroupCache = true;\n            return this.parent.contentModule.initialGroupRows(args.requestType === 'reorder');\n        }\n        return null;\n    };\n    ContentRender.prototype.setInfiniteVisibleRows = function (args, data, tableName) {\n        var frozenCols = this.parent.isFrozenGrid();\n        if (this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache) {\n            if (frozenCols) {\n                if (tableName === literals.frozenLeft || (this.parent.getFrozenMode() === 'Right' && tableName === literals.frozenRight)) {\n                    this.visibleFrozenRows.push(data);\n                }\n                else if (tableName === 'movable') {\n                    this.visibleRows.push(data);\n                }\n                else {\n                    this.rightFreezeRows.push(data);\n                }\n            }\n            else if (!this.parent.infiniteScrollSettings.enableCache) {\n                this.visibleRows.push(data);\n            }\n        }\n    };\n    ContentRender.prototype.getCurrentBlockInfiniteRecords = function (isFreeze) {\n        var data = [];\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            if (!Object.keys(this.infiniteCache).length) {\n                return [];\n            }\n            var frozenCols = this.parent.isFrozenGrid();\n            var rows = this.parent.getRows();\n            var index = parseInt(rows[this.parent.frozenRows].getAttribute(literals.ariaRowIndex), 10);\n            var first = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);\n            index = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10);\n            var last = Math.ceil(index / this.parent.pageSettings.pageSize);\n            if (frozenCols) {\n                var idx = isFreeze ? 0 : 1;\n                for (var i = first; i <= last; i++) {\n                    data = !data.length ? this.infiniteCache[i][idx]\n                        : data.concat(this.infiniteCache[i][idx]);\n                }\n                if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n                    data = this.infiniteCache[1][idx].slice(0, this.parent.frozenRows).concat(data);\n                }\n            }\n            else {\n                for (var i = first; i <= last; i++) {\n                    data = !data.length ? this.infiniteCache[i] : data.concat(this.infiniteCache[i]);\n                }\n                if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n                    data = this.infiniteCache[1].slice(0, this.parent.frozenRows).concat(data);\n                }\n            }\n        }\n        return data;\n    };\n    ContentRender.prototype.getReorderedVFRows = function (args) {\n        return this.parent.contentModule.getReorderedFrozenRows(args);\n    };\n    ContentRender.prototype.getReorderedRows = function (args) {\n        return this.parent.contentModule.getReorderedFrozenRows(args);\n    };\n    ContentRender.prototype.virtualFrozenHdrRefresh = function (hdrfrag, modelData, row, args, dataSource, columns) {\n        if (this.parent.frozenRows && this.parent.enableVirtualization\n            && (args.requestType === 'reorder' || args.requestType === 'refresh')) {\n            var tr = void 0;\n            var fhdrData = [];\n            if (this.parent.isFrozenGrid()) {\n                this.currentMovableRows = dataSource;\n                fhdrData = this.getReorderedVFRows(args);\n            }\n            else {\n                fhdrData = this.getReorderedRows(args);\n            }\n            for (var i = 0; i < fhdrData.length; i++) {\n                tr = row.render(fhdrData[i], columns);\n                hdrfrag.appendChild(tr);\n            }\n            if (args.virtualInfo.page === 1) {\n                modelData.splice(0, this.parent.frozenRows);\n            }\n            if (args.renderMovableContent) {\n                this.parent.currentViewData = this.currentMovableRows;\n                this.currentMovableRows = null;\n            }\n        }\n    };\n    ContentRender.prototype.getInfiniteRows = function () {\n        var rows = [];\n        var frozenCols = this.parent.isFrozenGrid();\n        if (this.parent.enableInfiniteScrolling) {\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                var keys = Object.keys(this.infiniteCache);\n                for (var i = 0; i < keys.length; i++) {\n                    rows = !frozenCols ? rows.concat(this.infiniteCache[keys[i]]) : rows.concat(this.infiniteCache[keys[i]][0]);\n                }\n            }\n            else {\n                rows = frozenCols ? this.visibleFrozenRows : this.visibleRows;\n            }\n        }\n        return rows;\n    };\n    ContentRender.prototype.getInfiniteMovableRows = function () {\n        var infiniteCacheRows = this.getCurrentBlockInfiniteRecords();\n        var infiniteRows = this.parent.enableInfiniteScrolling ? infiniteCacheRows.length ? infiniteCacheRows\n            : this.visibleRows : [];\n        return infiniteRows;\n    };\n    /**\n     * Get the content div element of grid\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getPanel = function () {\n        return this.contentPanel;\n    };\n    /**\n     * Set the content div element of grid\n     *\n     * @param  {Element} panel - specifies the panel\n     * @returns {void}\n     */\n    ContentRender.prototype.setPanel = function (panel) {\n        this.contentPanel = panel;\n    };\n    /**\n     * Get the content table element of grid\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getTable = function () {\n        return this.contentTable;\n    };\n    /**\n     * Set the content table element of grid\n     *\n     * @param  {Element} table - specifies the table\n     * @returns {void}\n     */\n    ContentRender.prototype.setTable = function (table) {\n        this.contentTable = table;\n    };\n    /**\n     * Get the Movable Row collection in the Freeze pane Grid.\n     *\n     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n     */\n    ContentRender.prototype.getRows = function () {\n        var infiniteRows = this.getInfiniteRows();\n        return infiniteRows.length ? infiniteRows : this.parent.getFrozenColumns() ? this.freezeRows : this.rows;\n    };\n    /**\n     * Get the Movable Row collection in the Freeze pane Grid.\n     *\n     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n     */\n    ContentRender.prototype.getMovableRows = function () {\n        var infiniteRows = this.getInfiniteMovableRows();\n        return infiniteRows.length ? infiniteRows : this.movableRows;\n    };\n    /**\n     * Get the content table data row elements\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getRowElements = function () {\n        return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;\n    };\n    /**\n     * Get the Freeze pane movable content table data row elements\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getMovableRowElements = function () {\n        return this.rowElements;\n    };\n    /**\n     * Get the content table data row elements\n     *\n     * @param {Element[]} elements - specifies the elements\n     * @returns {void}\n     */\n    ContentRender.prototype.setRowElements = function (elements) {\n        this.rowElements = elements;\n    };\n    /**\n     * Get the header colgroup element\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getColGroup = function () {\n        return this.colgroup;\n    };\n    /**\n     * Set the header colgroup element\n     *\n     * @param {Element} colGroup - specifies the colgroup\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.setColGroup = function (colGroup) {\n        if (!isNullOrUndefined(colGroup)) {\n            colGroup.id = 'content-' + colGroup.id;\n        }\n        return this.colgroup = colGroup;\n    };\n    /**\n     * Function to hide content table column based on visible property\n     *\n     * @param {Column[]} columns - specifies the column\n     * @returns {void}\n     */\n    ContentRender.prototype.setVisible = function (columns) {\n        var gObj = this.parent;\n        var isFrozenGrid = this.parent.isFrozenGrid();\n        var frzCols = gObj.getFrozenColumns();\n        var rows = [];\n        if (isFrozenGrid) {\n            var fRows = this.freezeRows;\n            var mRows = this.movableRows;\n            var rowLen = fRows.length;\n            var cellLen = void 0;\n            var rightRows = [];\n            if (gObj.getFrozenMode() === literals.leftRight) {\n                rightRows = gObj.getFrozenRightRowsObject();\n            }\n            for (var i = 0, row = void 0; i < rowLen; i++) {\n                cellLen = mRows[i].cells.length;\n                var rightLen = rightRows.length ? rightRows[i].cells.length : 0;\n                row = fRows[i].clone();\n                for (var j = 0; j < cellLen; j++) {\n                    row.cells.push(mRows[i].cells[j]);\n                }\n                for (var k = 0; k < rightLen; k++) {\n                    row.cells.push(rightRows[i].cells[k]);\n                }\n                rows.push(row);\n            }\n        }\n        else {\n            rows = this.getRows();\n        }\n        var testRow;\n        rows.some(function (r) { if (r.isDataRow) {\n            testRow = r;\n        } return r.isDataRow; });\n        var needFullRefresh = true;\n        if (!gObj.groupSettings.columns.length && testRow) {\n            needFullRefresh = false;\n        }\n        var tr = gObj.getDataRows();\n        var args = {};\n        var infiniteData = this.infiniteRowVisibility();\n        var contentrows = infiniteData ? infiniteData\n            : this.rows.filter(function (row) { return !row.isDetailRow; });\n        for (var c = 0, clen = columns.length; c < clen; c++) {\n            var column = columns[c];\n            var idx = this.parent.getNormalizedColumnIndex(column.uid);\n            var colIdx = this.parent.getColumnIndexByUid(column.uid);\n            var displayVal = column.visible === true ? '' : 'none';\n            if (idx !== -1 && testRow && idx < testRow.cells.length) {\n                if (isFrozenGrid) {\n                    if (column.getFreezeTableName() !== 'movable') {\n                        if (column.getFreezeTableName() === literals.frozenRight) {\n                            var left = this.parent.getFrozenLeftColumnsCount();\n                            var movable = this.parent.getMovableColumnsCount();\n                            colIdx = idx = idx - (left + movable);\n                            var colG = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(literals.colGroup);\n                            setStyleAttribute(colG.childNodes[idx], { 'display': displayVal });\n                            contentrows = gObj.getFrozenRightRowsObject();\n                            tr = gObj.getFrozenRightDataRows();\n                        }\n                        else {\n                            setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });\n                            var infiniteFreezeData = this.infiniteRowVisibility(true);\n                            contentrows = infiniteFreezeData ? infiniteFreezeData : this.freezeRows;\n                            tr = gObj.getDataRows();\n                        }\n                    }\n                    else {\n                        var mTable = gObj.getContent().querySelector('.' + literals.movableContent).querySelector(literals.colGroup);\n                        colIdx = idx = idx - frzCols - this.parent.getFrozenLeftColumnsCount();\n                        setStyleAttribute(mTable.childNodes[idx], { 'display': displayVal });\n                        tr = gObj.getMovableDataRows();\n                        var infiniteMovableData = this.infiniteRowVisibility();\n                        contentrows = infiniteMovableData ? infiniteMovableData : this.movableRows;\n                    }\n                }\n                else {\n                    setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });\n                }\n            }\n            if (!needFullRefresh) {\n                this.setDisplayNone(tr, colIdx, displayVal, contentrows);\n            }\n            if (!this.parent.invokedFromMedia && column.hideAtMedia) {\n                this.parent.updateMediaColumns(column);\n            }\n            this.parent.invokedFromMedia = false;\n        }\n        if (needFullRefresh) {\n            this.refreshContentRows({ requestType: 'refresh' });\n        }\n        else {\n            if (!this.parent.getFrozenColumns()) {\n                this.parent.notify(events.partialRefresh, { rows: contentrows, args: args });\n            }\n            else {\n                this.parent.notify(events.partialRefresh, { rows: this.freezeRows, args: { isFrozen: true, rows: this.freezeRows } });\n                this.parent.notify(events.partialRefresh, { rows: this.movableRows, args: { isFrozen: false, rows: this.movableRows } });\n            }\n        }\n    };\n    /**\n     * @param {Object} tr - specifies the trr\n     * @param {number} idx - specifies the idx\n     * @param {string} displayVal - specifies the displayval\n     * @param {Row<Column>} rows - specifies the rows\n     * @returns {void}\n     * @hidden\n     */\n    ContentRender.prototype.setDisplayNone = function (tr, idx, displayVal, rows) {\n        setDisplayValue(tr, idx, displayVal, rows, this.parent, this.parent.isRowDragable());\n        this.parent.notify(events.infiniteShowHide, { visible: displayVal, index: idx, isFreeze: this.isInfiniteFreeze });\n    };\n    ContentRender.prototype.infiniteRowVisibility = function (isFreeze) {\n        var infiniteData;\n        if (this.parent.enableInfiniteScrolling) {\n            this.isInfiniteFreeze = isFreeze;\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                infiniteData = isFreeze ? this.getCurrentBlockInfiniteRecords(true) : this.getCurrentBlockInfiniteRecords();\n            }\n            else {\n                infiniteData = isFreeze ? this.visibleFrozenRows : this.visibleRows;\n            }\n        }\n        return infiniteData;\n    };\n    ContentRender.prototype.colGroupRefresh = function () {\n        if (this.getColGroup()) {\n            var colGroup = void 0;\n            if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns()\n                && this.parent.contentModule.isXaxis()) {\n                colGroup = this.parent.getMovableVirtualHeader().querySelector(literals.colGroup).cloneNode(true);\n            }\n            else {\n                colGroup = this.getHeaderColGroup();\n            }\n            this.getTable().replaceChild(colGroup, this.getColGroup());\n            this.setColGroup(colGroup);\n        }\n    };\n    ContentRender.prototype.getHeaderColGroup = function () {\n        return this.parent.element.querySelector('.' + literals.gridHeader).querySelector(literals.colGroup).cloneNode(true);\n    };\n    ContentRender.prototype.initializeContentDrop = function () {\n        var gObj = this.parent;\n        this.droppable = new Droppable(gObj.element, {\n            accept: '.e-dragclone',\n            drop: this.drop\n        });\n    };\n    ContentRender.prototype.droppableDestroy = function () {\n        if (this.droppable && !this.droppable.isDestroyed) {\n            this.droppable.destroy();\n        }\n    };\n    ContentRender.prototype.canSkip = function (column, row, index) {\n        /**\n         * Skip the toggle visiblity operation when one of the following success\n         * 1. Grid has empty records\n         * 2. column visible property is unchanged\n         * 3. cell`s isVisible property is same as column`s visible property.\n         */\n        return isNullOrUndefined(row) || //(1)\n            isNullOrUndefined(column.visible) || //(2)\n            row.cells[index].visible === column.visible; //(3)\n    };\n    ContentRender.prototype.getModelGenerator = function () {\n        return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n    };\n    ContentRender.prototype.renderEmpty = function (tbody) {\n        this.getTable().appendChild(tbody);\n        if (this.parent.frozenRows) {\n            this.parent.getHeaderContent().querySelector(literals.tbody).innerHTML = '';\n        }\n    };\n    ContentRender.prototype.setSelection = function (uid, set, clearAll) {\n        this.parent.notify(events.setFreezeSelection, { uid: uid, set: set, clearAll: clearAll });\n        var isFrozen = this.parent.isFrozenGrid();\n        if (isFrozen && this.parent.enableVirtualization) {\n            return;\n        }\n        if (isFrozen) {\n            var rows = this.getMovableRows().filter(function (row) { return clearAll || uid === row.uid; });\n            for (var i = 0; i < rows.length; i++) {\n                rows[i].isSelected = set;\n            }\n        }\n        var row = this.getRows().filter(function (row) { return clearAll || uid === row.uid; });\n        for (var j = 0; j < row.length; j++) {\n            row[j].isSelected = set;\n            var cells = row[j].cells;\n            for (var k = 0; k < cells.length; k++) {\n                cells[k].isSelected = set;\n            }\n        }\n    };\n    ContentRender.prototype.getRowByIndex = function (index) {\n        index = this.getInfiniteRowIndex(index);\n        return this.parent.getDataRows()[index];\n    };\n    ContentRender.prototype.getInfiniteRowIndex = function (index) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            var fRows = this.parent.frozenRows;\n            var idx = fRows > index ? 0 : fRows;\n            var firstRowIndex = parseInt(this.parent.getRows()[idx].getAttribute(literals.ariaRowIndex), 10);\n            index = fRows > index ? index : (index - firstRowIndex) + fRows;\n        }\n        return index;\n    };\n    ContentRender.prototype.getVirtualRowIndex = function (index) {\n        return index;\n    };\n    ContentRender.prototype.getMovableRowByIndex = function (index) {\n        index = this.getInfiniteRowIndex(index);\n        return this.parent.getMovableDataRows()[index];\n    };\n    ContentRender.prototype.enableAfterRender = function (e) {\n        if (e.module === 'group' && e.enable) {\n            this.generator = this.getModelGenerator();\n        }\n    };\n    ContentRender.prototype.setRowObjects = function (rows) {\n        this.rows = rows;\n    };\n    /**\n     * @param {NotifyArgs} args - specifies the args\n     * @returns {void}\n     * @hidden\n     */\n    ContentRender.prototype.immutableModeRendering = function (args) {\n        var _this = this;\n        if (args === void 0) { args = {}; }\n        var gObj = this.parent;\n        gObj.hideSpinner();\n        var key = gObj.getPrimaryKeyFieldNames()[0];\n        var oldKeys = {};\n        var newKeys = {};\n        var newRowObjs = [];\n        var oldIndexes = {};\n        var oldRowObjs = gObj.getRowsObject().slice();\n        var batchChangeKeys = this.getBatchEditedRecords(key, oldRowObjs);\n        var newIndexes = {};\n        var hasBatch = Object.keys(batchChangeKeys).length !== 0;\n        if (gObj.getContent().querySelector('.e-emptyrow') || args.requestType === 'reorder'\n            || this.parent.groupSettings.columns.length) {\n            this.refreshContentRows(args);\n        }\n        else {\n            if (gObj.currentViewData.length === 0) {\n                return;\n            }\n            var oldRowElements = {};\n            var tbody = gObj.createElement(literals.tbody);\n            var dataSource = gObj.currentViewData;\n            var trs = [].slice.call(this.getTable().querySelector(literals.tbody).children);\n            if (this.prevCurrentView.length) {\n                var prevLen = this.prevCurrentView.length;\n                var currentLen = dataSource.length;\n                if (prevLen === currentLen) {\n                    for (var i = 0; i < currentLen; i++) {\n                        if (this.parent.editSettings.mode === 'Batch'\n                            && trs[i].classList.contains('e-insertedrow')) {\n                            trs.splice(i, 1);\n                            --i;\n                            continue;\n                        }\n                        newKeys[dataSource[i][key]] = oldKeys[this.prevCurrentView[i][key]] = i;\n                        newIndexes[i] = dataSource[i][key];\n                        oldRowElements[oldRowObjs[i].uid] = trs[i];\n                        oldIndexes[i] = this.prevCurrentView[i][key];\n                    }\n                }\n                else {\n                    for (var i = 0; i < currentLen; i++) {\n                        newKeys[dataSource[i][key]] = i;\n                        newIndexes[i] = dataSource[i][key];\n                    }\n                    for (var i = 0; i < prevLen; i++) {\n                        if (this.parent.editSettings.mode === 'Batch'\n                            && trs[i].classList.contains('e-insertedrow')) {\n                            trs.splice(i, 1);\n                            --i;\n                            continue;\n                        }\n                        oldRowElements[oldRowObjs[i].uid] = trs[i];\n                        oldKeys[this.prevCurrentView[i][key]] = i;\n                        oldIndexes[i] = this.prevCurrentView[i][key];\n                    }\n                }\n            }\n            for (var i = 0; i < dataSource.length; i++) {\n                var oldIndex = oldKeys[dataSource[i][key]];\n                if (!isNullOrUndefined(oldIndex)) {\n                    var isEqual = false;\n                    if (this.mutableData) {\n                        isEqual = this.objectEqualityChecker(this.prevCurrentView[oldIndex], dataSource[i]);\n                    }\n                    var tr = oldRowElements[oldRowObjs[oldIndex].uid];\n                    newRowObjs.push(oldRowObjs[oldIndex]);\n                    if (this.rowElements[oldIndex] && this.rowElements[oldIndex].getAttribute('data-uid') === newRowObjs[i].uid\n                        && ((hasBatch && isNullOrUndefined(batchChangeKeys[newIndexes[i]]))\n                            || (!hasBatch && (isEqual || this.prevCurrentView[oldIndex] === dataSource[i])))) {\n                        if (oldIndex !== i) {\n                            this.refreshImmutableContent(i, tr, newRowObjs[i]);\n                        }\n                        tbody.appendChild(tr);\n                        continue;\n                    }\n                    if ((hasBatch && !isNullOrUndefined(batchChangeKeys[newIndexes[i]]))\n                        || (!this.mutableData && dataSource[i] !== this.prevCurrentView[oldIndex])\n                        || (this.mutableData && !isEqual)) {\n                        oldRowObjs[oldIndex].setRowValue(dataSource[i]);\n                    }\n                    tbody.appendChild(tr);\n                    this.refreshImmutableContent(i, tr, newRowObjs[i]);\n                }\n                else {\n                    var row = new RowRenderer(this.serviceLocator, null, gObj);\n                    var modelData = this.generator.generateRows([dataSource[i]]);\n                    newRowObjs.push(modelData[0]);\n                    var tr = row.render(modelData[0], gObj.getColumns());\n                    tbody.appendChild(tr);\n                    this.refreshImmutableContent(i, tr, newRowObjs[i]);\n                }\n            }\n            this.rows = newRowObjs;\n            this.rowElements = [].slice.call(tbody.children);\n            remove(this.getTable().querySelector(literals.tbody));\n            this.getTable().appendChild(tbody);\n            this.parent.trigger(events.dataBound, {}, function () {\n                if (_this.parent.allowTextWrap) {\n                    _this.parent.notify(events.freezeRender, { case: 'textwrap' });\n                }\n            });\n            if (args) {\n                var action = (args.requestType || '').toLowerCase() + '-complete';\n                this.parent.notify(action, args);\n            }\n        }\n    };\n    ContentRender.prototype.objectEqualityChecker = function (old, next) {\n        var keys = Object.keys(old);\n        var isEqual = true;\n        for (var i = 0; i < keys.length; i++) {\n            if (old[keys[i]] !== next[keys[i]]) {\n                var isDate = old[keys[i]] instanceof Date && next[keys[i]] instanceof Date;\n                if (!isDate || (old[keys[i]].getTime() !== next[keys[i]].getTime())) {\n                    isEqual = false;\n                    break;\n                }\n            }\n        }\n        return isEqual;\n    };\n    ContentRender.prototype.getBatchEditedRecords = function (primaryKey, rows) {\n        var keys = {};\n        var changes = this.parent.getBatchChanges();\n        var changedRecords = [];\n        var addedRecords = [];\n        if (Object.keys(changes).length) {\n            changedRecords = changes.changedRecords;\n            addedRecords = changes.addedRecords;\n        }\n        var args = { cancel: false };\n        this.parent.notify(events.immutableBatchCancel, { rows: rows, args: args });\n        if (addedRecords.length) {\n            if (this.parent.editSettings.newRowPosition === 'Bottom') {\n                rows.splice(rows.length - 1, addedRecords.length);\n            }\n            else {\n                if (!args.cancel) {\n                    rows.splice(0, addedRecords.length);\n                }\n            }\n        }\n        for (var i = 0; i < changedRecords.length; i++) {\n            keys[changedRecords[i][primaryKey]] = i;\n        }\n        return keys;\n    };\n    ContentRender.prototype.refreshImmutableContent = function (index, tr, row) {\n        row.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n        if (row.isAltRow) {\n            tr.classList.add('e-altrow');\n        }\n        else {\n            tr.classList.remove('e-altrow');\n        }\n        row.index = index;\n        row.edit = undefined;\n        row.isDirty = false;\n        tr.setAttribute(literals.ariaRowIndex, index.toString());\n        this.updateCellIndex(tr, index);\n    };\n    ContentRender.prototype.updateCellIndex = function (rowEle, index) {\n        for (var i = 0; i < rowEle.cells.length; i++) {\n            rowEle.cells[i].setAttribute('index', index.toString());\n        }\n    };\n    return ContentRender;\n}());\nexport { ContentRender };\n"]},"metadata":{},"sourceType":"module"}