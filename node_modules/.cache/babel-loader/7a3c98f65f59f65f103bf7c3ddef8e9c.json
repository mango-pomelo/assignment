{"ast":null,"code":"import { getObject, PdfExport as GridPdf, Grid } from '@syncfusion/ej2-grids';\nimport { isRemoteData, isOffline } from '../utils';\nimport { isNullOrUndefined, setValue, extend, getValue } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport * as event from '../base/constant';\n/**\n * TreeGrid PDF Export module\n *\n * @hidden\n */\n\nvar PdfExport =\n/** @class */\nfunction () {\n  /**\n   * Constructor for PDF export module\n   *\n   * @param {TreeGrid} parent - Tree Grid instance\n   */\n  function PdfExport(parent) {\n    Grid.Inject(GridPdf);\n    this.parent = parent;\n    this.dataResults = {};\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} PdfExport module name\n   */\n\n\n  PdfExport.prototype.getModuleName = function () {\n    return 'PdfExport';\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  PdfExport.prototype.addEventListener = function () {\n    this.parent.on('pdfCellInfo', this.pdfQueryCellInfo, this);\n    this.parent.on('updateResults', this.updatePdfResultModel, this);\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  PdfExport.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('pdfCellInfo', this.pdfQueryCellInfo);\n    this.parent.off('updateResults', this.updatePdfResultModel);\n  };\n  /**\n   * To destroy the PDF Export\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  PdfExport.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  PdfExport.prototype.updatePdfResultModel = function (returnResult) {\n    this.dataResults = returnResult;\n  };\n\n  PdfExport.prototype.Map = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n    var _this = this;\n\n    var dtSrc = this.parent.dataSource;\n    var prop = Object();\n    var isLocal = !isRemoteData(this.parent) && isOffline(this.parent);\n    setValue('cancel', false, prop);\n    return new Promise(function (resolve) {\n      var dm = isLocal && !(dtSrc instanceof DataManager) ? new DataManager(dtSrc) : _this.parent.dataSource;\n      var query = new Query();\n\n      if (!isLocal) {\n        query = _this.generateQuery(query);\n        setValue('query', query, prop);\n      }\n\n      _this.parent.trigger(event.beforePdfExport, extend(prop, pdfExportProperties));\n\n      if (getObject('cancel', prop)) {\n        return null;\n      }\n\n      dm.executeQuery(query).then(function (e) {\n        var customsData = null;\n\n        if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.dataSource)) {\n          customsData = pdfExportProperties.dataSource;\n        }\n\n        pdfExportProperties = _this.manipulatePdfProperties(pdfExportProperties, dtSrc, e);\n        return _this.parent.grid.pdfExportModule.Map(_this.parent.grid, pdfExportProperties, isMultipleExport, pdfDoc, isBlob).then(function (document) {\n          if (customsData != null) {\n            pdfExportProperties.dataSource = customsData;\n          } else {\n            delete pdfExportProperties.dataSource;\n          }\n\n          resolve(document);\n        });\n      });\n    });\n  };\n\n  PdfExport.prototype.generateQuery = function (query, prop) {\n    if (!isNullOrUndefined(prop) && prop.exportType === 'CurrentPage' && this.parent.allowPaging) {\n      prop.exportType = 'AllPages';\n      query.addParams('ExportType', 'CurrentPage');\n      query.where(this.parent.parentIdMapping, 'equal', null);\n      query = getObject('grid.renderModule.data.pageQuery', this.parent)(query);\n    }\n\n    return query;\n  };\n\n  PdfExport.prototype.manipulatePdfProperties = function (prop, dtSrc, queryResult) {\n    var args = {}; //count not required for this query\n\n    var isLocal = !isRemoteData(this.parent) && isOffline(this.parent);\n    setValue('query', this.parent.grid.getDataModule().generateQuery(true), args);\n    setValue('isExport', true, args);\n    setValue('isPdfExport', true, args);\n\n    if (!isNullOrUndefined(prop) && !isNullOrUndefined(prop.isCollapsedStatePersist)) {\n      setValue('isCollapsedStatePersist', prop.isCollapsedStatePersist, args);\n    }\n\n    if (!isNullOrUndefined(prop) && !isNullOrUndefined(prop.exportType)) {\n      setValue('exportType', prop.exportType, args);\n    }\n\n    if (!isLocal) {\n      this.parent.parentData = [];\n      this.parent.dataModule.convertToFlatData(getValue('result', queryResult));\n      setValue('expresults', this.parent.flatData, args);\n    }\n\n    this.parent.notify('dataProcessor', args); //args = this.parent.dataModule.dataProcessor(args);\n\n    args = this.dataResults;\n    dtSrc = isNullOrUndefined(args.result) ? this.parent.flatData.slice(0) : args.result;\n\n    if (!isLocal) {\n      this.parent.flatData = [];\n    }\n\n    if (prop && prop.dataSource && isLocal) {\n      var flatDatas = this.parent.flatData;\n      var dataSrc = prop.dataSource instanceof DataManager ? prop.dataSource.dataSource.json : prop.dataSource;\n      this.parent.dataModule.convertToFlatData(dataSrc);\n      dtSrc = this.parent.flatData;\n      this.parent.flatData = flatDatas;\n    }\n\n    prop = isNullOrUndefined(prop) ? {} : prop;\n    prop.dataSource = new DataManager({\n      json: dtSrc\n    });\n    return prop;\n  };\n  /**\n   * TreeGrid PDF Export cell modifier\n   *\n   * @param {PdfQueryCellInfoEventArgs} args - Current cell details\n   * @hidden\n   * @returns {void}\n   */\n\n\n  PdfExport.prototype.pdfQueryCellInfo = function (args) {\n    if (this.parent.grid.getColumnIndexByUid(args.column.uid) === this.parent.treeColumnIndex) {\n      var style = {};\n      var data = getObject('data', args);\n      var ispadfilter = isNullOrUndefined(data.filterLevel);\n      var pad = ispadfilter ? data.level : data.filterLevel;\n      style.paragraphIndent = pad * 3;\n      args.style = style;\n    }\n\n    this.parent.notify('updateResults', args);\n    this.parent.trigger('pdfQueryCellInfo', args);\n  };\n\n  return PdfExport;\n}();\n\nexport { PdfExport };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/pdf-export.js"],"names":["getObject","PdfExport","GridPdf","Grid","isRemoteData","isOffline","isNullOrUndefined","setValue","extend","getValue","DataManager","Query","event","parent","Inject","dataResults","addEventListener","prototype","getModuleName","on","pdfQueryCellInfo","updatePdfResultModel","removeEventListener","isDestroyed","off","destroy","returnResult","Map","pdfExportProperties","isMultipleExport","pdfDoc","isBlob","_this","dtSrc","dataSource","prop","Object","isLocal","Promise","resolve","dm","query","generateQuery","trigger","beforePdfExport","executeQuery","then","e","customsData","manipulatePdfProperties","grid","pdfExportModule","document","exportType","allowPaging","addParams","where","parentIdMapping","queryResult","args","getDataModule","isCollapsedStatePersist","parentData","dataModule","convertToFlatData","flatData","notify","result","slice","flatDatas","dataSrc","json","getColumnIndexByUid","column","uid","treeColumnIndex","style","data","ispadfilter","filterLevel","pad","level","paragraphIndent"],"mappings":"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","sourcesContent":["import { getObject, PdfExport as GridPdf, Grid } from '@syncfusion/ej2-grids';\nimport { isRemoteData, isOffline } from '../utils';\nimport { isNullOrUndefined, setValue, extend, getValue } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport * as event from '../base/constant';\n/**\n * TreeGrid PDF Export module\n *\n * @hidden\n */\nvar PdfExport = /** @class */ (function () {\n    /**\n     * Constructor for PDF export module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function PdfExport(parent) {\n        Grid.Inject(GridPdf);\n        this.parent = parent;\n        this.dataResults = {};\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} PdfExport module name\n     */\n    PdfExport.prototype.getModuleName = function () {\n        return 'PdfExport';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    PdfExport.prototype.addEventListener = function () {\n        this.parent.on('pdfCellInfo', this.pdfQueryCellInfo, this);\n        this.parent.on('updateResults', this.updatePdfResultModel, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    PdfExport.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('pdfCellInfo', this.pdfQueryCellInfo);\n        this.parent.off('updateResults', this.updatePdfResultModel);\n    };\n    /**\n     * To destroy the PDF Export\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PdfExport.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    PdfExport.prototype.updatePdfResultModel = function (returnResult) {\n        this.dataResults = returnResult;\n    };\n    PdfExport.prototype.Map = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n        var _this = this;\n        var dtSrc = this.parent.dataSource;\n        var prop = Object();\n        var isLocal = !isRemoteData(this.parent) && isOffline(this.parent);\n        setValue('cancel', false, prop);\n        return new Promise(function (resolve) {\n            var dm = isLocal && !(dtSrc instanceof DataManager) ? new DataManager(dtSrc)\n                : _this.parent.dataSource;\n            var query = new Query();\n            if (!isLocal) {\n                query = _this.generateQuery(query);\n                setValue('query', query, prop);\n            }\n            _this.parent.trigger(event.beforePdfExport, extend(prop, pdfExportProperties));\n            if (getObject('cancel', prop)) {\n                return null;\n            }\n            dm.executeQuery(query).then(function (e) {\n                var customsData = null;\n                if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.dataSource)) {\n                    customsData = pdfExportProperties.dataSource;\n                }\n                pdfExportProperties = _this.manipulatePdfProperties(pdfExportProperties, dtSrc, e);\n                return _this.parent.grid.pdfExportModule.Map(_this.parent.grid, pdfExportProperties, isMultipleExport, pdfDoc, isBlob).then(function (document) {\n                    if (customsData != null) {\n                        pdfExportProperties.dataSource = customsData;\n                    }\n                    else {\n                        delete pdfExportProperties.dataSource;\n                    }\n                    resolve(document);\n                });\n            });\n        });\n    };\n    PdfExport.prototype.generateQuery = function (query, prop) {\n        if (!isNullOrUndefined(prop) && prop.exportType === 'CurrentPage'\n            && this.parent.allowPaging) {\n            prop.exportType = 'AllPages';\n            query.addParams('ExportType', 'CurrentPage');\n            query.where(this.parent.parentIdMapping, 'equal', null);\n            query = getObject('grid.renderModule.data.pageQuery', this.parent)(query);\n        }\n        return query;\n    };\n    PdfExport.prototype.manipulatePdfProperties = function (prop, dtSrc, queryResult) {\n        var args = {};\n        //count not required for this query\n        var isLocal = !isRemoteData(this.parent) && isOffline(this.parent);\n        setValue('query', this.parent.grid.getDataModule().generateQuery(true), args);\n        setValue('isExport', true, args);\n        setValue('isPdfExport', true, args);\n        if (!isNullOrUndefined(prop) && !isNullOrUndefined(prop.isCollapsedStatePersist)) {\n            setValue('isCollapsedStatePersist', prop.isCollapsedStatePersist, args);\n        }\n        if (!isNullOrUndefined(prop) && !isNullOrUndefined(prop.exportType)) {\n            setValue('exportType', prop.exportType, args);\n        }\n        if (!isLocal) {\n            this.parent.parentData = [];\n            this.parent.dataModule.convertToFlatData(getValue('result', queryResult));\n            setValue('expresults', this.parent.flatData, args);\n        }\n        this.parent.notify('dataProcessor', args);\n        //args = this.parent.dataModule.dataProcessor(args);\n        args = this.dataResults;\n        dtSrc = isNullOrUndefined(args.result) ? this.parent.flatData.slice(0) : args.result;\n        if (!isLocal) {\n            this.parent.flatData = [];\n        }\n        if (prop && prop.dataSource && isLocal) {\n            var flatDatas = this.parent.flatData;\n            var dataSrc = prop.dataSource instanceof DataManager ? prop.dataSource.dataSource.json : prop.dataSource;\n            this.parent.dataModule.convertToFlatData(dataSrc);\n            dtSrc = this.parent.flatData;\n            this.parent.flatData = flatDatas;\n        }\n        prop = isNullOrUndefined(prop) ? {} : prop;\n        prop.dataSource = new DataManager({ json: dtSrc });\n        return prop;\n    };\n    /**\n     * TreeGrid PDF Export cell modifier\n     *\n     * @param {PdfQueryCellInfoEventArgs} args - Current cell details\n     * @hidden\n     * @returns {void}\n     */\n    PdfExport.prototype.pdfQueryCellInfo = function (args) {\n        if (this.parent.grid.getColumnIndexByUid(args.column.uid) === this.parent.treeColumnIndex) {\n            var style = {};\n            var data = getObject('data', args);\n            var ispadfilter = isNullOrUndefined(data.filterLevel);\n            var pad = ispadfilter ? data.level : data.filterLevel;\n            style.paragraphIndent = pad * 3;\n            args.style = style;\n        }\n        this.parent.notify('updateResults', args);\n        this.parent.trigger('pdfQueryCellInfo', args);\n    };\n    return PdfExport;\n}());\nexport { PdfExport };\n"]},"metadata":{},"sourceType":"module"}