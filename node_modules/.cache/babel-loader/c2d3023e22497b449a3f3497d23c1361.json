{"ast":null,"code":"import { Browser, remove, EventHandler, isUndefined, closest, classList } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/util';\nimport * as events from '../base/constant';\nimport * as literals from '../base/string-literals';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n */\n\nvar Clipboard =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid clipboard module\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @hidden\n   */\n  function Clipboard(parent) {\n    this.copyContent = '';\n    this.isSelect = false;\n    this.parent = parent;\n    this.addEventListener();\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Clipboard.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.contentReady, this.initialEnd, this);\n    this.parent.on(events.keyPressed, this.keyDownHandler, this);\n    this.parent.on(events.click, this.clickHandler, this);\n    EventHandler.add(this.parent.element, 'keydown', this.pasteHandler, this);\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Clipboard.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.keyPressed, this.keyDownHandler);\n    this.parent.off(events.contentReady, this.initialEnd);\n    this.parent.off(events.click, this.clickHandler);\n    EventHandler.remove(this.parent.element, 'keydown', this.pasteHandler);\n  };\n\n  Clipboard.prototype.clickHandler = function (e) {\n    var target = e.target; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    target = parentsUntil(target, 'e-rowcell');\n  };\n\n  Clipboard.prototype.pasteHandler = function (e) {\n    var _this = this;\n\n    var grid = this.parent;\n    var isMacLike = /(Mac)/i.test(navigator.platform);\n\n    if (e.keyCode === 86 && (e.ctrlKey || isMacLike && e.metaKey) && !grid.isEdit) {\n      var target = closest(document.activeElement, '.' + literals.rowCell);\n\n      if (!target || !grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' || grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n        return;\n      }\n\n      this.activeElement = document.activeElement;\n      this.clipBoardTextArea.value = '';\n      var x_1 = window.scrollX;\n      var y_1 = window.scrollY;\n      this.clipBoardTextArea.focus();\n      setTimeout(function () {\n        _this.activeElement.focus();\n\n        window.scrollTo(x_1, y_1);\n\n        _this.paste(_this.clipBoardTextArea.value, _this.parent.getSelectedRowCellIndexes()[0].rowIndex, _this.parent.getSelectedRowCellIndexes()[0].cellIndexes[0]);\n      }, 10);\n    }\n  };\n  /**\n   * Paste data from clipboard to selected cells.\n   *\n   * @param {boolean} data - Specifies the date for paste.\n   * @param {boolean} rowIndex - Specifies the row index.\n   * @param {boolean} colIndex - Specifies the column index.\n   * @returns {void}\n   */\n\n\n  Clipboard.prototype.paste = function (data, rowIndex, colIndex) {\n    var grid = this.parent;\n    var cIdx = colIndex;\n    var rIdx = rowIndex;\n    var col;\n    var value;\n    var isAvail;\n\n    if (!grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' || grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n      return;\n    }\n\n    var rows = data.split('\\n');\n    var cols;\n    var dataRows = grid.getDataRows();\n    var mRows;\n    var frRows;\n    var isFrozen = this.parent.isFrozenGrid();\n\n    if (isFrozen) {\n      mRows = grid.getMovableDataRows();\n\n      if (grid.getFrozenRightColumnsCount()) {\n        frRows = grid.getFrozenRightDataRows();\n      }\n    }\n\n    for (var r = 0; r < rows.length; r++) {\n      cols = rows[r].split('\\t');\n      cIdx = colIndex;\n\n      if (r === rows.length - 1 && rows[r] === '' || isUndefined(grid.getRowByIndex(rIdx))) {\n        cIdx++;\n        break;\n      }\n\n      for (var c = 0; c < cols.length; c++) {\n        isAvail = grid.getCellFromIndex(rIdx, cIdx);\n\n        if (isFrozen) {\n          var fTr = dataRows[rIdx];\n          var mTr = mRows[rIdx];\n          isAvail = !fTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') ? mTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') : true;\n\n          if (frRows && !isAvail) {\n            var frTr = frRows[rIdx];\n            isAvail = frTr.querySelector('[aria-colindex=\"' + cIdx + '\"]');\n          }\n        }\n\n        if (!isAvail) {\n          cIdx++;\n          break;\n        }\n\n        col = grid.getColumnByIndex(cIdx);\n        value = col.getParser() ? col.getParser()(cols[c]) : cols[c];\n\n        if (col.allowEditing && !col.isPrimaryKey && !col.template) {\n          var args = {\n            column: col,\n            data: value,\n            rowIndex: rIdx\n          };\n          this.parent.trigger(events.beforePaste, args);\n          rIdx = args.rowIndex;\n\n          if (!args.cancel) {\n            if (grid.editModule) {\n              if (col.type === 'number') {\n                this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.data));\n              } else {\n                grid.editModule.updateCell(rIdx, col.field, args.data);\n              }\n            }\n          }\n        }\n\n        cIdx++;\n      }\n\n      rIdx++;\n    }\n\n    grid.selectionModule.selectCellsByRange({\n      rowIndex: rowIndex,\n      cellIndex: colIndex\n    }, {\n      rowIndex: rIdx - 1,\n      cellIndex: cIdx - 1\n    });\n    var cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);\n\n    if (cell) {\n      classList(cell, ['e-focus', 'e-focused'], []);\n    }\n  };\n\n  Clipboard.prototype.initialEnd = function () {\n    this.parent.off(events.contentReady, this.initialEnd);\n    this.clipBoardTextArea = this.parent.createElement('textarea', {\n      className: 'e-clipboard',\n      styles: 'opacity: 0',\n      attrs: {\n        tabindex: '-1',\n        'aria-label': 'clipboard'\n      }\n    });\n    this.parent.element.appendChild(this.clipBoardTextArea);\n  };\n\n  Clipboard.prototype.keyDownHandler = function (e) {\n    if (e.action === 'ctrlPlusC') {\n      this.copy();\n    } else if (e.action === 'ctrlShiftPlusH') {\n      this.copy(true);\n    }\n  };\n\n  Clipboard.prototype.setCopyData = function (withHeader) {\n    if (window.getSelection().toString() === '') {\n      var isFrozen = this.parent.isFrozenGrid();\n      this.clipBoardTextArea.value = this.copyContent = '';\n      var mRows = void 0;\n      var frRows = void 0;\n      var rows = this.parent.getRows();\n\n      if (isFrozen) {\n        mRows = this.parent.getMovableDataRows();\n\n        if (this.parent.getFrozenMode() === literals.leftRight) {\n          frRows = this.parent.getFrozenRightRows();\n        }\n      }\n\n      if (this.parent.selectionSettings.mode !== 'Cell') {\n        var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function (a, b) {\n          return a - b;\n        });\n\n        if (withHeader) {\n          var headerTextArray = [];\n\n          for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {\n            headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;\n          }\n\n          this.getCopyData(headerTextArray, false, '\\t', withHeader);\n          this.copyContent += '\\n';\n        }\n\n        for (var i = 0; i < selectedIndexes.length; i++) {\n          if (i > 0) {\n            this.copyContent += '\\n';\n          }\n\n          var cells = [].slice.call(rows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)'));\n\n          if (isFrozen) {\n            cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n\n            if (frRows) {\n              cells.push.apply(cells, [].slice.call(frRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n            }\n          }\n\n          this.getCopyData(cells, false, '\\t', withHeader);\n        }\n      } else {\n        var obj = this.checkBoxSelection();\n\n        if (obj.status) {\n          if (withHeader) {\n            var headers = [];\n\n            for (var i = 0; i < obj.colIndexes.length; i++) {\n              headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));\n            }\n\n            this.getCopyData(headers, false, '\\t', withHeader);\n            this.copyContent += '\\n';\n          }\n\n          for (var i = 0; i < obj.rowIndexes.length; i++) {\n            if (i > 0) {\n              this.copyContent += '\\n';\n            }\n\n            var cells = [].slice.call(rows[obj.rowIndexes[i]].getElementsByClassName('e-cellselectionbackground'));\n\n            if (isFrozen) {\n              cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]].getElementsByClassName('e-cellselectionbackground')));\n\n              if (frRows) {\n                cells.push.apply(cells, [].slice.call(frRows[obj.rowIndexes[i]].getElementsByClassName('e-cellselectionbackground')));\n              }\n            }\n\n            this.getCopyData(cells, false, '\\t', withHeader);\n          }\n        } else {\n          this.getCopyData([].slice.call(this.parent.element.getElementsByClassName('e-cellselectionbackground')), true, '\\n', withHeader);\n        }\n      }\n\n      var args = {\n        data: this.copyContent,\n        cancel: false\n      };\n      this.parent.trigger(events.beforeCopy, args);\n\n      if (args.cancel) {\n        return;\n      }\n\n      this.clipBoardTextArea.value = this.copyContent = args.data;\n\n      if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n        this.clipBoardTextArea.select();\n      } else {\n        this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n      }\n\n      this.isSelect = true;\n    }\n  };\n\n  Clipboard.prototype.getCopyData = function (cells, isCell, splitKey, withHeader) {\n    var isElement = typeof cells[0] !== 'string';\n\n    for (var j = 0; j < cells.length; j++) {\n      if (withHeader && isCell) {\n        var colIdx = parseInt(cells[j].getAttribute(literals.ariaColIndex), 10);\n        this.copyContent += this.parent.getColumns()[colIdx].headerText + '\\n';\n      }\n\n      if (isElement) {\n        if (!cells[j].classList.contains('e-hide')) {\n          this.copyContent += cells[j].innerText;\n        }\n      } else {\n        this.copyContent += cells[j];\n      }\n\n      if (j < cells.length - 1) {\n        this.copyContent += splitKey;\n      }\n    }\n  };\n  /**\n   * Copy selected rows or cells data into clipboard.\n   *\n   * @returns {void}\n   * @param {boolean} withHeader - Specifies whether the column header data need to be copied or not.\n   */\n\n\n  Clipboard.prototype.copy = function (withHeader) {\n    if (document.queryCommandSupported('copy')) {\n      this.setCopyData(withHeader);\n      document.execCommand('copy');\n      this.clipBoardTextArea.blur();\n    }\n\n    if (this.isSelect) {\n      window.getSelection().removeAllRanges();\n      this.isSelect = false;\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} returns the module name\n   * @private\n   */\n\n\n  Clipboard.prototype.getModuleName = function () {\n    return 'clipboard';\n  };\n  /**\n   * To destroy the clipboard\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Clipboard.prototype.destroy = function () {\n    this.removeEventListener();\n\n    if (this.clipBoardTextArea) {\n      remove(this.clipBoardTextArea);\n    }\n  };\n\n  Clipboard.prototype.checkBoxSelection = function () {\n    var gridObj = this.parent;\n    var obj = {\n      status: false\n    };\n\n    if (gridObj.selectionSettings.mode === 'Cell') {\n      var rowCellIndxes = gridObj.getSelectedRowCellIndexes();\n      var str = void 0;\n      var rowIndexes = [];\n      var i = void 0;\n\n      for (i = 0; i < rowCellIndxes.length; i++) {\n        if (rowCellIndxes[i].cellIndexes.length) {\n          rowIndexes.push(rowCellIndxes[i].rowIndex);\n        }\n\n        if (rowCellIndxes[i].cellIndexes.length) {\n          if (!str) {\n            str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());\n          }\n\n          if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {\n            break;\n          }\n        }\n      }\n\n      rowIndexes.sort(function (a, b) {\n        return a - b;\n      });\n\n      if (i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] === rowIndexes.length - 1) {\n        obj = {\n          status: true,\n          rowIndexes: rowIndexes,\n          colIndexes: rowCellIndxes[0].cellIndexes\n        };\n      }\n    }\n\n    return obj;\n  };\n\n  return Clipboard;\n}();\n\nexport { Clipboard };","map":{"version":3,"sources":["/Users/zhouzhou/Desktop/lightfront/node_modules/@syncfusion/ej2-grids/src/grid/actions/clipboard.js"],"names":["Browser","remove","EventHandler","isUndefined","closest","classList","parentsUntil","events","literals","Clipboard","parent","copyContent","isSelect","addEventListener","prototype","isDestroyed","on","contentReady","initialEnd","keyPressed","keyDownHandler","click","clickHandler","add","element","pasteHandler","removeEventListener","off","e","target","_this","grid","isMacLike","test","navigator","platform","keyCode","ctrlKey","metaKey","isEdit","document","activeElement","rowCell","editSettings","allowEditing","mode","selectionSettings","cellSelectionMode","clipBoardTextArea","value","x_1","window","scrollX","y_1","scrollY","focus","setTimeout","scrollTo","paste","getSelectedRowCellIndexes","rowIndex","cellIndexes","data","colIndex","cIdx","rIdx","col","isAvail","rows","split","cols","dataRows","getDataRows","mRows","frRows","isFrozen","isFrozenGrid","getMovableDataRows","getFrozenRightColumnsCount","getFrozenRightDataRows","r","length","getRowByIndex","c","getCellFromIndex","fTr","mTr","querySelector","frTr","getColumnByIndex","getParser","isPrimaryKey","template","args","column","trigger","beforePaste","cancel","editModule","type","updateCell","field","parseFloat","selectionModule","selectCellsByRange","cellIndex","cell","createElement","className","styles","attrs","tabindex","appendChild","action","copy","setCopyData","withHeader","getSelection","toString","getRows","getFrozenMode","leftRight","getFrozenRightRows","selectedIndexes","getSelectedRowIndexes","sort","a","b","headerTextArray","i","getVisibleColumns","headerText","getCopyData","cells","slice","call","querySelectorAll","push","apply","obj","checkBoxSelection","status","headers","colIndexes","getColumnHeaderByIndex","rowIndexes","getElementsByClassName","beforeCopy","userAgent","match","select","setSelectionRange","isCell","splitKey","isElement","j","colIdx","parseInt","getAttribute","ariaColIndex","getColumns","contains","innerText","queryCommandSupported","execCommand","blur","removeAllRanges","getModuleName","destroy","gridObj","rowCellIndxes","str","JSON","stringify"],"mappings":"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","sourcesContent":["import { Browser, remove, EventHandler, isUndefined, closest, classList } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/util';\nimport * as events from '../base/constant';\nimport * as literals from '../base/string-literals';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n */\nvar Clipboard = /** @class */ (function () {\n    /**\n     * Constructor for the Grid clipboard module\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @hidden\n     */\n    function Clipboard(parent) {\n        this.copyContent = '';\n        this.isSelect = false;\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Clipboard.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.contentReady, this.initialEnd, this);\n        this.parent.on(events.keyPressed, this.keyDownHandler, this);\n        this.parent.on(events.click, this.clickHandler, this);\n        EventHandler.add(this.parent.element, 'keydown', this.pasteHandler, this);\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Clipboard.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.keyPressed, this.keyDownHandler);\n        this.parent.off(events.contentReady, this.initialEnd);\n        this.parent.off(events.click, this.clickHandler);\n        EventHandler.remove(this.parent.element, 'keydown', this.pasteHandler);\n    };\n    Clipboard.prototype.clickHandler = function (e) {\n        var target = e.target;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        target = parentsUntil(target, 'e-rowcell');\n    };\n    Clipboard.prototype.pasteHandler = function (e) {\n        var _this = this;\n        var grid = this.parent;\n        var isMacLike = /(Mac)/i.test(navigator.platform);\n        if (e.keyCode === 86 && (e.ctrlKey || (isMacLike && e.metaKey)) && !grid.isEdit) {\n            var target = closest(document.activeElement, '.' + literals.rowCell);\n            if (!target || !grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' ||\n                grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n                return;\n            }\n            this.activeElement = document.activeElement;\n            this.clipBoardTextArea.value = '';\n            var x_1 = window.scrollX;\n            var y_1 = window.scrollY;\n            this.clipBoardTextArea.focus();\n            setTimeout(function () {\n                _this.activeElement.focus();\n                window.scrollTo(x_1, y_1);\n                _this.paste(_this.clipBoardTextArea.value, _this.parent.getSelectedRowCellIndexes()[0].rowIndex, _this.parent.getSelectedRowCellIndexes()[0].cellIndexes[0]);\n            }, 10);\n        }\n    };\n    /**\n     * Paste data from clipboard to selected cells.\n     *\n     * @param {boolean} data - Specifies the date for paste.\n     * @param {boolean} rowIndex - Specifies the row index.\n     * @param {boolean} colIndex - Specifies the column index.\n     * @returns {void}\n     */\n    Clipboard.prototype.paste = function (data, rowIndex, colIndex) {\n        var grid = this.parent;\n        var cIdx = colIndex;\n        var rIdx = rowIndex;\n        var col;\n        var value;\n        var isAvail;\n        if (!grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' ||\n            grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n            return;\n        }\n        var rows = data.split('\\n');\n        var cols;\n        var dataRows = grid.getDataRows();\n        var mRows;\n        var frRows;\n        var isFrozen = this.parent.isFrozenGrid();\n        if (isFrozen) {\n            mRows = grid.getMovableDataRows();\n            if (grid.getFrozenRightColumnsCount()) {\n                frRows = grid.getFrozenRightDataRows();\n            }\n        }\n        for (var r = 0; r < rows.length; r++) {\n            cols = rows[r].split('\\t');\n            cIdx = colIndex;\n            if ((r === rows.length - 1 && rows[r] === '') || isUndefined(grid.getRowByIndex(rIdx))) {\n                cIdx++;\n                break;\n            }\n            for (var c = 0; c < cols.length; c++) {\n                isAvail = grid.getCellFromIndex(rIdx, cIdx);\n                if (isFrozen) {\n                    var fTr = dataRows[rIdx];\n                    var mTr = mRows[rIdx];\n                    isAvail = !fTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') ?\n                        mTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') : true;\n                    if (frRows && !isAvail) {\n                        var frTr = frRows[rIdx];\n                        isAvail = frTr.querySelector('[aria-colindex=\"' + cIdx + '\"]');\n                    }\n                }\n                if (!isAvail) {\n                    cIdx++;\n                    break;\n                }\n                col = grid.getColumnByIndex(cIdx);\n                value = col.getParser() ? col.getParser()(cols[c]) : cols[c];\n                if (col.allowEditing && !col.isPrimaryKey && !col.template) {\n                    var args = {\n                        column: col,\n                        data: value,\n                        rowIndex: rIdx\n                    };\n                    this.parent.trigger(events.beforePaste, args);\n                    rIdx = args.rowIndex;\n                    if (!args.cancel) {\n                        if (grid.editModule) {\n                            if (col.type === 'number') {\n                                this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.data));\n                            }\n                            else {\n                                grid.editModule.updateCell(rIdx, col.field, args.data);\n                            }\n                        }\n                    }\n                }\n                cIdx++;\n            }\n            rIdx++;\n        }\n        grid.selectionModule.selectCellsByRange({ rowIndex: rowIndex, cellIndex: colIndex }, { rowIndex: rIdx - 1, cellIndex: cIdx - 1 });\n        var cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);\n        if (cell) {\n            classList(cell, ['e-focus', 'e-focused'], []);\n        }\n    };\n    Clipboard.prototype.initialEnd = function () {\n        this.parent.off(events.contentReady, this.initialEnd);\n        this.clipBoardTextArea = this.parent.createElement('textarea', {\n            className: 'e-clipboard',\n            styles: 'opacity: 0',\n            attrs: { tabindex: '-1', 'aria-label': 'clipboard' }\n        });\n        this.parent.element.appendChild(this.clipBoardTextArea);\n    };\n    Clipboard.prototype.keyDownHandler = function (e) {\n        if (e.action === 'ctrlPlusC') {\n            this.copy();\n        }\n        else if (e.action === 'ctrlShiftPlusH') {\n            this.copy(true);\n        }\n    };\n    Clipboard.prototype.setCopyData = function (withHeader) {\n        if (window.getSelection().toString() === '') {\n            var isFrozen = this.parent.isFrozenGrid();\n            this.clipBoardTextArea.value = this.copyContent = '';\n            var mRows = void 0;\n            var frRows = void 0;\n            var rows = this.parent.getRows();\n            if (isFrozen) {\n                mRows = this.parent.getMovableDataRows();\n                if (this.parent.getFrozenMode() === literals.leftRight) {\n                    frRows = this.parent.getFrozenRightRows();\n                }\n            }\n            if (this.parent.selectionSettings.mode !== 'Cell') {\n                var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function (a, b) { return a - b; });\n                if (withHeader) {\n                    var headerTextArray = [];\n                    for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {\n                        headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;\n                    }\n                    this.getCopyData(headerTextArray, false, '\\t', withHeader);\n                    this.copyContent += '\\n';\n                }\n                for (var i = 0; i < selectedIndexes.length; i++) {\n                    if (i > 0) {\n                        this.copyContent += '\\n';\n                    }\n                    var cells = [].slice.call(rows[selectedIndexes[i]].\n                        querySelectorAll('.e-rowcell:not(.e-hide)'));\n                    if (isFrozen) {\n                        cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n                        if (frRows) {\n                            cells.push.apply(cells, [].slice.call(frRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n                        }\n                    }\n                    this.getCopyData(cells, false, '\\t', withHeader);\n                }\n            }\n            else {\n                var obj = this.checkBoxSelection();\n                if (obj.status) {\n                    if (withHeader) {\n                        var headers = [];\n                        for (var i = 0; i < obj.colIndexes.length; i++) {\n                            headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));\n                        }\n                        this.getCopyData(headers, false, '\\t', withHeader);\n                        this.copyContent += '\\n';\n                    }\n                    for (var i = 0; i < obj.rowIndexes.length; i++) {\n                        if (i > 0) {\n                            this.copyContent += '\\n';\n                        }\n                        var cells = [].slice.call(rows[obj.rowIndexes[i]].\n                            getElementsByClassName('e-cellselectionbackground'));\n                        if (isFrozen) {\n                            cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]]\n                                .getElementsByClassName('e-cellselectionbackground')));\n                            if (frRows) {\n                                cells.push.apply(cells, [].slice.call(frRows[obj.rowIndexes[i]]\n                                    .getElementsByClassName('e-cellselectionbackground')));\n                            }\n                        }\n                        this.getCopyData(cells, false, '\\t', withHeader);\n                    }\n                }\n                else {\n                    this.getCopyData([].slice.call(this.parent.element.getElementsByClassName('e-cellselectionbackground')), true, '\\n', withHeader);\n                }\n            }\n            var args = {\n                data: this.copyContent,\n                cancel: false\n            };\n            this.parent.trigger(events.beforeCopy, args);\n            if (args.cancel) {\n                return;\n            }\n            this.clipBoardTextArea.value = this.copyContent = args.data;\n            if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n                this.clipBoardTextArea.select();\n            }\n            else {\n                this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n            }\n            this.isSelect = true;\n        }\n    };\n    Clipboard.prototype.getCopyData = function (cells, isCell, splitKey, withHeader) {\n        var isElement = typeof cells[0] !== 'string';\n        for (var j = 0; j < cells.length; j++) {\n            if (withHeader && isCell) {\n                var colIdx = parseInt(cells[j].getAttribute(literals.ariaColIndex), 10);\n                this.copyContent += this.parent.getColumns()[colIdx].headerText + '\\n';\n            }\n            if (isElement) {\n                if (!cells[j].classList.contains('e-hide')) {\n                    this.copyContent += cells[j].innerText;\n                }\n            }\n            else {\n                this.copyContent += cells[j];\n            }\n            if (j < cells.length - 1) {\n                this.copyContent += splitKey;\n            }\n        }\n    };\n    /**\n     * Copy selected rows or cells data into clipboard.\n     *\n     * @returns {void}\n     * @param {boolean} withHeader - Specifies whether the column header data need to be copied or not.\n     */\n    Clipboard.prototype.copy = function (withHeader) {\n        if (document.queryCommandSupported('copy')) {\n            this.setCopyData(withHeader);\n            document.execCommand('copy');\n            this.clipBoardTextArea.blur();\n        }\n        if (this.isSelect) {\n            window.getSelection().removeAllRanges();\n            this.isSelect = false;\n        }\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     * @private\n     */\n    Clipboard.prototype.getModuleName = function () {\n        return 'clipboard';\n    };\n    /**\n     * To destroy the clipboard\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Clipboard.prototype.destroy = function () {\n        this.removeEventListener();\n        if (this.clipBoardTextArea) {\n            remove(this.clipBoardTextArea);\n        }\n    };\n    Clipboard.prototype.checkBoxSelection = function () {\n        var gridObj = this.parent;\n        var obj = { status: false };\n        if (gridObj.selectionSettings.mode === 'Cell') {\n            var rowCellIndxes = gridObj.getSelectedRowCellIndexes();\n            var str = void 0;\n            var rowIndexes = [];\n            var i = void 0;\n            for (i = 0; i < rowCellIndxes.length; i++) {\n                if (rowCellIndxes[i].cellIndexes.length) {\n                    rowIndexes.push(rowCellIndxes[i].rowIndex);\n                }\n                if (rowCellIndxes[i].cellIndexes.length) {\n                    if (!str) {\n                        str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());\n                    }\n                    if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {\n                        break;\n                    }\n                }\n            }\n            rowIndexes.sort(function (a, b) { return a - b; });\n            if (i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] === rowIndexes.length - 1) {\n                obj = { status: true, rowIndexes: rowIndexes, colIndexes: rowCellIndxes[0].cellIndexes };\n            }\n        }\n        return obj;\n    };\n    return Clipboard;\n}());\nexport { Clipboard };\n"]},"metadata":{},"sourceType":"module"}